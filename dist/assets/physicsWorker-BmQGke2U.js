(function(){"use strict";class Q{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new c);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new c);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new Q);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],l=s[2],a=s[3],d=s[4],p=s[5],h=s[6],f=s[7],u=s[8],m=n[0],y=n[1],w=n[2],v=n[3],x=n[4],g=n[5],E=n[6],z=n[7],T=n[8];return i[0]=o*m+r*v+l*E,i[1]=o*y+r*x+l*z,i[2]=o*w+r*g+l*T,i[3]=a*m+d*v+p*E,i[4]=a*y+d*x+p*z,i[5]=a*w+d*g+p*T,i[6]=h*m+f*v+u*E,i[7]=h*y+f*x+u*z,i[8]=h*w+f*g+u*T,e}scale(t,e){e===void 0&&(e=new Q);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new c);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let l=3;const a=l;let d;const p=4;let h;do{if(o=a-l,i[o+n*o]===0){for(r=o+1;r<a;r++)if(i[o+n*r]!==0){d=p;do h=p-d,i[h+n*o]+=i[h+n*r];while(--d);break}}if(i[o+n*o]!==0)for(r=o+1;r<a;r++){const f=i[o+n*r]/i[o+n*o];d=p;do h=p-d,i[h+n*r]=h<=o?0:i[h+n*r]-i[h+n*o]*f;while(--d)}}while(--l);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new Q);const e=3,s=6,n=Pe;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const l=r;let a;const d=s;let p;do{if(i=l-r,n[i+s*i]===0){for(o=i+1;o<l;o++)if(n[i+s*o]!==0){a=d;do p=d-a,n[p+s*i]+=n[p+s*o];while(--a);break}}if(n[i+s*i]!==0)for(o=i+1;o<l;o++){const h=n[i+s*o]/n[i+s*i];a=d;do p=d-a,n[p+s*o]=p<=i?0:n[p+s*o]-n[p+s*i]*h;while(--a)}}while(--r);i=2;do{o=i-1;do{const h=n[i+s*o]/n[i+s*i];a=s;do p=s-a,n[p+s*o]=n[p+s*o]-n[p+s*i]*h;while(--a)}while(o--)}while(--i);i=2;do{const h=1/n[i+s*i];a=s;do p=s-a,n[p+s*i]=n[p+s*i]*h;while(--a)}while(i--);i=2;do{o=2;do{if(p=n[e+o+s*i],isNaN(p)||p===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,p)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,l=n+n,a=e*o,d=e*r,p=e*l,h=s*r,f=s*l,u=n*l,m=i*o,y=i*r,w=i*l,v=this.elements;return v[3*0+0]=1-(h+u),v[3*0+1]=d-w,v[3*0+2]=p+y,v[3*1+0]=d+w,v[3*1+1]=1-(a+u),v[3*1+2]=f-m,v[3*2+0]=p-y,v[3*2+1]=f+m,v[3*2+2]=1-(a+h),this}transpose(t){t===void 0&&(t=new Q);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const Pe=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class c{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new c);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,l=this.z;return e.x=r*i-l*n,e.y=l*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new c(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new c(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new Q([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new c);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new c);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new c),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new c),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new c),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=Fe,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=Re;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(ee),ee.almostEquals(t,e)}clone(){return new c(this.x,this.y,this.z)}}c.ZERO=new c(0,0,0),c.UNIT_X=new c(1,0,0),c.UNIT_Y=new c(0,1,0),c.UNIT_Z=new c(0,0,1);const Fe=new c,Re=new c,ee=new c;class Z{constructor(t){t===void 0&&(t={}),this.lowerBound=new c,this.upperBound=new c,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let l=1;l<t.length;l++){let a=t[l];r&&(r.vmult(a,se),a=se),a.x>o.x&&(o.x=a.x),a.x<i.x&&(i.x=a.x),a.y>o.y&&(o.y=a.y),a.y<i.y&&(i.y=a.y),a.z>o.z&&(o.z=a.z),a.z<i.z&&(i.z=a.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new Z().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,l=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&l}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,l){const a=this.lowerBound,d=this.upperBound;t.copy(a),e.set(d.x,a.y,a.z),s.set(d.x,d.y,a.z),n.set(a.x,d.y,d.z),i.set(d.x,a.y,d.z),o.set(a.x,d.y,a.z),r.set(a.x,a.y,d.z),l.copy(d)}toLocalFrame(t,e){const s=ne,n=s[0],i=s[1],o=s[2],r=s[3],l=s[4],a=s[5],d=s[6],p=s[7];this.getCorners(n,i,o,r,l,a,d,p);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=ne,n=s[0],i=s[1],o=s[2],r=s[3],l=s[4],a=s[5],d=s[6],p=s[7];this.getCorners(n,i,o,r,l,a,d,p);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,l=(this.upperBound.x-s.x)*n,a=(this.lowerBound.y-s.y)*i,d=(this.upperBound.y-s.y)*i,p=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,l),Math.min(a,d)),Math.min(p,h)),u=Math.min(Math.min(Math.max(r,l),Math.max(a,d)),Math.max(p,h));return!(u<0||f>u)}}const se=new c,ne=[new c,new c,new c,new c,new c,new c,new c,new c];class ie{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class oe{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class H{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new c),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=qe,n=_e;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new H);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,l=t.y,a=t.z,d=t.w;return e.x=s*d+o*r+n*a-i*l,e.y=n*d+o*l+i*r-s*a,e.z=i*d+o*a+s*l-n*r,e.w=o*d-s*r-n*l-i*a,e}inverse(t){t===void 0&&(t=new H);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new H),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new c);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,l=this.z,a=this.w,d=a*s+r*i-l*n,p=a*n+l*s-o*i,h=a*i+o*n-r*s,f=-o*s-r*n-l*i;return e.x=d*a+f*-o+p*-l-h*-r,e.y=p*a+f*-r+h*-o-d*-l,e.z=h*a+f*-l+d*-r-p*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,l=this.z,a=this.w;switch(e){case"YZX":const d=o*r+l*a;if(d>.499&&(s=2*Math.atan2(o,a),n=Math.PI/2,i=0),d<-.499&&(s=-2*Math.atan2(o,a),n=-Math.PI/2,i=0),s===void 0){const p=o*o,h=r*r,f=l*l;s=Math.atan2(2*r*a-2*o*l,1-2*h-2*f),n=Math.asin(2*d),i=Math.atan2(2*o*a-2*r*l,1-2*p-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),l=Math.sin(t/2),a=Math.sin(e/2),d=Math.sin(s/2);return n==="XYZ"?(this.x=l*o*r+i*a*d,this.y=i*a*r-l*o*d,this.z=i*o*d+l*a*r,this.w=i*o*r-l*a*d):n==="YXZ"?(this.x=l*o*r+i*a*d,this.y=i*a*r-l*o*d,this.z=i*o*d-l*a*r,this.w=i*o*r+l*a*d):n==="ZXY"?(this.x=l*o*r-i*a*d,this.y=i*a*r+l*o*d,this.z=i*o*d+l*a*r,this.w=i*o*r-l*a*d):n==="ZYX"?(this.x=l*o*r-i*a*d,this.y=i*a*r+l*o*d,this.z=i*o*d-l*a*r,this.w=i*o*r+l*a*d):n==="YZX"?(this.x=l*o*r+i*a*d,this.y=i*a*r+l*o*d,this.z=i*o*d-l*a*r,this.w=i*o*r-l*a*d):n==="XZY"&&(this.x=l*o*r-i*a*d,this.y=i*a*r-l*o*d,this.z=i*o*d+l*a*r,this.w=i*o*r+l*a*d),this}clone(){return new H(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new H);const n=this.x,i=this.y,o=this.z,r=this.w;let l=t.x,a=t.y,d=t.z,p=t.w,h,f,u,m,y;return f=n*l+i*a+o*d+r*p,f<0&&(f=-f,l=-l,a=-a,d=-d,p=-p),1-f>1e-6?(h=Math.acos(f),u=Math.sin(h),m=Math.sin((1-e)*h)/u,y=Math.sin(e*h)/u):(m=1-e,y=e),s.x=m*n+y*l,s.y=m*i+y*a,s.z=m*o+y*d,s.w=m*r+y*p,s}integrate(t,e,s,n){n===void 0&&(n=new H);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,l=this.x,a=this.y,d=this.z,p=this.w,h=e*.5;return n.x+=h*(i*p+o*d-r*a),n.y+=h*(o*p+r*l-i*d),n.z+=h*(r*p+i*a-o*l),n.w+=h*(-i*l-o*a-r*d),n}}const qe=new c,_e=new c,Le={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class N{constructor(t){t===void 0&&(t={}),this.id=N.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}N.idCounter=0,N.types=Le;class W{constructor(t){t===void 0&&(t={}),this.position=new c,this.quaternion=new H,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return W.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return W.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new c),s.vsub(t,n),e.conjugate(re),re.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new c),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new c),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new c),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const re=new H;class vt extends N{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:N.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new c;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let l=0;l!==r;l++){const a=(l+1)%r;e[o[l]].vsub(e[o[a]],n),n.normalize();let d=!1;for(let p=0;p!==s.length;p++)if(s[p].almostEquals(n)||s[p].almostEquals(n)){d=!0;break}d||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new c;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];vt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new c,o=new c;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,l,a){const d=new c;let p=-1,h=-Number.MAX_VALUE;for(let u=0;u<s.faces.length;u++){d.copy(s.faceNormals[u]),i.vmult(d,d);const m=d.dot(o);m>h&&(h=m,p=u)}const f=[];for(let u=0;u<s.faces[p].length;u++){const m=s.vertices[s.faces[p][u]],y=new c;y.copy(m),i.vmult(y,y),n.vadd(y,y),f.push(y)}p>=0&&this.clipFaceAgainstHull(o,t,e,f,r,l,a)}findSeparatingAxis(t,e,s,n,i,o,r,l){const a=new c,d=new c,p=new c,h=new c,f=new c,u=new c;let m=Number.MAX_VALUE;const y=this;if(y.uniqueAxes)for(let w=0;w!==y.uniqueAxes.length;w++){s.vmult(y.uniqueAxes[w],a);const v=y.testSepAxis(a,t,e,s,n,i);if(v===!1)return!1;v<m&&(m=v,o.copy(a))}else{const w=r?r.length:y.faces.length;for(let v=0;v<w;v++){const x=r?r[v]:v;a.copy(y.faceNormals[x]),s.vmult(a,a);const g=y.testSepAxis(a,t,e,s,n,i);if(g===!1)return!1;g<m&&(m=g,o.copy(a))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],d);const v=y.testSepAxis(d,t,e,s,n,i);if(v===!1)return!1;v<m&&(m=v,o.copy(d))}else{const w=l?l.length:t.faces.length;for(let v=0;v<w;v++){const x=l?l[v]:v;d.copy(t.faceNormals[x]),i.vmult(d,d);const g=y.testSepAxis(d,t,e,s,n,i);if(g===!1)return!1;g<m&&(m=g,o.copy(d))}}for(let w=0;w!==y.uniqueEdges.length;w++){s.vmult(y.uniqueEdges[w],h);for(let v=0;v!==t.uniqueEdges.length;v++)if(i.vmult(t.uniqueEdges[v],f),h.cross(f,u),!u.almostZero()){u.normalize();const x=y.testSepAxis(u,t,e,s,n,i);if(x===!1)return!1;x<m&&(m=x,o.copy(u))}}return n.vsub(e,p),p.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;vt.project(r,t,s,n,jt),vt.project(e,t,i,o,Vt);const l=jt[0],a=jt[1],d=Vt[0],p=Vt[1];if(l<p||d<a)return!1;const h=l-p,f=d-a;return h<f?h:f}calculateLocalInertia(t,e){const s=new c,n=new c;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const l=new c,a=new c,d=new c,p=new c,h=new c,f=new c,u=new c,m=new c,y=this,w=[],v=n,x=w;let g=-1,E=Number.MAX_VALUE;for(let I=0;I<y.faces.length;I++){l.copy(y.faceNormals[I]),s.vmult(l,l);const R=l.dot(t);R<E&&(E=R,g=I)}if(g<0)return;const z=y.faces[g];z.connectedFaces=[];for(let I=0;I<y.faces.length;I++)for(let R=0;R<y.faces[I].length;R++)z.indexOf(y.faces[I][R])!==-1&&I!==g&&z.connectedFaces.indexOf(I)===-1&&z.connectedFaces.push(I);const T=z.length;for(let I=0;I<T;I++){const R=y.vertices[z[I]],O=y.vertices[z[(I+1)%T]];R.vsub(O,a),d.copy(a),s.vmult(d,d),e.vadd(d,d),p.copy(this.faceNormals[g]),s.vmult(p,p),e.vadd(p,p),d.cross(p,h),h.negate(h),f.copy(R),s.vmult(f,f),e.vadd(f,f);const b=z.connectedFaces[I];u.copy(this.faceNormals[b]);const M=this.getPlaneConstantOfFace(b);m.copy(u),s.vmult(m,m);const S=M-m.dot(e);for(this.clipFaceAgainstPlane(v,x,m,S);v.length;)v.shift();for(;x.length;)v.push(x.shift())}u.copy(this.faceNormals[g]);const P=this.getPlaneConstantOfFace(g);m.copy(u),s.vmult(m,m);const _=P-m.dot(e);for(let I=0;I<v.length;I++){let R=m.dot(v[I])+_;if(R<=i&&(console.log(`clamped: depth=${R} to minDist=${i}`),R=i),R<=o){const O=v[I];if(R<=1e-6){const b={point:O,normal:m,depth:R};r.push(b)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let l=t[t.length-1],a=t[0];i=s.dot(l)+n;for(let d=0;d<r;d++){if(a=t[d],o=s.dot(a)+n,i<0)if(o<0){const p=new c;p.copy(a),e.push(p)}else{const p=new c;l.lerp(a,i/(i-o),p),e.push(p)}else if(o<0){const p=new c;l.lerp(a,i/(i-o),p),e.push(p),e.push(a)}l=a,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new c);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new c);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,l,a,d,p,h=new c;for(let f=0;f<i.length;f++){h.copy(i[f]),e.vmult(h,h),t.vadd(h,h);const u=h;(o===void 0||u.x<o)&&(o=u.x),(a===void 0||u.x>a)&&(a=u.x),(r===void 0||u.y<r)&&(r=u.y),(d===void 0||u.y>d)&&(d=u.y),(l===void 0||u.z<l)&&(l=u.z),(p===void 0||u.z>p)&&(p=u.z)}s.set(o,r,l),n.set(a,d,p)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new c);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=new c;this.getAveragePointLocal(i);for(let o=0;o<this.faces.length;o++){let r=n[o];const l=e[s[o][0]],a=new c;t.vsub(l,a);const d=r.dot(a),p=new c;i.vsub(l,p);const h=r.dot(p);if(d<0&&h>0||d>0&&h<0)return!1}return-1}static project(t,e,s,n,i){const o=t.vertices.length,r=Oe;let l=0,a=0;const d=ke,p=t.vertices;d.setZero(),W.vectorToLocalFrame(s,n,e,r),W.pointToLocalFrame(s,n,d,d);const h=d.dot(r);a=l=p[0].dot(r);for(let f=1;f<o;f++){const u=p[f].dot(r);u>l&&(l=u),u<a&&(a=u)}if(a-=h,l-=h,a>l){const f=a;a=l,l=f}i[0]=l,i[1]=a}}const jt=[],Vt=[];new c;const Oe=new c,ke=new c;class Gt extends N{constructor(t){super({type:N.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=c,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],l=new vt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=l,l.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new c),Gt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)dt.set(i[o][0],i[o][1],i[o][2]),e.vmult(dt,dt),t.vadd(dt,dt),s(dt.x,dt.y,dt.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;st[0].set(i.x,i.y,i.z),st[1].set(-i.x,i.y,i.z),st[2].set(-i.x,-i.y,i.z),st[3].set(-i.x,-i.y,-i.z),st[4].set(i.x,-i.y,-i.z),st[5].set(i.x,i.y,-i.z),st[6].set(-i.x,i.y,-i.z),st[7].set(i.x,-i.y,i.z);const o=st[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const l=st[r];e.vmult(l,l),t.vadd(l,l);const a=l.x,d=l.y,p=l.z;a>n.x&&(n.x=a),d>n.y&&(n.y=d),p>n.z&&(n.z=p),a<s.x&&(s.x=a),d<s.y&&(s.y=d),p<s.z&&(s.z=p)}}}const dt=new c,st=[new c,new c,new c,new c,new c,new c,new c,new c],J={DYNAMIC:1,STATIC:2,KINEMATIC:4},Ht={AWAKE:0,SLEEPY:1,SLEEPING:2};class A extends oe{constructor(t){t===void 0&&(t={}),super(),this.id=A.idCounter++,this.index=-1,this.world=null,this.vlambda=new c,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new c,this.previousPosition=new c,this.interpolatedPosition=new c,this.initPosition=new c,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new c,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new c,this.force=new c;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?A.STATIC:A.DYNAMIC,typeof t.type==typeof A.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=A.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new c,this.quaternion=new H,this.initQuaternion=new H,this.previousQuaternion=new H,this.interpolatedQuaternion=new H,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new c,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new c,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new c,this.invInertia=new c,this.invInertiaWorld=new Q,this.invMassSolve=0,this.invInertiaSolve=new c,this.invInertiaWorldSolve=new Q,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new c(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new c(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new Z,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new c,this.isTrigger=!!t.isTrigger,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=A.AWAKE,this.wakeUpAfterNarrowphase=!1,t===A.SLEEPING&&this.dispatchEvent(A.wakeupEvent)}sleep(){this.sleepState=A.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===A.AWAKE&&s<n?(this.sleepState=A.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(A.sleepyEvent)):e===A.SLEEPY&&s>n?this.wakeUp():e===A.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(A.sleepEvent))}}updateSolveMassProperties(){this.sleepState===A.SLEEPING||this.type===A.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new c),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new c),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new c,i=new H;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),l=o.boundingSphereRadius;r+l>n&&(n=r+l)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=We,o=je,r=this.quaternion,l=this.aabb,a=Ve;for(let d=0;d!==n;d++){const p=t[d];r.vmult(e[d],i),i.vadd(this.position,i),r.mult(s[d],o),p.calculateWorldAABB(i,o,a.lowerBound,a.upperBound),d===0?l.copy(a):l.extend(a)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=Ge,n=He;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new c),this.type!==A.DYNAMIC)return;this.sleepState===A.SLEEPING&&this.wakeUp();const s=De;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new c),this.type!==A.DYNAMIC)return;const s=Ye,n=Ue;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===A.DYNAMIC&&(this.sleepState===A.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new c),this.type!==A.DYNAMIC)return;this.sleepState===A.SLEEPING&&this.wakeUp();const s=e,n=$e;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=Xe;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new c),this.type!==A.DYNAMIC)return;const s=Ke,n=Ze;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=Je;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Gt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new c;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===A.DYNAMIC||this.type===A.KINEMATIC)||this.sleepState===A.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,l=this.torque,a=this.quaternion,d=this.invMass,p=this.invInertiaWorld,h=this.linearFactor,f=d*t;n.x+=r.x*f*h.x,n.y+=r.y*f*h.y,n.z+=r.z*f*h.z;const u=p.elements,m=this.angularFactor,y=l.x*m.x,w=l.y*m.y,v=l.z*m.z;i.x+=t*(u[0]*y+u[1]*w+u[2]*v),i.y+=t*(u[3]*y+u[4]*w+u[5]*v),i.z+=t*(u[6]*y+u[7]*w+u[8]*v),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,a.integrate(this.angularVelocity,t,this.angularFactor,a),e&&(s?a.normalizeFast():a.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}A.idCounter=0,A.COLLIDE_EVENT_NAME="collide",A.DYNAMIC=J.DYNAMIC,A.STATIC=J.STATIC,A.KINEMATIC=J.KINEMATIC,A.AWAKE=Ht.AWAKE,A.SLEEPY=Ht.SLEEPY,A.SLEEPING=Ht.SLEEPING,A.wakeupEvent={type:"wakeup"},A.sleepyEvent={type:"sleepy"},A.sleepEvent={type:"sleep"};const We=new c,je=new H,Ve=new Z,Ge=new Q,He=new Q;new Q;const De=new c,Ye=new c,Ue=new c,$e=new c,Xe=new c,Ke=new c,Ze=new c,Je=new c;class Qe{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!((t.collisionFilterGroup&e.collisionFilterMask)===0||(e.collisionFilterGroup&t.collisionFilterMask)===0||((t.type&A.STATIC)!==0||t.sleepState===A.SLEEPING)&&((e.type&A.STATIC)!==0||e.sleepState===A.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=ts;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=es,n=ss,i=ns,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const l=n[r].id,a=i[r].id,d=l<a?`${l},${a}`:`${a},${l}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const l=s.keys.pop(),a=s[l];t.push(n[a]),e.push(i[a]),delete s[l]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new c;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const ts=new c;new c,new H,new c;const es={keys:[]},ss=[],ns=[];new c,new c,new c;class is extends Qe{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let l=0;l!==i;l++)for(let a=0;a!==l;a++)o=n[l],r=n[a],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class Tt{constructor(){this.rayFromWorld=new c,this.rayToWorld=new c,this.hitNormalWorld=new c,this.hitPointWorld=new c,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let ce,le,ae,he,de,ue,pe;const Dt={CLOSEST:1,ANY:2,ALL:4};ce=N.types.SPHERE,le=N.types.PLANE,ae=N.types.BOX,he=N.types.CYLINDER,de=N.types.CONVEXPOLYHEDRON,ue=N.types.HEIGHTFIELD,pe=N.types.TRIMESH;class D{get[ce](){return this._intersectSphere}get[le](){return this._intersectPlane}get[ae](){return this._intersectBox}get[he](){return this._intersectConvex}get[de](){return this._intersectConvex}get[ue](){return this._intersectHeightfield}get[pe](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new c),e===void 0&&(e=new c),this.from=t.clone(),this.to=e.clone(),this.direction=new c,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=D.ANY,this.result=new Tt,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||D.ANY,this.result=e.result||new Tt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(fe),Yt.length=0,t.broadphase.aabbQuery(t,fe,Yt),this.intersectBodies(Yt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||(this.collisionFilterGroup&t.collisionFilterMask)===0||(t.collisionFilterGroup&this.collisionFilterMask)===0)return;const n=os,i=rs;for(let o=0,r=t.shapes.length;o<r;o++){const l=t.shapes[o];if(!(s&&!l.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(l,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(gs(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,l=this.direction,a=new c(0,0,1);e.vmult(a,a);const d=new c;o.vsub(s,d);const p=d.dot(a);r.vsub(s,d);const h=d.dot(a);if(p*h>0||o.distanceTo(r)<p)return;const f=a.dot(l);if(Math.abs(f)<this.precision)return;const u=new c,m=new c,y=new c;o.vsub(s,u);const w=-a.dot(u)/f;l.scale(w,m),o.vadd(m,y),this.reportIntersection(a,y,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=cs;o.from.copy(this.from),o.to.copy(this.to),W.pointToLocalFrame(s,e,o.from,o.from),W.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=ls;let l,a,d,p;l=a=0,d=p=t.data.length-1;const h=new Z;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),l=Math.max(l,r[0]),a=Math.max(a,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),p=Math.min(p,r[1]+1);for(let f=l;f<d;f++)for(let u=a;u<p;u++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,u,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,u,!1),W.pointToWorldFrame(s,e,t.pillarOffset,Bt),this._intersectConvex(t.pillarConvex,e,Bt,n,i,ve),this.result.shouldStop)return;t.getConvexTrianglePillar(f,u,!0),W.pointToWorldFrame(s,e,t.pillarOffset,Bt),this._intersectConvex(t.pillarConvex,e,Bt,n,i,ve)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,l=t.radius,a=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),p=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-l**2,h=d**2-4*a*p,f=as,u=hs;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,u),u.normalize(),this.reportIntersection(u,f,i,n,-1);else{const m=(-d-Math.sqrt(h))/(2*a),y=(-d+Math.sqrt(h))/(2*a);if(m>=0&&m<=1&&(o.lerp(r,m,f),f.vsub(s,u),u.normalize(),this.reportIntersection(u,f,i,n,-1)),this.result.shouldStop)return;y>=0&&y<=1&&(o.lerp(r,y,f),f.vsub(s,u),u.normalize(),this.reportIntersection(u,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=ds,l=me,a=o&&o.faceList||null,d=t.faces,p=t.vertices,h=t.faceNormals,f=this.direction,u=this.from,m=this.to,y=u.distanceTo(m),w=a?a.length:d.length,v=this.result;for(let x=0;!v.shouldStop&&x<w;x++){const g=a?a[x]:x,E=d[g],z=h[g],T=e,P=s;l.copy(p[E[0]]),T.vmult(l,l),l.vadd(P,l),l.vsub(u,l),T.vmult(z,r);const _=f.dot(r);if(Math.abs(_)<this.precision)continue;const I=r.dot(l)/_;if(!(I<0)){f.scale(I,X),X.vadd(u,X),tt.copy(p[E[0]]),T.vmult(tt,tt),P.vadd(tt,tt);for(let R=1;!v.shouldStop&&R<E.length-1;R++){nt.copy(p[E[R]]),it.copy(p[E[R+1]]),T.vmult(nt,nt),T.vmult(it,it),P.vadd(nt,nt),P.vadd(it,it);const O=X.distanceTo(u);!(D.pointInTriangle(X,tt,nt,it)||D.pointInTriangle(X,nt,tt,it))||O>y||this.reportIntersection(r,X,i,n,g)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=us,l=ws,a=xs,d=me,p=ps,h=fs,f=vs,u=ys,m=ms,y=t.indices;t.vertices;const w=this.from,v=this.to,x=this.direction;a.position.copy(s),a.quaternion.copy(e),W.vectorToLocalFrame(s,e,x,p),W.pointToLocalFrame(s,e,w,h),W.pointToLocalFrame(s,e,v,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,p),p.normalize();const g=h.distanceSquared(f);t.tree.rayQuery(this,a,l);for(let E=0,z=l.length;!this.result.shouldStop&&E!==z;E++){const T=l[E];t.getNormal(T,r),t.getVertex(y[T*3],tt),tt.vsub(h,d);const P=p.dot(r),_=r.dot(d)/P;if(_<0)continue;p.scale(_,X),X.vadd(h,X),t.getVertex(y[T*3+1],nt),t.getVertex(y[T*3+2],it);const I=X.distanceSquared(h);!(D.pointInTriangle(X,nt,tt,it)||D.pointInTriangle(X,tt,nt,it))||I>g||(W.vectorToWorldFrame(e,r,m),W.pointToWorldFrame(s,e,X,u),this.reportIntersection(m,u,i,n,T))}l.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,l=o.distanceTo(e),a=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(a.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case D.ALL:this.hasHit=!0,a.set(o,r,t,e,s,n,l),a.hasHit=!0,this.callback(a);break;case D.CLOSEST:(l<a.distance||!a.hasHit)&&(this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,l));break;case D.ANY:this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,l),a.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,ut),s.vsub(e,bt),t.vsub(e,Ut);const i=ut.dot(ut),o=ut.dot(bt),r=ut.dot(Ut),l=bt.dot(bt),a=bt.dot(Ut);let d,p;return(d=l*r-o*a)>=0&&(p=i*a-o*r)>=0&&d+p<i*l-o*o}}D.CLOSEST=Dt.CLOSEST,D.ANY=Dt.ANY,D.ALL=Dt.ALL;const fe=new Z,Yt=[],bt=new c,Ut=new c,os=new c,rs=new H,X=new c,tt=new c,nt=new c,it=new c;new c,new Tt;const ve={faceList:[0]},Bt=new c,cs=new D,ls=[],as=new c,hs=new c,ds=new c;new c,new c;const me=new c,us=new c,ps=new c,fs=new c,vs=new c,ms=new c,ys=new c;new Z;const ws=[],xs=new W,ut=new c,It=new c;function gs(B,t,e){e.vsub(B,ut);const s=ut.dot(t);return t.scale(s,It),It.vadd(B,It),e.distanceTo(It)}class ye{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Pt{constructor(t,e,s){s===void 0&&(s={}),s=ye.defaults(s,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=Pt.idCounter++,this.collideConnected=s.collideConnected,s.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}Pt.idCounter=0;class we{constructor(){this.spatial=new c,this.rotational=new c}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Et{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=Et.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new we,this.jacobianElementB=new we,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,l=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,l)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,l=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,l)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,l=n.torque,a=s.invMassSolve,d=n.invMassSolve;return i.scale(a,xe),r.scale(d,ge),s.invInertiaWorldSolve.vmult(o,be),n.invInertiaWorldSolve.vmult(l,Ee),t.multiplyVectors(xe,be)+e.multiplyVectors(ge,Ee)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,l=n.invInertiaWorldSolve;let a=i+o;return r.vmult(t.rotational,Ft),a+=Ft.dot(t.rotational),l.vmult(e.rotational,Ft),a+=Ft.dot(e.rotational),a}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=bs;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Et.idCounter=0;const xe=new c,ge=new c,be=new c,Ee=new c,Ft=new c,bs=new c;class Ce extends Et{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new c,this.rj=new c,this.ni=new c}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,l=Es,a=Cs,d=n.velocity,p=n.angularVelocity;n.force,n.torque;const h=i.velocity,f=i.angularVelocity;i.force,i.torque;const u=zs,m=this.jacobianElementA,y=this.jacobianElementB,w=this.ni;o.cross(w,l),r.cross(w,a),w.negate(m.spatial),l.negate(m.rotational),y.spatial.copy(w),y.rotational.copy(a),u.copy(i.position),u.vadd(r,u),u.vsub(n.position,u),u.vsub(o,u);const v=w.dot(u),x=this.restitution+1,g=x*h.dot(w)-x*d.dot(w)+f.dot(a)-p.dot(l),E=this.computeGiMf();return-v*e-g*s-t*E}getImpactVelocityAlongNormal(){const t=Ss,e=Ms,s=As,n=Ns,i=Ts;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const Es=new c,Cs=new c,zs=new c,Ss=new c,Ms=new c,As=new c,Ns=new c,Ts=new c;new c,new c,new c,new c,new c,new c;class Rt extends Pt{constructor(t,e,s,n){n===void 0&&(n=1e6),super(t,e),typeof s>"u"&&(s=t.position.distanceTo(e.position)),this.distance=s;const i=this.distanceEquation=new Ce(t,e);this.equations.push(i),i.minForce=-n,i.maxForce=n}update(){const t=this.bodyA,e=this.bodyB,s=this.distanceEquation,n=this.distance*.5,i=s.ni;e.position.vsub(t.position,i),i.normalize(),i.scale(n,s.ri),i.scale(-n,s.rj)}}new c,new c,new c,new c;class ze extends Et{constructor(t,e,s){super(t,e,-s,s),this.ri=new c,this.rj=new c,this.t=new c}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=Bs,o=Is,r=this.t;s.cross(r,i),n.cross(r,o);const l=this.jacobianElementA,a=this.jacobianElementB;r.negate(l.spatial),i.negate(l.rotational),a.spatial.copy(r),a.rotational.copy(o);const d=this.computeGW(),p=this.computeGiMf();return-d*e-t*p}}const Bs=new c,Is=new c;class Ct{constructor(t,e,s){s=ye.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Ct.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}Ct.idCounter=0;class zt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=zt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}zt.idCounter=0,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new D,new c,new c,new c,new c(1,0,0),new c(0,1,0),new c(0,0,1),new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c;class Ps extends N{constructor(t){if(super({type:N.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new c);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const l=o[r];s[l]=t[l]-i,n[l]=t[l]+i}}}new c,new c,new c,new c,new c,new c,new c,new c,new c;class Fs extends vt{constructor(t,e,s,n){if(t===void 0&&(t=1),e===void 0&&(e=1),s===void 0&&(s=1),n===void 0&&(n=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const i=n,o=[],r=[],l=[],a=[],d=[],p=Math.cos,h=Math.sin;o.push(new c(-e*h(0),-s*.5,e*p(0))),a.push(0),o.push(new c(-t*h(0),s*.5,t*p(0))),d.push(1);for(let u=0;u<i;u++){const m=2*Math.PI/i*(u+1),y=2*Math.PI/i*(u+.5);u<i-1?(o.push(new c(-e*h(m),-s*.5,e*p(m))),a.push(2*u+2),o.push(new c(-t*h(m),s*.5,t*p(m))),d.push(2*u+3),l.push([2*u,2*u+1,2*u+3,2*u+2])):l.push([2*u,2*u+1,1,0]),(i%2===1||u<i/2)&&r.push(new c(-h(y),0,p(y)))}l.push(a),r.push(new c(0,1,0));const f=[];for(let u=0;u<d.length;u++)f.push(d[d.length-u-1]);l.push(f),super({vertices:o,faces:l,axes:r}),this.type=N.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=n}}new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new Z,new c,new Z,new c,new c,new c,new c,new c,new c,new c,new Z,new c,new W,new Z;class Rs{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class qs extends Rs{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,l=e.bodies,a=l.length,d=t;let p,h,f,u,m,y;if(r!==0)for(let g=0;g!==a;g++)l[g].updateSolveMassProperties();const w=Ls,v=Os,x=_s;w.length=r,v.length=r,x.length=r;for(let g=0;g!==r;g++){const E=o[g];x[g]=0,v[g]=E.computeB(d),w[g]=1/E.computeC()}if(r!==0){for(let z=0;z!==a;z++){const T=l[z],P=T.vlambda,_=T.wlambda;P.set(0,0,0),_.set(0,0,0)}for(s=0;s!==n;s++){u=0;for(let z=0;z!==r;z++){const T=o[z];p=v[z],h=w[z],y=x[z],m=T.computeGWlambda(),f=h*(p-m-T.eps*y),y+f<T.minForce?f=T.minForce-y:y+f>T.maxForce&&(f=T.maxForce-y),x[z]+=f,u+=f>0?f:-f,T.addToWlambda(f)}if(u*u<i)break}for(let z=0;z!==a;z++){const T=l[z],P=T.velocity,_=T.angularVelocity;T.vlambda.vmul(T.linearFactor,T.vlambda),P.vadd(T.vlambda,P),T.wlambda.vmul(T.angularFactor,T.wlambda),_.vadd(T.wlambda,_)}let g=o.length;const E=1/d;for(;g--;)o[g].multiplier=x[g]*E}return s}}const _s=[],Ls=[],Os=[];class ks{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class Ws extends ks{constructor(){super(...arguments),this.type=c}constructObject(){return new c}}const j={sphereSphere:N.types.SPHERE,spherePlane:N.types.SPHERE|N.types.PLANE,boxBox:N.types.BOX|N.types.BOX,sphereBox:N.types.SPHERE|N.types.BOX,planeBox:N.types.PLANE|N.types.BOX,convexConvex:N.types.CONVEXPOLYHEDRON,sphereConvex:N.types.SPHERE|N.types.CONVEXPOLYHEDRON,planeConvex:N.types.PLANE|N.types.CONVEXPOLYHEDRON,boxConvex:N.types.BOX|N.types.CONVEXPOLYHEDRON,sphereHeightfield:N.types.SPHERE|N.types.HEIGHTFIELD,boxHeightfield:N.types.BOX|N.types.HEIGHTFIELD,convexHeightfield:N.types.CONVEXPOLYHEDRON|N.types.HEIGHTFIELD,sphereParticle:N.types.PARTICLE|N.types.SPHERE,planeParticle:N.types.PLANE|N.types.PARTICLE,boxParticle:N.types.BOX|N.types.PARTICLE,convexParticle:N.types.PARTICLE|N.types.CONVEXPOLYHEDRON,cylinderCylinder:N.types.CYLINDER,sphereCylinder:N.types.SPHERE|N.types.CYLINDER,planeCylinder:N.types.PLANE|N.types.CYLINDER,boxCylinder:N.types.BOX|N.types.CYLINDER,convexCylinder:N.types.CONVEXPOLYHEDRON|N.types.CYLINDER,heightfieldCylinder:N.types.HEIGHTFIELD|N.types.CYLINDER,particleCylinder:N.types.PARTICLE|N.types.CYLINDER,sphereTrimesh:N.types.SPHERE|N.types.TRIMESH,planeTrimesh:N.types.PLANE|N.types.TRIMESH};class js{get[j.sphereSphere](){return this.sphereSphere}get[j.spherePlane](){return this.spherePlane}get[j.boxBox](){return this.boxBox}get[j.sphereBox](){return this.sphereBox}get[j.planeBox](){return this.planeBox}get[j.convexConvex](){return this.convexConvex}get[j.sphereConvex](){return this.sphereConvex}get[j.planeConvex](){return this.planeConvex}get[j.boxConvex](){return this.boxConvex}get[j.sphereHeightfield](){return this.sphereHeightfield}get[j.boxHeightfield](){return this.boxHeightfield}get[j.convexHeightfield](){return this.convexHeightfield}get[j.sphereParticle](){return this.sphereParticle}get[j.planeParticle](){return this.planeParticle}get[j.boxParticle](){return this.boxParticle}get[j.convexParticle](){return this.convexParticle}get[j.cylinderCylinder](){return this.convexConvex}get[j.sphereCylinder](){return this.sphereConvex}get[j.planeCylinder](){return this.planeConvex}get[j.boxCylinder](){return this.boxConvex}get[j.convexCylinder](){return this.convexConvex}get[j.heightfieldCylinder](){return this.heightfieldCylinder}get[j.particleCylinder](){return this.particleCylinder}get[j.sphereTrimesh](){return this.sphereTrimesh}get[j.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Ws,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Ce(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const l=this.currentContactMaterial;r.restitution=l.restitution,r.setSpookParams(l.contactEquationStiffness,l.contactEquationRelaxation,this.world.dt);const a=s.material||t.material,d=n.material||e.material;return a&&d&&a.restitution>=0&&d.restitution>=0&&(r.restitution=a.restitution*d.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,l=this.currentContactMaterial;let a=l.friction;const d=i.material||s.material,p=o.material||n.material;if(d&&p&&d.friction>=0&&p.friction>=0&&(a=d.friction*p.friction),a>0){const h=a*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const u=this.frictionEquationPool,m=u.length?u.pop():new ze(s,n,h*f),y=u.length?u.pop():new ze(s,n,h*f);return m.bi=y.bi=s,m.bj=y.bj=n,m.minForce=y.minForce=-h*f,m.maxForce=y.maxForce=h*f,m.ri.copy(t.ri),m.rj.copy(t.rj),y.ri.copy(t.ri),y.rj.copy(t.rj),t.ni.tangents(m.t,y.t),m.setSpookParams(l.frictionEquationStiffness,l.frictionEquationRelaxation,r.dt),y.setSpookParams(l.frictionEquationStiffness,l.frictionEquationRelaxation,r.dt),m.enabled=y.enabled=t.enabled,e.push(m,y),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];pt.setZero(),mt.setZero(),yt.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(pt.vadd(e.ni,pt),mt.vadd(e.ri,mt),yt.vadd(e.rj,yt)):(pt.vsub(e.ni,pt),mt.vadd(e.rj,mt),yt.vadd(e.ri,yt));const o=1/t;mt.scale(o,s.ri),yt.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),pt.normalize(),pt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const l=Hs,a=Ds,d=Vs,p=Gs;for(let h=0,f=t.length;h!==f;h++){const u=t[h],m=e[h];let y=null;u.material&&m.material&&(y=s.getContactMaterial(u.material,m.material)||null);const w=u.type&A.KINEMATIC&&m.type&A.STATIC||u.type&A.STATIC&&m.type&A.KINEMATIC||u.type&A.KINEMATIC&&m.type&A.KINEMATIC;for(let v=0;v<u.shapes.length;v++){u.quaternion.mult(u.shapeOrientations[v],l),u.quaternion.vmult(u.shapeOffsets[v],d),d.vadd(u.position,d);const x=u.shapes[v];for(let g=0;g<m.shapes.length;g++){m.quaternion.mult(m.shapeOrientations[g],a),m.quaternion.vmult(m.shapeOffsets[g],p),p.vadd(m.position,p);const E=m.shapes[g];if(!(x.collisionFilterMask&E.collisionFilterGroup&&E.collisionFilterMask&x.collisionFilterGroup)||d.distanceTo(p)>x.boundingSphereRadius+E.boundingSphereRadius)continue;let z=null;x.material&&E.material&&(z=s.getContactMaterial(x.material,E.material)||null),this.currentContactMaterial=z||y||s.defaultContactMaterial;const T=x.type|E.type,P=this[T];if(P){let _=!1;x.type<E.type?_=P.call(this,x,E,d,p,l,a,u,m,x,E,w):_=P.call(this,E,x,p,d,a,l,m,u,x,E,w),_&&w&&(s.shapeOverlapKeeper.set(x.id,E.id),s.bodyOverlapKeeper.set(u.id,m.id))}}}}}sphereSphere(t,e,s,n,i,o,r,l,a,d,p){if(p)return s.distanceSquared(n)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,l,t,e,a,d);n.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(n,h.rj),h.rj.vsub(l.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,l,a,d,p){const h=this.createContactEquation(r,l,t,e,a,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(n,qt),h.ni.scale(h.ni.dot(qt),Se),qt.vsub(Se,h.rj),-qt.dot(h.ni)<=t.radius){if(p)return!0;const f=h.ri,u=h.rj;f.vadd(s,f),f.vsub(r.position,f),u.vadd(n,u),u.vsub(l.position,u),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,l,a,d,p){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,l,t,e,p)}sphereBox(t,e,s,n,i,o,r,l,a,d,p){const h=this.v3pool,f=wn;s.vsub(n,_t),e.getSideNormals(f,o);const u=t.radius;let m=!1;const y=gn,w=bn,v=En;let x=null,g=0,E=0,z=0,T=null;for(let C=0,G=f.length;C!==G&&m===!1;C++){const L=vn;L.copy(f[C]);const k=L.length();L.normalize();const K=_t.dot(L);if(K<k+u&&K>0){const $=mn,F=yn;$.copy(f[(C+1)%3]),F.copy(f[(C+2)%3]);const gt=$.length(),Wt=F.length();$.normalize(),F.normalize();const Qt=_t.dot($),te=_t.dot(F);if(Qt<gt&&Qt>-gt&&te<Wt&&te>-Wt){const Ie=Math.abs(K-k-u);if((T===null||Ie<T)&&(T=Ie,E=Qt,z=te,x=k,y.copy(L),w.copy($),v.copy(F),g++,p))return!0}}}if(g){m=!0;const C=this.createContactEquation(r,l,t,e,a,d);y.scale(-u,C.ri),C.ni.copy(y),C.ni.negate(C.ni),y.scale(x,y),w.scale(E,w),y.vadd(w,y),v.scale(z,v),y.vadd(v,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(n,C.rj),C.rj.vsub(l.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult)}let P=h.get();const _=xn;for(let C=0;C!==2&&!m;C++)for(let G=0;G!==2&&!m;G++)for(let L=0;L!==2&&!m;L++)if(P.set(0,0,0),C?P.vadd(f[0],P):P.vsub(f[0],P),G?P.vadd(f[1],P):P.vsub(f[1],P),L?P.vadd(f[2],P):P.vsub(f[2],P),n.vadd(P,_),_.vsub(s,_),_.lengthSquared()<u*u){if(p)return!0;m=!0;const k=this.createContactEquation(r,l,t,e,a,d);k.ri.copy(_),k.ri.normalize(),k.ni.copy(k.ri),k.ri.scale(u,k.ri),k.rj.copy(P),k.ri.vadd(s,k.ri),k.ri.vsub(r.position,k.ri),k.rj.vadd(n,k.rj),k.rj.vsub(l.position,k.rj),this.result.push(k),this.createFrictionEquationsFromContact(k,this.frictionResult)}h.release(P),P=null;const I=h.get(),R=h.get(),O=h.get(),b=h.get(),M=h.get(),S=f.length;for(let C=0;C!==S&&!m;C++)for(let G=0;G!==S&&!m;G++)if(C%3!==G%3){f[G].cross(f[C],I),I.normalize(),f[C].vadd(f[G],R),O.copy(s),O.vsub(R,O),O.vsub(n,O);const L=O.dot(I);I.scale(L,b);let k=0;for(;k===C%3||k===G%3;)k++;M.copy(s),M.vsub(b,M),M.vsub(R,M),M.vsub(n,M);const K=Math.abs(L),$=M.length();if(K<f[k].length()&&$<u){if(p)return!0;m=!0;const F=this.createContactEquation(r,l,t,e,a,d);R.vadd(b,F.rj),F.rj.copy(F.rj),M.negate(F.ni),F.ni.normalize(),F.ri.copy(F.rj),F.ri.vadd(n,F.ri),F.ri.vsub(s,F.ri),F.ri.normalize(),F.ri.scale(u,F.ri),F.ri.vadd(s,F.ri),F.ri.vsub(r.position,F.ri),F.rj.vadd(n,F.rj),F.rj.vsub(l.position,F.rj),this.result.push(F),this.createFrictionEquationsFromContact(F,this.frictionResult)}}h.release(I,R,O,b,M)}planeBox(t,e,s,n,i,o,r,l,a,d,p){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,l,t,e,p)}convexConvex(t,e,s,n,i,o,r,l,a,d,p,h,f){const u=Ln;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,u,h,f)){const m=[],y=On;t.clipAgainstHull(s,i,e,n,o,u,-100,100,m);let w=0;for(let v=0;v!==m.length;v++){if(p)return!0;const x=this.createContactEquation(r,l,t,e,a,d),g=x.ri,E=x.rj;u.negate(x.ni),m[v].normal.negate(y),y.scale(m[v].depth,y),m[v].point.vadd(y,g),E.copy(m[v].point),g.vsub(s,g),E.vsub(n,E),g.vadd(s,g),g.vsub(r.position,g),E.vadd(n,E),E.vsub(l.position,E),this.result.push(x),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(x,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,l,a,d,p){const h=this.v3pool;s.vsub(n,Cn);const f=e.faceNormals,u=e.faces,m=e.vertices,y=t.radius;let w=!1;for(let v=0;v!==m.length;v++){const x=m[v],g=An;o.vmult(x,g),n.vadd(g,g);const E=Mn;if(g.vsub(s,E),E.lengthSquared()<y*y){if(p)return!0;w=!0;const z=this.createContactEquation(r,l,t,e,a,d);z.ri.copy(E),z.ri.normalize(),z.ni.copy(z.ri),z.ri.scale(y,z.ri),g.vsub(n,z.rj),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.vadd(n,z.rj),z.rj.vsub(l.position,z.rj),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult);return}}for(let v=0,x=u.length;v!==x&&w===!1;v++){const g=f[v],E=u[v],z=Nn;o.vmult(g,z);const T=Tn;o.vmult(m[E[0]],T),T.vadd(n,T);const P=Bn;z.scale(-y,P),s.vadd(P,P);const _=In;P.vsub(T,_);const I=_.dot(z),R=Pn;if(s.vsub(T,R),I<0&&R.dot(z)>0){const O=[];for(let b=0,M=E.length;b!==M;b++){const S=h.get();o.vmult(m[E[b]],S),n.vadd(S,S),O.push(S)}if(fn(O,z,s)){if(p)return!0;w=!0;const b=this.createContactEquation(r,l,t,e,a,d);z.scale(-y,b.ri),z.negate(b.ni);const M=h.get();z.scale(-I,M);const S=h.get();z.scale(-y,S),s.vsub(n,b.rj),b.rj.vadd(S,b.rj),b.rj.vadd(M,b.rj),b.rj.vadd(n,b.rj),b.rj.vsub(l.position,b.rj),b.ri.vadd(s,b.ri),b.ri.vsub(r.position,b.ri),h.release(M),h.release(S),this.result.push(b),this.createFrictionEquationsFromContact(b,this.frictionResult);for(let C=0,G=O.length;C!==G;C++)h.release(O[C]);return}else for(let b=0;b!==E.length;b++){const M=h.get(),S=h.get();o.vmult(m[E[(b+1)%E.length]],M),o.vmult(m[E[(b+2)%E.length]],S),n.vadd(M,M),n.vadd(S,S);const C=zn;S.vsub(M,C);const G=Sn;C.unit(G);const L=h.get(),k=h.get();s.vsub(M,k);const K=k.dot(G);G.scale(K,L),L.vadd(M,L);const $=h.get();if(L.vsub(s,$),K>0&&K*K<C.lengthSquared()&&$.lengthSquared()<y*y){if(p)return!0;const F=this.createContactEquation(r,l,t,e,a,d);L.vsub(n,F.rj),L.vsub(s,F.ni),F.ni.normalize(),F.ni.scale(y,F.ri),F.rj.vadd(n,F.rj),F.rj.vsub(l.position,F.rj),F.ri.vadd(s,F.ri),F.ri.vsub(r.position,F.ri),this.result.push(F),this.createFrictionEquationsFromContact(F,this.frictionResult);for(let gt=0,Wt=O.length;gt!==Wt;gt++)h.release(O[gt]);h.release(M),h.release(S),h.release(L),h.release($),h.release(k);return}h.release(M),h.release(S),h.release(L),h.release($),h.release(k)}for(let b=0,M=O.length;b!==M;b++)h.release(O[b])}}}planeConvex(t,e,s,n,i,o,r,l,a,d,p){const h=Fn,f=Rn;f.set(0,0,1),i.vmult(f,f);let u=0;const m=qn;for(let y=0;y!==e.vertices.length;y++)if(h.copy(e.vertices[y]),o.vmult(h,h),n.vadd(h,h),h.vsub(s,m),f.dot(m)<=0){if(p)return!0;const v=this.createContactEquation(r,l,t,e,a,d),x=_n;f.scale(f.dot(m),x),h.vsub(x,x),x.vsub(s,v.ri),v.ni.copy(f),h.vsub(n,v.rj),v.ri.vadd(s,v.ri),v.ri.vsub(r.position,v.ri),v.rj.vadd(n,v.rj),v.rj.vsub(l.position,v.rj),this.result.push(v),u++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(v,this.frictionResult)}this.enableFrictionReduction&&u&&this.createFrictionFromAverage(u)}boxConvex(t,e,s,n,i,o,r,l,a,d,p){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,p)}sphereHeightfield(t,e,s,n,i,o,r,l,a,d,p){const h=e.data,f=t.radius,u=e.elementSize,m=Kn,y=Xn;W.pointToLocalFrame(n,o,s,y);let w=Math.floor((y.x-f)/u)-1,v=Math.ceil((y.x+f)/u)+1,x=Math.floor((y.y-f)/u)-1,g=Math.ceil((y.y+f)/u)+1;if(v<0||g<0||w>h.length||x>h[0].length)return;w<0&&(w=0),v<0&&(v=0),x<0&&(x=0),g<0&&(g=0),w>=h.length&&(w=h.length-1),v>=h.length&&(v=h.length-1),g>=h[0].length&&(g=h[0].length-1),x>=h[0].length&&(x=h[0].length-1);const E=[];e.getRectMinMax(w,x,v,g,E);const z=E[0],T=E[1];if(y.z-f>T||y.z+f<z)return;const P=this.result;for(let _=w;_<v;_++)for(let I=x;I<g;I++){const R=P.length;let O=!1;if(e.getConvexTrianglePillar(_,I,!1),W.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(O=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,l,t,e,p)),p&&O||(e.getConvexTrianglePillar(_,I,!0),W.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(O=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,l,t,e,p)),p&&O))return!0;if(P.length-R>2)return}}boxHeightfield(t,e,s,n,i,o,r,l,a,d,p){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,p)}convexHeightfield(t,e,s,n,i,o,r,l,a,d,p){const h=e.data,f=e.elementSize,u=t.boundingSphereRadius,m=Un,y=$n,w=Yn;W.pointToLocalFrame(n,o,s,w);let v=Math.floor((w.x-u)/f)-1,x=Math.ceil((w.x+u)/f)+1,g=Math.floor((w.y-u)/f)-1,E=Math.ceil((w.y+u)/f)+1;if(x<0||E<0||v>h.length||g>h[0].length)return;v<0&&(v=0),x<0&&(x=0),g<0&&(g=0),E<0&&(E=0),v>=h.length&&(v=h.length-1),x>=h.length&&(x=h.length-1),E>=h[0].length&&(E=h[0].length-1),g>=h[0].length&&(g=h[0].length-1);const z=[];e.getRectMinMax(v,g,x,E,z);const T=z[0],P=z[1];if(!(w.z-u>P||w.z+u<T))for(let _=v;_<x;_++)for(let I=g;I<E;I++){let R=!1;if(e.getConvexTrianglePillar(_,I,!1),W.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(R=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,l,null,null,p,y,null)),p&&R||(e.getConvexTrianglePillar(_,I,!0),W.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(R=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,l,null,null,p,y,null)),p&&R))return!0}}sphereParticle(t,e,s,n,i,o,r,l,a,d,p){const h=Vn;if(h.set(0,0,1),n.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(p)return!0;const u=this.createContactEquation(l,r,e,t,a,d);h.normalize(),u.rj.copy(h),u.rj.scale(t.radius,u.rj),u.ni.copy(h),u.ni.negate(u.ni),u.ri.set(0,0,0),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,l,a,d,p){const h=kn;h.set(0,0,1),r.quaternion.vmult(h,h);const f=Wn;if(n.vsub(r.position,f),h.dot(f)<=0){if(p)return!0;const m=this.createContactEquation(l,r,e,t,a,d);m.ni.copy(h),m.ni.negate(m.ni),m.ri.set(0,0,0);const y=jn;h.scale(h.dot(n),y),n.vsub(y,y),m.rj.copy(y),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,l,a,d,p){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,p)}convexParticle(t,e,s,n,i,o,r,l,a,d,p){let h=-1;const f=Hn,u=Dn;let m=null;const y=Gn;if(y.copy(n),y.vsub(s,y),i.conjugate(Me),Me.vmult(y,y),t.pointIsInside(y)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,v=t.faces.length;w!==v;w++){const x=[t.worldVertices[t.faces[w][0]]],g=t.worldFaceNormals[w];n.vsub(x[0],Ae);const E=-g.dot(Ae);if(m===null||Math.abs(E)<Math.abs(m)){if(p)return!0;m=E,h=w,f.copy(g)}}if(h!==-1){const w=this.createContactEquation(l,r,e,t,a,d);f.scale(m,u),u.vadd(n,u),u.vsub(s,u),w.rj.copy(u),f.negate(w.ni),w.ri.set(0,0,0);const v=w.ri,x=w.rj;v.vadd(n,v),v.vsub(l.position,v),x.vadd(s,x),x.vsub(r.position,x),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,l,a,d,p){return this.convexHeightfield(e,t,n,s,o,i,l,r,a,d,p)}particleCylinder(t,e,s,n,i,o,r,l,a,d,p){return this.convexParticle(e,t,n,s,o,i,l,r,a,d,p)}sphereTrimesh(t,e,s,n,i,o,r,l,a,d,p){const h=Qs,f=tn,u=en,m=sn,y=nn,w=on,v=an,x=Js,g=Ks,E=hn;W.pointToLocalFrame(n,o,s,y);const z=t.radius;v.lowerBound.set(y.x-z,y.y-z,y.z-z),v.upperBound.set(y.x+z,y.y+z,y.z+z),e.getTrianglesInAABB(v,E);const T=Zs,P=t.radius*t.radius;for(let b=0;b<E.length;b++)for(let M=0;M<3;M++)if(e.getVertex(e.indices[E[b]*3+M],T),T.vsub(y,g),g.lengthSquared()<=P){if(x.copy(T),W.pointToWorldFrame(n,o,x,T),T.vsub(s,g),p)return!0;let S=this.createContactEquation(r,l,t,e,a,d);S.ni.copy(g),S.ni.normalize(),S.ri.copy(S.ni),S.ri.scale(t.radius,S.ri),S.ri.vadd(s,S.ri),S.ri.vsub(r.position,S.ri),S.rj.copy(T),S.rj.vsub(l.position,S.rj),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult)}for(let b=0;b<E.length;b++)for(let M=0;M<3;M++){e.getVertex(e.indices[E[b]*3+M],h),e.getVertex(e.indices[E[b]*3+(M+1)%3],f),f.vsub(h,u),y.vsub(f,w);const S=w.dot(u);y.vsub(h,w);let C=w.dot(u);if(C>0&&S<0&&(y.vsub(h,w),m.copy(u),m.normalize(),C=w.dot(m),m.scale(C,w),w.vadd(h,w),w.distanceTo(y)<t.radius)){if(p)return!0;const L=this.createContactEquation(r,l,t,e,a,d);w.vsub(y,L.ni),L.ni.normalize(),L.ni.scale(t.radius,L.ri),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),W.pointToWorldFrame(n,o,w,w),w.vsub(l.position,L.rj),W.vectorToWorldFrame(o,L.ni,L.ni),W.vectorToWorldFrame(o,L.ri,L.ri),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}}const _=rn,I=cn,R=ln,O=Xs;for(let b=0,M=E.length;b!==M;b++){e.getTriangleVertices(E[b],_,I,R),e.getNormal(E[b],O),y.vsub(_,w);let S=w.dot(O);if(O.scale(S,w),y.vsub(w,w),S=w.distanceTo(y),D.pointInTriangle(w,_,I,R)&&S<t.radius){if(p)return!0;let C=this.createContactEquation(r,l,t,e,a,d);w.vsub(y,C.ni),C.ni.normalize(),C.ni.scale(t.radius,C.ri),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),W.pointToWorldFrame(n,o,w,w),w.vsub(l.position,C.rj),W.vectorToWorldFrame(o,C.ni,C.ni),W.vectorToWorldFrame(o,C.ri,C.ri),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult)}}E.length=0}planeTrimesh(t,e,s,n,i,o,r,l,a,d,p){const h=new c,f=Ys;f.set(0,0,1),i.vmult(f,f);for(let u=0;u<e.vertices.length/3;u++){e.getVertex(u,h);const m=new c;m.copy(h),W.pointToWorldFrame(n,o,m,h);const y=Us;if(h.vsub(s,y),f.dot(y)<=0){if(p)return!0;const v=this.createContactEquation(r,l,t,e,a,d);v.ni.copy(f);const x=$s;f.scale(y.dot(f),x),h.vsub(x,x),v.ri.copy(x),v.ri.vsub(r.position,v.ri),v.rj.copy(h),v.rj.vsub(l.position,v.rj),this.result.push(v),this.createFrictionEquationsFromContact(v,this.frictionResult)}}}}const pt=new c,mt=new c,yt=new c,Vs=new c,Gs=new c,Hs=new H,Ds=new H,Ys=new c,Us=new c,$s=new c,Xs=new c,Ks=new c;new c;const Zs=new c,Js=new c,Qs=new c,tn=new c,en=new c,sn=new c,nn=new c,on=new c,rn=new c,cn=new c,ln=new c,an=new Z,hn=[],qt=new c,Se=new c,dn=new c,un=new c,pn=new c;function fn(B,t,e){let s=null;const n=B.length;for(let i=0;i!==n;i++){const o=B[i],r=dn;B[(i+1)%n].vsub(o,r);const l=un;r.cross(t,l);const a=pn;e.vsub(o,a);const d=l.dot(a);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const _t=new c,vn=new c,mn=new c,yn=new c,wn=[new c,new c,new c,new c,new c,new c],xn=new c,gn=new c,bn=new c,En=new c,Cn=new c,zn=new c,Sn=new c,Mn=new c,An=new c,Nn=new c,Tn=new c,Bn=new c,In=new c,Pn=new c;new c,new c;const Fn=new c,Rn=new c,qn=new c,_n=new c,Ln=new c,On=new c,kn=new c,Wn=new c,jn=new c,Vn=new c,Me=new H,Gn=new c;new c;const Hn=new c,Ae=new c,Dn=new c,Yn=new c,Un=new c,$n=[0],Xn=new c,Kn=new c;class Ne{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let l=0;l<i;l++){let a=!1;const d=s[l];for(;d>n[r];)r++;a=d===n[r],a||Te(t,d)}r=0;for(let l=0;l<o;l++){let a=!1;const d=n[l];for(;d>s[r];)r++;a=s[r]===d,a||Te(e,d)}}}function Te(B,t){B.push((t&4294901760)>>16,t&65535)}const $t=(B,t)=>B<t?`${B}-${t}`:`${t}-${B}`;class Zn{constructor(){this.data={keys:[]}}get(t,e){const s=$t(t,e);return this.data[s]}set(t,e,s){const n=$t(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=$t(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class Jn extends oe{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new c,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new c,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new is,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new qs,this.constraints=[],this.narrowphase=new js(this),this.collisionMatrix=new ie,this.collisionMatrixPrevious=new ie,this.bodyOverlapKeeper=new Ne,this.shapeOverlapKeeper=new Ne,this.contactmaterials=[],this.contactMaterialTable=new Zn,this.defaultMaterial=new zt("default"),this.defaultContactMaterial=new Ct(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Tt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=D.ALL,s.from=t,s.to=e,s.callback=n,Xt.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=D.ANY,s.from=t,s.to=e,s.result=n,Xt.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=D.CLOSEST,s.from=t,s.to=e,s.result=n,Xt.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof A&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=Y.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=Y.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(Y.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const l=this.bodies[r];l.previousPosition.lerp(l.position,o,l.interpolatedPosition),l.previousQuaternion.slerp(l.quaternion,o,l.interpolatedQuaternion),l.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=ni,n=ii,i=this.bodies.length,o=this.bodies,r=this.solver,l=this.gravity,a=this.doProfiling,d=this.profile,p=A.DYNAMIC;let h=-1/0;const f=this.constraints,u=si;l.length();const m=l.x,y=l.y,w=l.z;let v=0;for(a&&(h=Y.now()),v=0;v!==i;v++){const b=o[v];if(b.type===p){const M=b.force,S=b.mass;M.x+=S*m,M.y+=S*y,M.z+=S*w}}for(let b=0,M=this.subsystems.length;b!==M;b++)this.subsystems[b].update();a&&(h=Y.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),a&&(d.broadphase=Y.now()-h);let x=f.length;for(v=0;v!==x;v++){const b=f[v];if(!b.collideConnected)for(let M=s.length-1;M>=0;M-=1)(b.bodyA===s[M]&&b.bodyB===n[M]||b.bodyB===s[M]&&b.bodyA===n[M])&&(s.splice(M,1),n.splice(M,1))}this.collisionMatrixTick(),a&&(h=Y.now());const g=ei,E=e.length;for(v=0;v!==E;v++)g.push(e[v]);e.length=0;const z=this.frictionEquations.length;for(v=0;v!==z;v++)u.push(this.frictionEquations[v]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,g,this.frictionEquations,u),a&&(d.narrowphase=Y.now()-h),a&&(h=Y.now()),v=0;v<this.frictionEquations.length;v++)r.addEquation(this.frictionEquations[v]);const T=e.length;for(let b=0;b!==T;b++){const M=e[b],S=M.bi,C=M.bj,G=M.si,L=M.sj;let k;if(S.material&&C.material?k=this.getContactMaterial(S.material,C.material)||this.defaultContactMaterial:k=this.defaultContactMaterial,k.friction,S.material&&C.material&&(S.material.friction>=0&&C.material.friction>=0&&S.material.friction*C.material.friction,S.material.restitution>=0&&C.material.restitution>=0&&(M.restitution=S.material.restitution*C.material.restitution)),r.addEquation(M),S.allowSleep&&S.type===A.DYNAMIC&&S.sleepState===A.SLEEPING&&C.sleepState===A.AWAKE&&C.type!==A.STATIC){const K=C.velocity.lengthSquared()+C.angularVelocity.lengthSquared(),$=C.sleepSpeedLimit**2;K>=$*2&&(S.wakeUpAfterNarrowphase=!0)}if(C.allowSleep&&C.type===A.DYNAMIC&&C.sleepState===A.SLEEPING&&S.sleepState===A.AWAKE&&S.type!==A.STATIC){const K=S.velocity.lengthSquared()+S.angularVelocity.lengthSquared(),$=S.sleepSpeedLimit**2;K>=$*2&&(C.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(S,C,!0),this.collisionMatrixPrevious.get(S,C)||(St.body=C,St.contact=M,S.dispatchEvent(St),St.body=S,C.dispatchEvent(St)),this.bodyOverlapKeeper.set(S.id,C.id),this.shapeOverlapKeeper.set(G.id,L.id)}for(this.emitContactEvents(),a&&(d.makeContactConstraints=Y.now()-h,h=Y.now()),v=0;v!==i;v++){const b=o[v];b.wakeUpAfterNarrowphase&&(b.wakeUp(),b.wakeUpAfterNarrowphase=!1)}for(x=f.length,v=0;v!==x;v++){const b=f[v];b.update();for(let M=0,S=b.equations.length;M!==S;M++){const C=b.equations[M];r.addEquation(C)}}r.solve(t,this),a&&(d.solve=Y.now()-h),r.removeAllEquations();const P=Math.pow;for(v=0;v!==i;v++){const b=o[v];if(b.type&p){const M=P(1-b.linearDamping,t),S=b.velocity;S.scale(M,S);const C=b.angularVelocity;if(C){const G=P(1-b.angularDamping,t);C.scale(G,C)}}}this.dispatchEvent(ti),a&&(h=Y.now());const I=this.stepnumber%(this.quatNormalizeSkip+1)===0,R=this.quatNormalizeFast;for(v=0;v!==i;v++)o[v].integrate(t,I,R);this.clearForces(),this.broadphase.dirty=!0,a&&(d.integrate=Y.now()-h),this.stepnumber+=1,this.dispatchEvent(Qn);let O=!0;if(this.allowSleep)for(O=!1,v=0;v!==i;v++){const b=o[v];b.sleepTick(this.time),b.sleepState!==A.SLEEPING&&(O=!0)}this.hasActiveBodies=O}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(ct,lt),t){for(let i=0,o=ct.length;i<o;i+=2)Mt.bodyA=this.getBodyById(ct[i]),Mt.bodyB=this.getBodyById(ct[i+1]),this.dispatchEvent(Mt);Mt.bodyA=Mt.bodyB=null}if(e){for(let i=0,o=lt.length;i<o;i+=2)At.bodyA=this.getBodyById(lt[i]),At.bodyB=this.getBodyById(lt[i+1]),this.dispatchEvent(At);At.bodyA=At.bodyB=null}ct.length=lt.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(ct,lt),s){for(let i=0,o=ct.length;i<o;i+=2){const r=this.getShapeById(ct[i]),l=this.getShapeById(ct[i+1]);at.shapeA=r,at.shapeB=l,r&&(at.bodyA=r.body),l&&(at.bodyB=l.body),this.dispatchEvent(at)}at.bodyA=at.bodyB=at.shapeA=at.shapeB=null}if(n){for(let i=0,o=lt.length;i<o;i+=2){const r=this.getShapeById(lt[i]),l=this.getShapeById(lt[i+1]);ht.shapeA=r,ht.shapeB=l,r&&(ht.bodyA=r.body),l&&(ht.bodyB=l.body),this.dispatchEvent(ht)}ht.bodyA=ht.bodyB=ht.shapeA=ht.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new Z;const Xt=new D,Y=globalThis.performance||{};if(!Y.now){let B=Date.now();Y.timing&&Y.timing.navigationStart&&(B=Y.timing.navigationStart),Y.now=()=>Date.now()-B}new c;const Qn={type:"postStep"},ti={type:"preStep"},St={type:A.COLLIDE_EVENT_NAME,body:null,contact:null},ei=[],si=[],ni=[],ii=[],ct=[],lt=[],Mt={type:"beginContact",bodyA:null,bodyB:null},At={type:"endContact",bodyA:null,bodyB:null},at={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},ht={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};let V,ft;const Lt={COILER:1,ROPE:2,ROPE_SEGMENT:4,ANCHOR:8};let et=400,oi=.012,ri=.5,Be=.012,q=[],U,wt,xt,ci,ot,rt,Kt=0,Zt=1,Ot=0,Nt=!1,kt=!1;function li(){V=new Jn({gravity:new c(0,-9.81,0)}),ft=new zt("defaultMaterial"),V.defaultContactMaterial=new Ct(ft,ft,{friction:.5,restitution:.01,contactEquationStiffness:5e5,contactEquationRelaxation:5,frictionEquationStiffness:5e5,frictionEquationRelaxation:5}),V.defaultMaterial=ft,U=new A({mass:0}),U.position.set(.57,.225,.025),U.type=J.KINEMATIC,V.addBody(U),wt=new A({mass:0}),wt.position.set(-.6,.27,-.058),V.addBody(wt),xt=new A({mass:0}),xt.position.set(0,.3,.03),V.addBody(xt)}function ai(){try{if(console.log("Worker: Beginning rope reset"),Nt=!1,V&&V.constraints){const B=[...V.constraints];for(const t of B)try{V.removeConstraint(t)}catch(e){console.error("Error removing constraint:",e)}}if(q&&q.length){const B=[...q];for(const t of B)if(t&&V)try{V.removeBody(t)}catch(e){console.error("Error removing body:",e)}}return q.length=0,Kt=0,Zt=1,Ot=0,console.log("Worker: Rope reset complete - bodies:",q.length),!0}catch(B){return console.error("Error in resetRope:",B),!1}}function hi(B,t,e){try{const s=e||et;if(q.length>=s||q.length<11)return;const n=q.length-1,i=q[10],o=new A({mass:ri,shape:new Ps(oi/2),position:new c(i.position.x,i.position.y,i.position.z),material:ft,collisionFilterGroup:Lt.ROPE|Lt.ROPE_SEGMENT,collisionFilterMask:Lt.COILER|Lt.ROPE_SEGMENT});o.angularDamping=.95,o.linearDamping=.95,V.addBody(o);const r=[];V.constraints.forEach(m=>{(m.bodyA===q[10]&&m.bodyB===q[11]||m.bodyA===q[11]&&m.bodyB===q[10])&&(r.push(m),V.removeConstraint(m))});const l=q[11];Kt++,Kt%30===0&&(Zt*=-1);const a=B[t],d=(a.sideOffset1-a.sideOffset2)*.8;Ot+=Zt*(d/50)*.9;const p=d*.45;Ot=Math.max(Math.min(Ot,p),-p);const h=q.slice(11);q.length=11,q.push(o),q.push(...h);const f=new Rt(q[10],o,Be,1e5),u=new Rt(o,l,Be,1e5);f.collideConnected=!1,u.collideConnected=!1,f.maxForce=1e3,u.maxForce=1e3,V.addConstraint(f),V.addConstraint(u),n===q.length-2&&V.constraints.forEach(m=>{if(m instanceof Rt&&(m.bodyA===U||m.bodyB===U)){V.removeConstraint(m);const y=new Rt(U,q[q.length-1],0);V.addConstraint(y)}})}catch(s){console.error("Error in addRopeSegment:",s)}}function di(B,t){ot&&(V.removeBody(ot),ot=null),rt&&(V.removeBody(rt),rt=null);const e=B[t],s=e.radius,n=e.height,i=t==="100-10"?2:t==="100-99"?2.1:2.2,o=new Fs(s*i,s*i,n/10,16);return ot=new A({mass:0,type:J.KINEMATIC,shape:o,material:ft}),ot.position.set(.57,.225,e.sideOffset1),ot.quaternion.setFromEuler(Math.PI/2,0,0),V.addBody(ot),rt=new A({mass:0,type:J.KINEMATIC,shape:o,material:ft}),rt.position.set(.57,.225,e.sideOffset2),rt.quaternion.setFromEuler(Math.PI/2,0,0),V.addBody(rt),{side1:ot,side2:rt}}function ui(B,t,e){if(U){U.position.x=B,U.position.y=t,U.position.z=e,U.velocity.set(0,0,0),U.angularVelocity.set(0,0,0);const s=10;for(let n=Math.max(0,q.length-s);n<q.length;n++)q[n]&&(q[n].velocity.scale(.9),q[n].angularVelocity.scale(.9))}}function pi(B,t){const s=B*(t?t==="100-200"?1.1:1:1);ot&&ot.angularVelocity.set(0,0,s),rt&&rt.angularVelocity.set(0,0,s)}function Jt(){console.log("Converting rope bodies to static"),Nt=!0;for(let B=0;B<q.length;B++){const t=q[B];t.type=J.STATIC,t.mass=0,t.updateMassProperties(),t.velocity.set(0,0,0),t.angularVelocity.set(0,0,0),t.force.set(0,0,0),t.torque.set(0,0,0)}U&&(U.type=J.STATIC,U.updateMassProperties()),wt&&(wt.type=J.STATIC,wt.updateMassProperties()),xt&&(xt.type=J.STATIC,xt.updateMassProperties())}function fi(B,t,e){const s=e||et;q.length>=s&&q[0].type!==J.STATIC&&Jt();for(let i=0;i<t;i++)V.step(B/t);return q.map(i=>({x:i.position.x,y:i.position.y,z:i.position.z}))}self.onmessage=function(B){try{const{type:t,data:e,forceReset:s}=B.data,n=["resetRope","init","finalizeRope"];if(t==="resetRope"&&s===!0){console.log("Worker: Forced rope reset requested"),ai(),Nt=!1,kt=!1,self.postMessage({type:"ropeReset",success:!0});return}if(t==="createRope"?kt=!0:t==="resetRope"&&(kt=!1),t==="addSegment"&&kt&&!Nt&&(e&&e.maxSegments&&(et=e.maxSegments),console.log(`Worker adding segment for ${e.activeCoilerType}, current count: ${q.length}, max: ${et}`)),Nt&&!n.includes(t))return;switch(e&&e.maxSegments&&(et=e.maxSegments),t){case"init":li(),self.postMessage({type:"initialized"});break;case"createRope":console.log(`Worker: Creating rope for ${e.activeCoilerType}`),di(e.coilerConfig,e.activeCoilerType),self.postMessage({type:"coilerCreated"});break;case"addSegment":e.maxSegments&&(et=e.maxSegments),q.length<et&&hi(e.coilerConfig,e.activeCoilerType,et),q.length>=et&&q[0].type!==J.STATIC&&Jt();const i=q.map(l=>({x:l.position.x,y:l.position.y,z:l.position.z}));q.length>=et?self.postMessage({type:"segmentLimitReached",positions:i}):self.postMessage({type:"segmentAdded",positions:i});break;case"updateAnchor":ui(e.x,e.y,e.z);break;case"setRotation":pi(e.rotationSpeed,e.activeCoilerType);break;case"step":const o=fi(e.timeStep,e.subSteps,et);self.postMessage({type:"stepped",positions:o,count:q.length});break;case"finalizeRope":Jt();const r=q.map(l=>({x:l.position.x,y:l.position.y,z:l.position.z}));self.postMessage({type:"ropeFinalized",positions:r});break}}catch(t){console.error("Worker error:",t),self.postMessage({type:"error",error:t.message})}}})();
