(function(){"use strict";class ot{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new c);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new c);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new ot);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],a=s[2],l=s[3],d=s[4],p=s[5],h=s[6],f=s[7],u=s[8],v=n[0],m=n[1],w=n[2],y=n[3],g=n[4],x=n[5],C=n[6],S=n[7],P=n[8];return i[0]=o*v+r*y+a*C,i[1]=o*m+r*g+a*S,i[2]=o*w+r*x+a*P,i[3]=l*v+d*y+p*C,i[4]=l*m+d*g+p*S,i[5]=l*w+d*x+p*P,i[6]=h*v+f*y+u*C,i[7]=h*m+f*g+u*S,i[8]=h*w+f*x+u*P,e}scale(t,e){e===void 0&&(e=new ot);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new c);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let a=3;const l=a;let d;const p=4;let h;do{if(o=l-a,i[o+n*o]===0){for(r=o+1;r<l;r++)if(i[o+n*r]!==0){d=p;do h=p-d,i[h+n*o]+=i[h+n*r];while(--d);break}}if(i[o+n*o]!==0)for(r=o+1;r<l;r++){const f=i[o+n*r]/i[o+n*o];d=p;do h=p-d,i[h+n*r]=h<=o?0:i[h+n*r]-i[h+n*o]*f;while(--d)}}while(--a);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new ot);const e=3,s=6,n=ms;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const a=r;let l;const d=s;let p;do{if(i=a-r,n[i+s*i]===0){for(o=i+1;o<a;o++)if(n[i+s*o]!==0){l=d;do p=d-l,n[p+s*i]+=n[p+s*o];while(--l);break}}if(n[i+s*i]!==0)for(o=i+1;o<a;o++){const h=n[i+s*o]/n[i+s*i];l=d;do p=d-l,n[p+s*o]=p<=i?0:n[p+s*o]-n[p+s*i]*h;while(--l)}}while(--r);i=2;do{o=i-1;do{const h=n[i+s*o]/n[i+s*i];l=s;do p=s-l,n[p+s*o]=n[p+s*o]-n[p+s*i]*h;while(--l)}while(o--)}while(--i);i=2;do{const h=1/n[i+s*i];l=s;do p=s-l,n[p+s*i]=n[p+s*i]*h;while(--l)}while(i--);i=2;do{o=2;do{if(p=n[e+o+s*i],isNaN(p)||p===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,p)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,a=n+n,l=e*o,d=e*r,p=e*a,h=s*r,f=s*a,u=n*a,v=i*o,m=i*r,w=i*a,y=this.elements;return y[3*0+0]=1-(h+u),y[3*0+1]=d-w,y[3*0+2]=p+m,y[3*1+0]=d+w,y[3*1+1]=1-(l+u),y[3*1+2]=f-v,y[3*2+0]=p-m,y[3*2+1]=f+v,y[3*2+2]=1-(l+h),this}transpose(t){t===void 0&&(t=new ot);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const ms=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class c{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new c);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,a=this.z;return e.x=r*i-a*n,e.y=a*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new c(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new c(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new ot([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new c);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new c);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new c),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new c),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new c),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=vs,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=ws;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(Ae),Ae.almostEquals(t,e)}clone(){return new c(this.x,this.y,this.z)}}c.ZERO=new c(0,0,0),c.UNIT_X=new c(1,0,0),c.UNIT_Y=new c(0,1,0),c.UNIT_Z=new c(0,0,1);const vs=new c,ws=new c,Ae=new c;class nt{constructor(t){t===void 0&&(t={}),this.lowerBound=new c,this.upperBound=new c,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let a=1;a<t.length;a++){let l=t[a];r&&(r.vmult(l,Te),l=Te),l.x>o.x&&(o.x=l.x),l.x<i.x&&(i.x=l.x),l.y>o.y&&(o.y=l.y),l.y<i.y&&(i.y=l.y),l.z>o.z&&(o.z=l.z),l.z<i.z&&(i.z=l.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new nt().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,a=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,a){const l=this.lowerBound,d=this.upperBound;t.copy(l),e.set(d.x,l.y,l.z),s.set(d.x,d.y,l.z),n.set(l.x,d.y,d.z),i.set(d.x,l.y,d.z),o.set(l.x,d.y,l.z),r.set(l.x,l.y,d.z),a.copy(d)}toLocalFrame(t,e){const s=Fe,n=s[0],i=s[1],o=s[2],r=s[3],a=s[4],l=s[5],d=s[6],p=s[7];this.getCorners(n,i,o,r,a,l,d,p);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=Fe,n=s[0],i=s[1],o=s[2],r=s[3],a=s[4],l=s[5],d=s[6],p=s[7];this.getCorners(n,i,o,r,a,l,d,p);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,a=(this.upperBound.x-s.x)*n,l=(this.lowerBound.y-s.y)*i,d=(this.upperBound.y-s.y)*i,p=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,a),Math.min(l,d)),Math.min(p,h)),u=Math.min(Math.min(Math.max(r,a),Math.max(l,d)),Math.max(p,h));return!(u<0||f>u)}}const Te=new c,Fe=[new c,new c,new c,new c,new c,new c,new c,new c];class Pe{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class Ie{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class U{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new c),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=gs,n=xs;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new U);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,a=t.y,l=t.z,d=t.w;return e.x=s*d+o*r+n*l-i*a,e.y=n*d+o*a+i*r-s*l,e.z=i*d+o*l+s*a-n*r,e.w=o*d-s*r-n*a-i*l,e}inverse(t){t===void 0&&(t=new U);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new U),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new c);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,a=this.z,l=this.w,d=l*s+r*i-a*n,p=l*n+a*s-o*i,h=l*i+o*n-r*s,f=-o*s-r*n-a*i;return e.x=d*l+f*-o+p*-a-h*-r,e.y=p*l+f*-r+h*-o-d*-a,e.z=h*l+f*-a+d*-r-p*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,a=this.z,l=this.w;switch(e){case"YZX":const d=o*r+a*l;if(d>.499&&(s=2*Math.atan2(o,l),n=Math.PI/2,i=0),d<-.499&&(s=-2*Math.atan2(o,l),n=-Math.PI/2,i=0),s===void 0){const p=o*o,h=r*r,f=a*a;s=Math.atan2(2*r*l-2*o*a,1-2*h-2*f),n=Math.asin(2*d),i=Math.atan2(2*o*l-2*r*a,1-2*p-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),a=Math.sin(t/2),l=Math.sin(e/2),d=Math.sin(s/2);return n==="XYZ"?(this.x=a*o*r+i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r-a*l*d):n==="YXZ"?(this.x=a*o*r+i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r+a*l*d):n==="ZXY"?(this.x=a*o*r-i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r-a*l*d):n==="ZYX"?(this.x=a*o*r-i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r+a*l*d):n==="YZX"?(this.x=a*o*r+i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r-a*l*d):n==="XZY"&&(this.x=a*o*r-i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r+a*l*d),this}clone(){return new U(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new U);const n=this.x,i=this.y,o=this.z,r=this.w;let a=t.x,l=t.y,d=t.z,p=t.w,h,f,u,v,m;return f=n*a+i*l+o*d+r*p,f<0&&(f=-f,a=-a,l=-l,d=-d,p=-p),1-f>1e-6?(h=Math.acos(f),u=Math.sin(h),v=Math.sin((1-e)*h)/u,m=Math.sin(e*h)/u):(v=1-e,m=e),s.x=v*n+m*a,s.y=v*i+m*l,s.z=v*o+m*d,s.w=v*r+m*p,s}integrate(t,e,s,n){n===void 0&&(n=new U);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,a=this.x,l=this.y,d=this.z,p=this.w,h=e*.5;return n.x+=h*(i*p+o*d-r*l),n.y+=h*(o*p+r*a-i*d),n.z+=h*(r*p+i*l-o*a),n.w+=h*(-i*a-o*l-r*d),n}}const gs=new c,xs=new c,bs={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class F{constructor(t){t===void 0&&(t={}),this.id=F.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}F.idCounter=0,F.types=bs;class W{constructor(t){t===void 0&&(t={}),this.position=new c,this.quaternion=new U,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return W.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return W.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new c),s.vsub(t,n),e.conjugate(Ne),Ne.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new c),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new c),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new c),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const Ne=new U;class Tt extends F{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:F.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new c;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let a=0;a!==r;a++){const l=(a+1)%r;e[o[a]].vsub(e[o[l]],n),n.normalize();let d=!1;for(let p=0;p!==s.length;p++)if(s[p].almostEquals(n)||s[p].almostEquals(n)){d=!0;break}d||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new c;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];Tt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new c,o=new c;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,a,l){const d=new c;let p=-1,h=-Number.MAX_VALUE;for(let u=0;u<s.faces.length;u++){d.copy(s.faceNormals[u]),i.vmult(d,d);const v=d.dot(o);v>h&&(h=v,p=u)}const f=[];for(let u=0;u<s.faces[p].length;u++){const v=s.vertices[s.faces[p][u]],m=new c;m.copy(v),i.vmult(m,m),n.vadd(m,m),f.push(m)}p>=0&&this.clipFaceAgainstHull(o,t,e,f,r,a,l)}findSeparatingAxis(t,e,s,n,i,o,r,a){const l=new c,d=new c,p=new c,h=new c,f=new c,u=new c;let v=Number.MAX_VALUE;const m=this;if(m.uniqueAxes)for(let w=0;w!==m.uniqueAxes.length;w++){s.vmult(m.uniqueAxes[w],l);const y=m.testSepAxis(l,t,e,s,n,i);if(y===!1)return!1;y<v&&(v=y,o.copy(l))}else{const w=r?r.length:m.faces.length;for(let y=0;y<w;y++){const g=r?r[y]:y;l.copy(m.faceNormals[g]),s.vmult(l,l);const x=m.testSepAxis(l,t,e,s,n,i);if(x===!1)return!1;x<v&&(v=x,o.copy(l))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],d);const y=m.testSepAxis(d,t,e,s,n,i);if(y===!1)return!1;y<v&&(v=y,o.copy(d))}else{const w=a?a.length:t.faces.length;for(let y=0;y<w;y++){const g=a?a[y]:y;d.copy(t.faceNormals[g]),i.vmult(d,d);const x=m.testSepAxis(d,t,e,s,n,i);if(x===!1)return!1;x<v&&(v=x,o.copy(d))}}for(let w=0;w!==m.uniqueEdges.length;w++){s.vmult(m.uniqueEdges[w],h);for(let y=0;y!==t.uniqueEdges.length;y++)if(i.vmult(t.uniqueEdges[y],f),h.cross(f,u),!u.almostZero()){u.normalize();const g=m.testSepAxis(u,t,e,s,n,i);if(g===!1)return!1;g<v&&(v=g,o.copy(u))}}return n.vsub(e,p),p.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;Tt.project(r,t,s,n,ne),Tt.project(e,t,i,o,ie);const a=ne[0],l=ne[1],d=ie[0],p=ie[1];if(a<p||d<l)return!1;const h=a-p,f=d-l;return h<f?h:f}calculateLocalInertia(t,e){const s=new c,n=new c;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const a=new c,l=new c,d=new c,p=new c,h=new c,f=new c,u=new c,v=new c,m=this,w=[],y=n,g=w;let x=-1,C=Number.MAX_VALUE;for(let I=0;I<m.faces.length;I++){a.copy(m.faceNormals[I]),s.vmult(a,a);const q=a.dot(t);q<C&&(C=q,x=I)}if(x<0)return;const S=m.faces[x];S.connectedFaces=[];for(let I=0;I<m.faces.length;I++)for(let q=0;q<m.faces[I].length;q++)S.indexOf(m.faces[I][q])!==-1&&I!==x&&S.connectedFaces.indexOf(I)===-1&&S.connectedFaces.push(I);const P=S.length;for(let I=0;I<P;I++){const q=m.vertices[S[I]],O=m.vertices[S[(I+1)%P]];q.vsub(O,l),d.copy(l),s.vmult(d,d),e.vadd(d,d),p.copy(this.faceNormals[x]),s.vmult(p,p),e.vadd(p,p),d.cross(p,h),h.negate(h),f.copy(q),s.vmult(f,f),e.vadd(f,f);const E=S.connectedFaces[I];u.copy(this.faceNormals[E]);const T=this.getPlaneConstantOfFace(E);v.copy(u),s.vmult(v,v);const M=T-v.dot(e);for(this.clipFaceAgainstPlane(y,g,v,M);y.length;)y.shift();for(;g.length;)y.push(g.shift())}u.copy(this.faceNormals[x]);const R=this.getPlaneConstantOfFace(x);v.copy(u),s.vmult(v,v);const _=R-v.dot(e);for(let I=0;I<y.length;I++){let q=v.dot(y[I])+_;if(q<=i&&(console.log(`clamped: depth=${q} to minDist=${i}`),q=i),q<=o){const O=y[I];if(q<=1e-6){const E={point:O,normal:v,depth:q};r.push(E)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let a=t[t.length-1],l=t[0];i=s.dot(a)+n;for(let d=0;d<r;d++){if(l=t[d],o=s.dot(l)+n,i<0)if(o<0){const p=new c;p.copy(l),e.push(p)}else{const p=new c;a.lerp(l,i/(i-o),p),e.push(p)}else if(o<0){const p=new c;a.lerp(l,i/(i-o),p),e.push(p),e.push(l)}a=l,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new c);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new c);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,a,l,d,p,h=new c;for(let f=0;f<i.length;f++){h.copy(i[f]),e.vmult(h,h),t.vadd(h,h);const u=h;(o===void 0||u.x<o)&&(o=u.x),(l===void 0||u.x>l)&&(l=u.x),(r===void 0||u.y<r)&&(r=u.y),(d===void 0||u.y>d)&&(d=u.y),(a===void 0||u.z<a)&&(a=u.z),(p===void 0||u.z>p)&&(p=u.z)}s.set(o,r,a),n.set(l,d,p)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new c);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=new c;this.getAveragePointLocal(i);for(let o=0;o<this.faces.length;o++){let r=n[o];const a=e[s[o][0]],l=new c;t.vsub(a,l);const d=r.dot(l),p=new c;i.vsub(a,p);const h=r.dot(p);if(d<0&&h>0||d>0&&h<0)return!1}return-1}static project(t,e,s,n,i){const o=t.vertices.length,r=Es;let a=0,l=0;const d=Cs,p=t.vertices;d.setZero(),W.vectorToLocalFrame(s,n,e,r),W.pointToLocalFrame(s,n,d,d);const h=d.dot(r);l=a=p[0].dot(r);for(let f=1;f<o;f++){const u=p[f].dot(r);u>a&&(a=u),u<l&&(l=u)}if(l-=h,a-=h,l>a){const f=l;l=a,a=f}i[0]=a,i[1]=l}}const ne=[],ie=[];new c;const Es=new c,Cs=new c;class oe extends F{constructor(t){super({type:F.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=c,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],a=new Tt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new c),oe.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)xt.set(i[o][0],i[o][1],i[o][2]),e.vmult(xt,xt),t.vadd(xt,xt),s(xt.x,xt.y,xt.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;at[0].set(i.x,i.y,i.z),at[1].set(-i.x,i.y,i.z),at[2].set(-i.x,-i.y,i.z),at[3].set(-i.x,-i.y,-i.z),at[4].set(i.x,-i.y,-i.z),at[5].set(i.x,i.y,-i.z),at[6].set(-i.x,i.y,-i.z),at[7].set(i.x,-i.y,i.z);const o=at[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const a=at[r];e.vmult(a,a),t.vadd(a,a);const l=a.x,d=a.y,p=a.z;l>n.x&&(n.x=l),d>n.y&&(n.y=d),p>n.z&&(n.z=p),l<s.x&&(s.x=l),d<s.y&&(s.y=d),p<s.z&&(s.z=p)}}}const xt=new c,at=[new c,new c,new c,new c,new c,new c,new c,new c],G={DYNAMIC:1,STATIC:2,KINEMATIC:4},re={AWAKE:0,SLEEPY:1,SLEEPING:2};class A extends Ie{constructor(t){t===void 0&&(t={}),super(),this.id=A.idCounter++,this.index=-1,this.world=null,this.vlambda=new c,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new c,this.previousPosition=new c,this.interpolatedPosition=new c,this.initPosition=new c,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new c,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new c,this.force=new c;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?A.STATIC:A.DYNAMIC,typeof t.type==typeof A.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=A.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new c,this.quaternion=new U,this.initQuaternion=new U,this.previousQuaternion=new U,this.interpolatedQuaternion=new U,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new c,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new c,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new c,this.invInertia=new c,this.invInertiaWorld=new ot,this.invMassSolve=0,this.invInertiaSolve=new c,this.invInertiaWorldSolve=new ot,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new c(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new c(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new nt,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new c,this.isTrigger=!!t.isTrigger,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=A.AWAKE,this.wakeUpAfterNarrowphase=!1,t===A.SLEEPING&&this.dispatchEvent(A.wakeupEvent)}sleep(){this.sleepState=A.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===A.AWAKE&&s<n?(this.sleepState=A.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(A.sleepyEvent)):e===A.SLEEPY&&s>n?this.wakeUp():e===A.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(A.sleepEvent))}}updateSolveMassProperties(){this.sleepState===A.SLEEPING||this.type===A.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new c),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new c),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new c,i=new U;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),a=o.boundingSphereRadius;r+a>n&&(n=r+a)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=zs,o=Ss,r=this.quaternion,a=this.aabb,l=Ms;for(let d=0;d!==n;d++){const p=t[d];r.vmult(e[d],i),i.vadd(this.position,i),r.mult(s[d],o),p.calculateWorldAABB(i,o,l.lowerBound,l.upperBound),d===0?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=As,n=Ts;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new c),this.type!==A.DYNAMIC)return;this.sleepState===A.SLEEPING&&this.wakeUp();const s=Fs;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new c),this.type!==A.DYNAMIC)return;const s=Ps,n=Is;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===A.DYNAMIC&&(this.sleepState===A.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new c),this.type!==A.DYNAMIC)return;this.sleepState===A.SLEEPING&&this.wakeUp();const s=e,n=Ns;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=Rs;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new c),this.type!==A.DYNAMIC)return;const s=Bs,n=qs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=_s;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),oe.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new c;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===A.DYNAMIC||this.type===A.KINEMATIC)||this.sleepState===A.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,a=this.torque,l=this.quaternion,d=this.invMass,p=this.invInertiaWorld,h=this.linearFactor,f=d*t;n.x+=r.x*f*h.x,n.y+=r.y*f*h.y,n.z+=r.z*f*h.z;const u=p.elements,v=this.angularFactor,m=a.x*v.x,w=a.y*v.y,y=a.z*v.z;i.x+=t*(u[0]*m+u[1]*w+u[2]*y),i.y+=t*(u[3]*m+u[4]*w+u[5]*y),i.z+=t*(u[6]*m+u[7]*w+u[8]*y),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}A.idCounter=0,A.COLLIDE_EVENT_NAME="collide",A.DYNAMIC=G.DYNAMIC,A.STATIC=G.STATIC,A.KINEMATIC=G.KINEMATIC,A.AWAKE=re.AWAKE,A.SLEEPY=re.SLEEPY,A.SLEEPING=re.SLEEPING,A.wakeupEvent={type:"wakeup"},A.sleepyEvent={type:"sleepy"},A.sleepEvent={type:"sleep"};const zs=new c,Ss=new U,Ms=new nt,As=new ot,Ts=new ot;new ot;const Fs=new c,Ps=new c,Is=new c,Ns=new c,Rs=new c,Bs=new c,qs=new c,_s=new c;class Ls{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!((t.collisionFilterGroup&e.collisionFilterMask)===0||(e.collisionFilterGroup&t.collisionFilterMask)===0||((t.type&A.STATIC)!==0||t.sleepState===A.SLEEPING)&&((e.type&A.STATIC)!==0||e.sleepState===A.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=ks;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=Os,n=Vs,i=Ws,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const a=n[r].id,l=i[r].id,d=a<l?`${a},${l}`:`${l},${a}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const a=s.keys.pop(),l=s[a];t.push(n[l]),e.push(i[l]),delete s[a]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new c;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const ks=new c;new c,new U,new c;const Os={keys:[]},Vs=[],Ws=[];new c,new c,new c;class js extends Ls{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let a=0;a!==i;a++)for(let l=0;l!==a;l++)o=n[a],r=n[l],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class Ht{constructor(){this.rayFromWorld=new c,this.rayToWorld=new c,this.hitNormalWorld=new c,this.hitPointWorld=new c,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let Re,Be,qe,_e,Le,ke,Oe;const ce={CLOSEST:1,ANY:2,ALL:4};Re=F.types.SPHERE,Be=F.types.PLANE,qe=F.types.BOX,_e=F.types.CYLINDER,Le=F.types.CONVEXPOLYHEDRON,ke=F.types.HEIGHTFIELD,Oe=F.types.TRIMESH;class X{get[Re](){return this._intersectSphere}get[Be](){return this._intersectPlane}get[qe](){return this._intersectBox}get[_e](){return this._intersectConvex}get[Le](){return this._intersectConvex}get[ke](){return this._intersectHeightfield}get[Oe](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new c),e===void 0&&(e=new c),this.from=t.clone(),this.to=e.clone(),this.direction=new c,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=X.ANY,this.result=new Ht,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||X.ANY,this.result=e.result||new Ht,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Ve),ae.length=0,t.broadphase.aabbQuery(t,Ve,ae),this.intersectBodies(ae),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||(this.collisionFilterGroup&t.collisionFilterMask)===0||(t.collisionFilterGroup&this.collisionFilterMask)===0)return;const n=Ds,i=Gs;for(let o=0,r=t.shapes.length;o<r;o++){const a=t.shapes[o];if(!(s&&!a.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(a,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(on(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,a=this.direction,l=new c(0,0,1);e.vmult(l,l);const d=new c;o.vsub(s,d);const p=d.dot(l);r.vsub(s,d);const h=d.dot(l);if(p*h>0||o.distanceTo(r)<p)return;const f=l.dot(a);if(Math.abs(f)<this.precision)return;const u=new c,v=new c,m=new c;o.vsub(s,u);const w=-l.dot(u)/f;a.scale(w,v),o.vadd(v,m),this.reportIntersection(l,m,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=Hs;o.from.copy(this.from),o.to.copy(this.to),W.pointToLocalFrame(s,e,o.from,o.from),W.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=Ys;let a,l,d,p;a=l=0,d=p=t.data.length-1;const h=new nt;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),a=Math.max(a,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),p=Math.min(p,r[1]+1);for(let f=a;f<d;f++)for(let u=l;u<p;u++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,u,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,u,!1),W.pointToWorldFrame(s,e,t.pillarOffset,Yt),this._intersectConvex(t.pillarConvex,e,Yt,n,i,We),this.result.shouldStop)return;t.getConvexTrianglePillar(f,u,!0),W.pointToWorldFrame(s,e,t.pillarOffset,Yt),this._intersectConvex(t.pillarConvex,e,Yt,n,i,We)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,a=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),p=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-a**2,h=d**2-4*l*p,f=$s,u=Us;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,u),u.normalize(),this.reportIntersection(u,f,i,n,-1);else{const v=(-d-Math.sqrt(h))/(2*l),m=(-d+Math.sqrt(h))/(2*l);if(v>=0&&v<=1&&(o.lerp(r,v,f),f.vsub(s,u),u.normalize(),this.reportIntersection(u,f,i,n,-1)),this.result.shouldStop)return;m>=0&&m<=1&&(o.lerp(r,m,f),f.vsub(s,u),u.normalize(),this.reportIntersection(u,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=Xs,a=je,l=o&&o.faceList||null,d=t.faces,p=t.vertices,h=t.faceNormals,f=this.direction,u=this.from,v=this.to,m=u.distanceTo(v),w=l?l.length:d.length,y=this.result;for(let g=0;!y.shouldStop&&g<w;g++){const x=l?l[g]:g,C=d[x],S=h[x],P=e,R=s;a.copy(p[C[0]]),P.vmult(a,a),a.vadd(R,a),a.vsub(u,a),P.vmult(S,r);const _=f.dot(r);if(Math.abs(_)<this.precision)continue;const I=r.dot(a)/_;if(!(I<0)){f.scale(I,tt),tt.vadd(u,tt),rt.copy(p[C[0]]),P.vmult(rt,rt),R.vadd(rt,rt);for(let q=1;!y.shouldStop&&q<C.length-1;q++){lt.copy(p[C[q]]),ht.copy(p[C[q+1]]),P.vmult(lt,lt),P.vmult(ht,ht),R.vadd(lt,lt),R.vadd(ht,ht);const O=tt.distanceTo(u);!(X.pointInTriangle(tt,rt,lt,ht)||X.pointInTriangle(tt,lt,rt,ht))||O>m||this.reportIntersection(r,tt,i,n,x)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=Ks,a=sn,l=nn,d=je,p=Zs,h=Js,f=Qs,u=en,v=tn,m=t.indices;t.vertices;const w=this.from,y=this.to,g=this.direction;l.position.copy(s),l.quaternion.copy(e),W.vectorToLocalFrame(s,e,g,p),W.pointToLocalFrame(s,e,w,h),W.pointToLocalFrame(s,e,y,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,p),p.normalize();const x=h.distanceSquared(f);t.tree.rayQuery(this,l,a);for(let C=0,S=a.length;!this.result.shouldStop&&C!==S;C++){const P=a[C];t.getNormal(P,r),t.getVertex(m[P*3],rt),rt.vsub(h,d);const R=p.dot(r),_=r.dot(d)/R;if(_<0)continue;p.scale(_,tt),tt.vadd(h,tt),t.getVertex(m[P*3+1],lt),t.getVertex(m[P*3+2],ht);const I=tt.distanceSquared(h);!(X.pointInTriangle(tt,lt,rt,ht)||X.pointInTriangle(tt,rt,lt,ht))||I>x||(W.vectorToWorldFrame(e,r,v),W.pointToWorldFrame(s,e,tt,u),this.reportIntersection(v,u,i,n,P))}a.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,a=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case X.ALL:this.hasHit=!0,l.set(o,r,t,e,s,n,a),l.hasHit=!0,this.callback(l);break;case X.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,a));break;case X.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,a),l.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,Et),s.vsub(e,qt),t.vsub(e,le);const i=Et.dot(Et),o=Et.dot(qt),r=Et.dot(le),a=qt.dot(qt),l=qt.dot(le);let d,p;return(d=a*r-o*l)>=0&&(p=i*l-o*r)>=0&&d+p<i*a-o*o}}X.CLOSEST=ce.CLOSEST,X.ANY=ce.ANY,X.ALL=ce.ALL;const Ve=new nt,ae=[],qt=new c,le=new c,Ds=new c,Gs=new U,tt=new c,rt=new c,lt=new c,ht=new c;new c,new Ht;const We={faceList:[0]},Yt=new c,Hs=new X,Ys=[],$s=new c,Us=new c,Xs=new c;new c,new c;const je=new c,Ks=new c,Zs=new c,Js=new c,Qs=new c,tn=new c,en=new c;new nt;const sn=[],nn=new W,Et=new c,$t=new c;function on(b,t,e){e.vsub(b,Et);const s=Et.dot(t);return t.scale(s,$t),$t.vadd(b,$t),e.distanceTo($t)}class De{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Ut{constructor(t,e,s){s===void 0&&(s={}),s=De.defaults(s,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=Ut.idCounter++,this.collideConnected=s.collideConnected,s.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}Ut.idCounter=0;class Ge{constructor(){this.spatial=new c,this.rotational=new c}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class _t{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=_t.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Ge,this.jacobianElementB=new Ge,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,a=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,a=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,a=n.torque,l=s.invMassSolve,d=n.invMassSolve;return i.scale(l,He),r.scale(d,Ye),s.invInertiaWorldSolve.vmult(o,$e),n.invInertiaWorldSolve.vmult(a,Ue),t.multiplyVectors(He,$e)+e.multiplyVectors(Ye,Ue)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,a=n.invInertiaWorldSolve;let l=i+o;return r.vmult(t.rotational,Xt),l+=Xt.dot(t.rotational),a.vmult(e.rotational,Xt),l+=Xt.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=rn;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}_t.idCounter=0;const He=new c,Ye=new c,$e=new c,Ue=new c,Xt=new c,rn=new c;class Xe extends _t{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new c,this.rj=new c,this.ni=new c}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,a=cn,l=an,d=n.velocity,p=n.angularVelocity;n.force,n.torque;const h=i.velocity,f=i.angularVelocity;i.force,i.torque;const u=ln,v=this.jacobianElementA,m=this.jacobianElementB,w=this.ni;o.cross(w,a),r.cross(w,l),w.negate(v.spatial),a.negate(v.rotational),m.spatial.copy(w),m.rotational.copy(l),u.copy(i.position),u.vadd(r,u),u.vsub(n.position,u),u.vsub(o,u);const y=w.dot(u),g=this.restitution+1,x=g*h.dot(w)-g*d.dot(w)+f.dot(l)-p.dot(a),C=this.computeGiMf();return-y*e-x*s-t*C}getImpactVelocityAlongNormal(){const t=hn,e=dn,s=un,n=pn,i=fn;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const cn=new c,an=new c,ln=new c,hn=new c,dn=new c,un=new c,pn=new c,fn=new c;new c,new c,new c,new c,new c,new c;class Ct extends Ut{constructor(t,e,s,n){n===void 0&&(n=1e6),super(t,e),typeof s>"u"&&(s=t.position.distanceTo(e.position)),this.distance=s;const i=this.distanceEquation=new Xe(t,e);this.equations.push(i),i.minForce=-n,i.maxForce=n}update(){const t=this.bodyA,e=this.bodyB,s=this.distanceEquation,n=this.distance*.5,i=s.ni;e.position.vsub(t.position,i),i.normalize(),i.scale(n,s.ri),i.scale(-n,s.rj)}}new c,new c,new c,new c;class Ke extends _t{constructor(t,e,s){super(t,e,-s,s),this.ri=new c,this.rj=new c,this.t=new c}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=yn,o=mn,r=this.t;s.cross(r,i),n.cross(r,o);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),i.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(o);const d=this.computeGW(),p=this.computeGiMf();return-d*e-t*p}}const yn=new c,mn=new c;class Lt{constructor(t,e,s){s=De.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Lt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}Lt.idCounter=0;class kt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=kt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}kt.idCounter=0,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new X,new c,new c,new c,new c(1,0,0),new c(0,1,0),new c(0,0,1),new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c;class he extends F{constructor(t){if(super({type:F.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new c);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const a=o[r];s[a]=t[a]-i,n[a]=t[a]+i}}}new c,new c,new c,new c,new c,new c,new c,new c,new c;class Ze extends Tt{constructor(t,e,s,n){if(t===void 0&&(t=1),e===void 0&&(e=1),s===void 0&&(s=1),n===void 0&&(n=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const i=n,o=[],r=[],a=[],l=[],d=[],p=Math.cos,h=Math.sin;o.push(new c(-e*h(0),-s*.5,e*p(0))),l.push(0),o.push(new c(-t*h(0),s*.5,t*p(0))),d.push(1);for(let u=0;u<i;u++){const v=2*Math.PI/i*(u+1),m=2*Math.PI/i*(u+.5);u<i-1?(o.push(new c(-e*h(v),-s*.5,e*p(v))),l.push(2*u+2),o.push(new c(-t*h(v),s*.5,t*p(v))),d.push(2*u+3),a.push([2*u,2*u+1,2*u+3,2*u+2])):a.push([2*u,2*u+1,1,0]),(i%2===1||u<i/2)&&r.push(new c(-h(m),0,p(m)))}a.push(l),r.push(new c(0,1,0));const f=[];for(let u=0;u<d.length;u++)f.push(d[d.length-u-1]);a.push(f),super({vertices:o,faces:a,axes:r}),this.type=F.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=n}}new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new nt,new c,new nt,new c,new c,new c,new c,new c,new c,new c,new nt,new c,new W,new nt;class vn{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class wn extends vn{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,a=e.bodies,l=a.length,d=t;let p,h,f,u,v,m;if(r!==0)for(let x=0;x!==l;x++)a[x].updateSolveMassProperties();const w=xn,y=bn,g=gn;w.length=r,y.length=r,g.length=r;for(let x=0;x!==r;x++){const C=o[x];g[x]=0,y[x]=C.computeB(d),w[x]=1/C.computeC()}if(r!==0){for(let S=0;S!==l;S++){const P=a[S],R=P.vlambda,_=P.wlambda;R.set(0,0,0),_.set(0,0,0)}for(s=0;s!==n;s++){u=0;for(let S=0;S!==r;S++){const P=o[S];p=y[S],h=w[S],m=g[S],v=P.computeGWlambda(),f=h*(p-v-P.eps*m),m+f<P.minForce?f=P.minForce-m:m+f>P.maxForce&&(f=P.maxForce-m),g[S]+=f,u+=f>0?f:-f,P.addToWlambda(f)}if(u*u<i)break}for(let S=0;S!==l;S++){const P=a[S],R=P.velocity,_=P.angularVelocity;P.vlambda.vmul(P.linearFactor,P.vlambda),R.vadd(P.vlambda,R),P.wlambda.vmul(P.angularFactor,P.wlambda),_.vadd(P.wlambda,_)}let x=o.length;const C=1/d;for(;x--;)o[x].multiplier=g[x]*C}return s}}const gn=[],xn=[],bn=[];class En{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class Cn extends En{constructor(){super(...arguments),this.type=c}constructObject(){return new c}}const D={sphereSphere:F.types.SPHERE,spherePlane:F.types.SPHERE|F.types.PLANE,boxBox:F.types.BOX|F.types.BOX,sphereBox:F.types.SPHERE|F.types.BOX,planeBox:F.types.PLANE|F.types.BOX,convexConvex:F.types.CONVEXPOLYHEDRON,sphereConvex:F.types.SPHERE|F.types.CONVEXPOLYHEDRON,planeConvex:F.types.PLANE|F.types.CONVEXPOLYHEDRON,boxConvex:F.types.BOX|F.types.CONVEXPOLYHEDRON,sphereHeightfield:F.types.SPHERE|F.types.HEIGHTFIELD,boxHeightfield:F.types.BOX|F.types.HEIGHTFIELD,convexHeightfield:F.types.CONVEXPOLYHEDRON|F.types.HEIGHTFIELD,sphereParticle:F.types.PARTICLE|F.types.SPHERE,planeParticle:F.types.PLANE|F.types.PARTICLE,boxParticle:F.types.BOX|F.types.PARTICLE,convexParticle:F.types.PARTICLE|F.types.CONVEXPOLYHEDRON,cylinderCylinder:F.types.CYLINDER,sphereCylinder:F.types.SPHERE|F.types.CYLINDER,planeCylinder:F.types.PLANE|F.types.CYLINDER,boxCylinder:F.types.BOX|F.types.CYLINDER,convexCylinder:F.types.CONVEXPOLYHEDRON|F.types.CYLINDER,heightfieldCylinder:F.types.HEIGHTFIELD|F.types.CYLINDER,particleCylinder:F.types.PARTICLE|F.types.CYLINDER,sphereTrimesh:F.types.SPHERE|F.types.TRIMESH,planeTrimesh:F.types.PLANE|F.types.TRIMESH};class zn{get[D.sphereSphere](){return this.sphereSphere}get[D.spherePlane](){return this.spherePlane}get[D.boxBox](){return this.boxBox}get[D.sphereBox](){return this.sphereBox}get[D.planeBox](){return this.planeBox}get[D.convexConvex](){return this.convexConvex}get[D.sphereConvex](){return this.sphereConvex}get[D.planeConvex](){return this.planeConvex}get[D.boxConvex](){return this.boxConvex}get[D.sphereHeightfield](){return this.sphereHeightfield}get[D.boxHeightfield](){return this.boxHeightfield}get[D.convexHeightfield](){return this.convexHeightfield}get[D.sphereParticle](){return this.sphereParticle}get[D.planeParticle](){return this.planeParticle}get[D.boxParticle](){return this.boxParticle}get[D.convexParticle](){return this.convexParticle}get[D.cylinderCylinder](){return this.convexConvex}get[D.sphereCylinder](){return this.sphereConvex}get[D.planeCylinder](){return this.planeConvex}get[D.boxCylinder](){return this.boxConvex}get[D.convexCylinder](){return this.convexConvex}get[D.heightfieldCylinder](){return this.heightfieldCylinder}get[D.particleCylinder](){return this.particleCylinder}get[D.sphereTrimesh](){return this.sphereTrimesh}get[D.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Cn,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Xe(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,d=n.material||e.material;return l&&d&&l.restitution>=0&&d.restitution>=0&&(r.restitution=l.restitution*d.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const d=i.material||s.material,p=o.material||n.material;if(d&&p&&d.friction>=0&&p.friction>=0&&(l=d.friction*p.friction),l>0){const h=l*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const u=this.frictionEquationPool,v=u.length?u.pop():new Ke(s,n,h*f),m=u.length?u.pop():new Ke(s,n,h*f);return v.bi=m.bi=s,v.bj=m.bj=n,v.minForce=m.minForce=-h*f,v.maxForce=m.maxForce=h*f,v.ri.copy(t.ri),v.rj.copy(t.rj),m.ri.copy(t.ri),m.rj.copy(t.rj),t.ni.tangents(v.t,m.t),v.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),m.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),v.enabled=m.enabled=t.enabled,e.push(v,m),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];zt.setZero(),Ft.setZero(),Pt.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(zt.vadd(e.ni,zt),Ft.vadd(e.ri,Ft),Pt.vadd(e.rj,Pt)):(zt.vsub(e.ni,zt),Ft.vadd(e.rj,Ft),Pt.vadd(e.ri,Pt));const o=1/t;Ft.scale(o,s.ri),Pt.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),zt.normalize(),zt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const a=An,l=Tn,d=Sn,p=Mn;for(let h=0,f=t.length;h!==f;h++){const u=t[h],v=e[h];let m=null;u.material&&v.material&&(m=s.getContactMaterial(u.material,v.material)||null);const w=u.type&A.KINEMATIC&&v.type&A.STATIC||u.type&A.STATIC&&v.type&A.KINEMATIC||u.type&A.KINEMATIC&&v.type&A.KINEMATIC;for(let y=0;y<u.shapes.length;y++){u.quaternion.mult(u.shapeOrientations[y],a),u.quaternion.vmult(u.shapeOffsets[y],d),d.vadd(u.position,d);const g=u.shapes[y];for(let x=0;x<v.shapes.length;x++){v.quaternion.mult(v.shapeOrientations[x],l),v.quaternion.vmult(v.shapeOffsets[x],p),p.vadd(v.position,p);const C=v.shapes[x];if(!(g.collisionFilterMask&C.collisionFilterGroup&&C.collisionFilterMask&g.collisionFilterGroup)||d.distanceTo(p)>g.boundingSphereRadius+C.boundingSphereRadius)continue;let S=null;g.material&&C.material&&(S=s.getContactMaterial(g.material,C.material)||null),this.currentContactMaterial=S||m||s.defaultContactMaterial;const P=g.type|C.type,R=this[P];if(R){let _=!1;g.type<C.type?_=R.call(this,g,C,d,p,a,l,u,v,g,C,w):_=R.call(this,C,g,p,d,l,a,v,u,g,C,w),_&&w&&(s.shapeOverlapKeeper.set(g.id,C.id),s.bodyOverlapKeeper.set(u.id,v.id))}}}}}sphereSphere(t,e,s,n,i,o,r,a,l,d,p){if(p)return s.distanceSquared(n)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,a,t,e,l,d);n.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(n,h.rj),h.rj.vsub(a.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,a,l,d,p){const h=this.createContactEquation(r,a,t,e,l,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(n,Kt),h.ni.scale(h.ni.dot(Kt),Je),Kt.vsub(Je,h.rj),-Kt.dot(h.ni)<=t.radius){if(p)return!0;const f=h.ri,u=h.rj;f.vadd(s,f),f.vsub(r.position,f),u.vadd(n,u),u.vsub(a.position,u),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,a,l,d,p){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,a,t,e,p)}sphereBox(t,e,s,n,i,o,r,a,l,d,p){const h=this.v3pool,f=ti;s.vsub(n,Zt),e.getSideNormals(f,o);const u=t.radius;let v=!1;const m=si,w=ni,y=ii;let g=null,x=0,C=0,S=0,P=null;for(let z=0,Y=f.length;z!==Y&&v===!1;z++){const L=Zn;L.copy(f[z]);const V=L.length();L.normalize();const st=Zt.dot(L);if(st<V+u&&st>0){const Q=Jn,B=Qn;Q.copy(f[(z+1)%3]),B.copy(f[(z+2)%3]);const Bt=Q.length(),se=B.length();Q.normalize(),B.normalize();const Se=Zt.dot(Q),Me=Zt.dot(B);if(Se<Bt&&Se>-Bt&&Me<se&&Me>-se){const ys=Math.abs(st-V-u);if((P===null||ys<P)&&(P=ys,C=Se,S=Me,g=V,m.copy(L),w.copy(Q),y.copy(B),x++,p))return!0}}}if(x){v=!0;const z=this.createContactEquation(r,a,t,e,l,d);m.scale(-u,z.ri),z.ni.copy(m),z.ni.negate(z.ni),m.scale(g,m),w.scale(C,w),m.vadd(w,m),y.scale(S,y),m.vadd(y,z.rj),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.vadd(n,z.rj),z.rj.vsub(a.position,z.rj),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}let R=h.get();const _=ei;for(let z=0;z!==2&&!v;z++)for(let Y=0;Y!==2&&!v;Y++)for(let L=0;L!==2&&!v;L++)if(R.set(0,0,0),z?R.vadd(f[0],R):R.vsub(f[0],R),Y?R.vadd(f[1],R):R.vsub(f[1],R),L?R.vadd(f[2],R):R.vsub(f[2],R),n.vadd(R,_),_.vsub(s,_),_.lengthSquared()<u*u){if(p)return!0;v=!0;const V=this.createContactEquation(r,a,t,e,l,d);V.ri.copy(_),V.ri.normalize(),V.ni.copy(V.ri),V.ri.scale(u,V.ri),V.rj.copy(R),V.ri.vadd(s,V.ri),V.ri.vsub(r.position,V.ri),V.rj.vadd(n,V.rj),V.rj.vsub(a.position,V.rj),this.result.push(V),this.createFrictionEquationsFromContact(V,this.frictionResult)}h.release(R),R=null;const I=h.get(),q=h.get(),O=h.get(),E=h.get(),T=h.get(),M=f.length;for(let z=0;z!==M&&!v;z++)for(let Y=0;Y!==M&&!v;Y++)if(z%3!==Y%3){f[Y].cross(f[z],I),I.normalize(),f[z].vadd(f[Y],q),O.copy(s),O.vsub(q,O),O.vsub(n,O);const L=O.dot(I);I.scale(L,E);let V=0;for(;V===z%3||V===Y%3;)V++;T.copy(s),T.vsub(E,T),T.vsub(q,T),T.vsub(n,T);const st=Math.abs(L),Q=T.length();if(st<f[V].length()&&Q<u){if(p)return!0;v=!0;const B=this.createContactEquation(r,a,t,e,l,d);q.vadd(E,B.rj),B.rj.copy(B.rj),T.negate(B.ni),B.ni.normalize(),B.ri.copy(B.rj),B.ri.vadd(n,B.ri),B.ri.vsub(s,B.ri),B.ri.normalize(),B.ri.scale(u,B.ri),B.ri.vadd(s,B.ri),B.ri.vsub(r.position,B.ri),B.rj.vadd(n,B.rj),B.rj.vsub(a.position,B.rj),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult)}}h.release(I,q,O,E,T)}planeBox(t,e,s,n,i,o,r,a,l,d,p){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,a,t,e,p)}convexConvex(t,e,s,n,i,o,r,a,l,d,p,h,f){const u=gi;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,u,h,f)){const v=[],m=xi;t.clipAgainstHull(s,i,e,n,o,u,-100,100,v);let w=0;for(let y=0;y!==v.length;y++){if(p)return!0;const g=this.createContactEquation(r,a,t,e,l,d),x=g.ri,C=g.rj;u.negate(g.ni),v[y].normal.negate(m),m.scale(v[y].depth,m),v[y].point.vadd(m,x),C.copy(v[y].point),x.vsub(s,x),C.vsub(n,C),x.vadd(s,x),x.vsub(r.position,x),C.vadd(n,C),C.vsub(a.position,C),this.result.push(g),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(g,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,a,l,d,p){const h=this.v3pool;s.vsub(n,oi);const f=e.faceNormals,u=e.faces,v=e.vertices,m=t.radius;let w=!1;for(let y=0;y!==v.length;y++){const g=v[y],x=li;o.vmult(g,x),n.vadd(x,x);const C=ai;if(x.vsub(s,C),C.lengthSquared()<m*m){if(p)return!0;w=!0;const S=this.createContactEquation(r,a,t,e,l,d);S.ri.copy(C),S.ri.normalize(),S.ni.copy(S.ri),S.ri.scale(m,S.ri),x.vsub(n,S.rj),S.ri.vadd(s,S.ri),S.ri.vsub(r.position,S.ri),S.rj.vadd(n,S.rj),S.rj.vsub(a.position,S.rj),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult);return}}for(let y=0,g=u.length;y!==g&&w===!1;y++){const x=f[y],C=u[y],S=hi;o.vmult(x,S);const P=di;o.vmult(v[C[0]],P),P.vadd(n,P);const R=ui;S.scale(-m,R),s.vadd(R,R);const _=pi;R.vsub(P,_);const I=_.dot(S),q=fi;if(s.vsub(P,q),I<0&&q.dot(S)>0){const O=[];for(let E=0,T=C.length;E!==T;E++){const M=h.get();o.vmult(v[C[E]],M),n.vadd(M,M),O.push(M)}if(Kn(O,S,s)){if(p)return!0;w=!0;const E=this.createContactEquation(r,a,t,e,l,d);S.scale(-m,E.ri),S.negate(E.ni);const T=h.get();S.scale(-I,T);const M=h.get();S.scale(-m,M),s.vsub(n,E.rj),E.rj.vadd(M,E.rj),E.rj.vadd(T,E.rj),E.rj.vadd(n,E.rj),E.rj.vsub(a.position,E.rj),E.ri.vadd(s,E.ri),E.ri.vsub(r.position,E.ri),h.release(T),h.release(M),this.result.push(E),this.createFrictionEquationsFromContact(E,this.frictionResult);for(let z=0,Y=O.length;z!==Y;z++)h.release(O[z]);return}else for(let E=0;E!==C.length;E++){const T=h.get(),M=h.get();o.vmult(v[C[(E+1)%C.length]],T),o.vmult(v[C[(E+2)%C.length]],M),n.vadd(T,T),n.vadd(M,M);const z=ri;M.vsub(T,z);const Y=ci;z.unit(Y);const L=h.get(),V=h.get();s.vsub(T,V);const st=V.dot(Y);Y.scale(st,L),L.vadd(T,L);const Q=h.get();if(L.vsub(s,Q),st>0&&st*st<z.lengthSquared()&&Q.lengthSquared()<m*m){if(p)return!0;const B=this.createContactEquation(r,a,t,e,l,d);L.vsub(n,B.rj),L.vsub(s,B.ni),B.ni.normalize(),B.ni.scale(m,B.ri),B.rj.vadd(n,B.rj),B.rj.vsub(a.position,B.rj),B.ri.vadd(s,B.ri),B.ri.vsub(r.position,B.ri),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult);for(let Bt=0,se=O.length;Bt!==se;Bt++)h.release(O[Bt]);h.release(T),h.release(M),h.release(L),h.release(Q),h.release(V);return}h.release(T),h.release(M),h.release(L),h.release(Q),h.release(V)}for(let E=0,T=O.length;E!==T;E++)h.release(O[E])}}}planeConvex(t,e,s,n,i,o,r,a,l,d,p){const h=yi,f=mi;f.set(0,0,1),i.vmult(f,f);let u=0;const v=vi;for(let m=0;m!==e.vertices.length;m++)if(h.copy(e.vertices[m]),o.vmult(h,h),n.vadd(h,h),h.vsub(s,v),f.dot(v)<=0){if(p)return!0;const y=this.createContactEquation(r,a,t,e,l,d),g=wi;f.scale(f.dot(v),g),h.vsub(g,g),g.vsub(s,y.ri),y.ni.copy(f),h.vsub(n,y.rj),y.ri.vadd(s,y.ri),y.ri.vsub(r.position,y.ri),y.rj.vadd(n,y.rj),y.rj.vsub(a.position,y.rj),this.result.push(y),u++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(y,this.frictionResult)}this.enableFrictionReduction&&u&&this.createFrictionFromAverage(u)}boxConvex(t,e,s,n,i,o,r,a,l,d,p){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,p)}sphereHeightfield(t,e,s,n,i,o,r,a,l,d,p){const h=e.data,f=t.radius,u=e.elementSize,v=Ni,m=Ii;W.pointToLocalFrame(n,o,s,m);let w=Math.floor((m.x-f)/u)-1,y=Math.ceil((m.x+f)/u)+1,g=Math.floor((m.y-f)/u)-1,x=Math.ceil((m.y+f)/u)+1;if(y<0||x<0||w>h.length||g>h[0].length)return;w<0&&(w=0),y<0&&(y=0),g<0&&(g=0),x<0&&(x=0),w>=h.length&&(w=h.length-1),y>=h.length&&(y=h.length-1),x>=h[0].length&&(x=h[0].length-1),g>=h[0].length&&(g=h[0].length-1);const C=[];e.getRectMinMax(w,g,y,x,C);const S=C[0],P=C[1];if(m.z-f>P||m.z+f<S)return;const R=this.result;for(let _=w;_<y;_++)for(let I=g;I<x;I++){const q=R.length;let O=!1;if(e.getConvexTrianglePillar(_,I,!1),W.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(O=this.sphereConvex(t,e.pillarConvex,s,v,i,o,r,a,t,e,p)),p&&O||(e.getConvexTrianglePillar(_,I,!0),W.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(O=this.sphereConvex(t,e.pillarConvex,s,v,i,o,r,a,t,e,p)),p&&O))return!0;if(R.length-q>2)return}}boxHeightfield(t,e,s,n,i,o,r,a,l,d,p){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,p)}convexHeightfield(t,e,s,n,i,o,r,a,l,d,p){const h=e.data,f=e.elementSize,u=t.boundingSphereRadius,v=Fi,m=Pi,w=Ti;W.pointToLocalFrame(n,o,s,w);let y=Math.floor((w.x-u)/f)-1,g=Math.ceil((w.x+u)/f)+1,x=Math.floor((w.y-u)/f)-1,C=Math.ceil((w.y+u)/f)+1;if(g<0||C<0||y>h.length||x>h[0].length)return;y<0&&(y=0),g<0&&(g=0),x<0&&(x=0),C<0&&(C=0),y>=h.length&&(y=h.length-1),g>=h.length&&(g=h.length-1),C>=h[0].length&&(C=h[0].length-1),x>=h[0].length&&(x=h[0].length-1);const S=[];e.getRectMinMax(y,x,g,C,S);const P=S[0],R=S[1];if(!(w.z-u>R||w.z+u<P))for(let _=y;_<g;_++)for(let I=x;I<C;I++){let q=!1;if(e.getConvexTrianglePillar(_,I,!1),W.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(q=this.convexConvex(t,e.pillarConvex,s,v,i,o,r,a,null,null,p,m,null)),p&&q||(e.getConvexTrianglePillar(_,I,!0),W.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(q=this.convexConvex(t,e.pillarConvex,s,v,i,o,r,a,null,null,p,m,null)),p&&q))return!0}}sphereParticle(t,e,s,n,i,o,r,a,l,d,p){const h=zi;if(h.set(0,0,1),n.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(p)return!0;const u=this.createContactEquation(a,r,e,t,l,d);h.normalize(),u.rj.copy(h),u.rj.scale(t.radius,u.rj),u.ni.copy(h),u.ni.negate(u.ni),u.ri.set(0,0,0),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,a,l,d,p){const h=bi;h.set(0,0,1),r.quaternion.vmult(h,h);const f=Ei;if(n.vsub(r.position,f),h.dot(f)<=0){if(p)return!0;const v=this.createContactEquation(a,r,e,t,l,d);v.ni.copy(h),v.ni.negate(v.ni),v.ri.set(0,0,0);const m=Ci;h.scale(h.dot(n),m),n.vsub(m,m),v.rj.copy(m),this.result.push(v),this.createFrictionEquationsFromContact(v,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,a,l,d,p){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,p)}convexParticle(t,e,s,n,i,o,r,a,l,d,p){let h=-1;const f=Mi,u=Ai;let v=null;const m=Si;if(m.copy(n),m.vsub(s,m),i.conjugate(Qe),Qe.vmult(m,m),t.pointIsInside(m)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,y=t.faces.length;w!==y;w++){const g=[t.worldVertices[t.faces[w][0]]],x=t.worldFaceNormals[w];n.vsub(g[0],ts);const C=-x.dot(ts);if(v===null||Math.abs(C)<Math.abs(v)){if(p)return!0;v=C,h=w,f.copy(x)}}if(h!==-1){const w=this.createContactEquation(a,r,e,t,l,d);f.scale(v,u),u.vadd(n,u),u.vsub(s,u),w.rj.copy(u),f.negate(w.ni),w.ri.set(0,0,0);const y=w.ri,g=w.rj;y.vadd(n,y),y.vsub(a.position,y),g.vadd(s,g),g.vsub(r.position,g),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,a,l,d,p){return this.convexHeightfield(e,t,n,s,o,i,a,r,l,d,p)}particleCylinder(t,e,s,n,i,o,r,a,l,d,p){return this.convexParticle(e,t,n,s,o,i,a,r,l,d,p)}sphereTrimesh(t,e,s,n,i,o,r,a,l,d,p){const h=_n,f=Ln,u=kn,v=On,m=Vn,w=Wn,y=Hn,g=qn,x=Rn,C=Yn;W.pointToLocalFrame(n,o,s,m);const S=t.radius;y.lowerBound.set(m.x-S,m.y-S,m.z-S),y.upperBound.set(m.x+S,m.y+S,m.z+S),e.getTrianglesInAABB(y,C);const P=Bn,R=t.radius*t.radius;for(let E=0;E<C.length;E++)for(let T=0;T<3;T++)if(e.getVertex(e.indices[C[E]*3+T],P),P.vsub(m,x),x.lengthSquared()<=R){if(g.copy(P),W.pointToWorldFrame(n,o,g,P),P.vsub(s,x),p)return!0;let M=this.createContactEquation(r,a,t,e,l,d);M.ni.copy(x),M.ni.normalize(),M.ri.copy(M.ni),M.ri.scale(t.radius,M.ri),M.ri.vadd(s,M.ri),M.ri.vsub(r.position,M.ri),M.rj.copy(P),M.rj.vsub(a.position,M.rj),this.result.push(M),this.createFrictionEquationsFromContact(M,this.frictionResult)}for(let E=0;E<C.length;E++)for(let T=0;T<3;T++){e.getVertex(e.indices[C[E]*3+T],h),e.getVertex(e.indices[C[E]*3+(T+1)%3],f),f.vsub(h,u),m.vsub(f,w);const M=w.dot(u);m.vsub(h,w);let z=w.dot(u);if(z>0&&M<0&&(m.vsub(h,w),v.copy(u),v.normalize(),z=w.dot(v),v.scale(z,w),w.vadd(h,w),w.distanceTo(m)<t.radius)){if(p)return!0;const L=this.createContactEquation(r,a,t,e,l,d);w.vsub(m,L.ni),L.ni.normalize(),L.ni.scale(t.radius,L.ri),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),W.pointToWorldFrame(n,o,w,w),w.vsub(a.position,L.rj),W.vectorToWorldFrame(o,L.ni,L.ni),W.vectorToWorldFrame(o,L.ri,L.ri),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}}const _=jn,I=Dn,q=Gn,O=Nn;for(let E=0,T=C.length;E!==T;E++){e.getTriangleVertices(C[E],_,I,q),e.getNormal(C[E],O),m.vsub(_,w);let M=w.dot(O);if(O.scale(M,w),m.vsub(w,w),M=w.distanceTo(m),X.pointInTriangle(w,_,I,q)&&M<t.radius){if(p)return!0;let z=this.createContactEquation(r,a,t,e,l,d);w.vsub(m,z.ni),z.ni.normalize(),z.ni.scale(t.radius,z.ri),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),W.pointToWorldFrame(n,o,w,w),w.vsub(a.position,z.rj),W.vectorToWorldFrame(o,z.ni,z.ni),W.vectorToWorldFrame(o,z.ri,z.ri),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}}C.length=0}planeTrimesh(t,e,s,n,i,o,r,a,l,d,p){const h=new c,f=Fn;f.set(0,0,1),i.vmult(f,f);for(let u=0;u<e.vertices.length/3;u++){e.getVertex(u,h);const v=new c;v.copy(h),W.pointToWorldFrame(n,o,v,h);const m=Pn;if(h.vsub(s,m),f.dot(m)<=0){if(p)return!0;const y=this.createContactEquation(r,a,t,e,l,d);y.ni.copy(f);const g=In;f.scale(m.dot(f),g),h.vsub(g,g),y.ri.copy(g),y.ri.vsub(r.position,y.ri),y.rj.copy(h),y.rj.vsub(a.position,y.rj),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}}}}const zt=new c,Ft=new c,Pt=new c,Sn=new c,Mn=new c,An=new U,Tn=new U,Fn=new c,Pn=new c,In=new c,Nn=new c,Rn=new c;new c;const Bn=new c,qn=new c,_n=new c,Ln=new c,kn=new c,On=new c,Vn=new c,Wn=new c,jn=new c,Dn=new c,Gn=new c,Hn=new nt,Yn=[],Kt=new c,Je=new c,$n=new c,Un=new c,Xn=new c;function Kn(b,t,e){let s=null;const n=b.length;for(let i=0;i!==n;i++){const o=b[i],r=$n;b[(i+1)%n].vsub(o,r);const a=Un;r.cross(t,a);const l=Xn;e.vsub(o,l);const d=a.dot(l);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const Zt=new c,Zn=new c,Jn=new c,Qn=new c,ti=[new c,new c,new c,new c,new c,new c],ei=new c,si=new c,ni=new c,ii=new c,oi=new c,ri=new c,ci=new c,ai=new c,li=new c,hi=new c,di=new c,ui=new c,pi=new c,fi=new c;new c,new c;const yi=new c,mi=new c,vi=new c,wi=new c,gi=new c,xi=new c,bi=new c,Ei=new c,Ci=new c,zi=new c,Qe=new U,Si=new c;new c;const Mi=new c,ts=new c,Ai=new c,Ti=new c,Fi=new c,Pi=[0],Ii=new c,Ni=new c;class es{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let a=0;a<i;a++){let l=!1;const d=s[a];for(;d>n[r];)r++;l=d===n[r],l||ss(t,d)}r=0;for(let a=0;a<o;a++){let l=!1;const d=n[a];for(;d>s[r];)r++;l=s[r]===d,l||ss(e,d)}}}function ss(b,t){b.push((t&4294901760)>>16,t&65535)}const de=(b,t)=>b<t?`${b}-${t}`:`${t}-${b}`;class Ri{constructor(){this.data={keys:[]}}get(t,e){const s=de(t,e);return this.data[s]}set(t,e,s){const n=de(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=de(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class Bi extends Ie{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new c,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new c,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new js,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new wn,this.constraints=[],this.narrowphase=new zn(this),this.collisionMatrix=new Pe,this.collisionMatrixPrevious=new Pe,this.bodyOverlapKeeper=new es,this.shapeOverlapKeeper=new es,this.contactmaterials=[],this.contactMaterialTable=new Ri,this.defaultMaterial=new kt("default"),this.defaultContactMaterial=new Lt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Ht?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=X.ALL,s.from=t,s.to=e,s.callback=n,ue.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=X.ANY,s.from=t,s.to=e,s.result=n,ue.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=X.CLOSEST,s.from=t,s.to=e,s.result=n,ue.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof A&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=K.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=K.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(K.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const a=this.bodies[r];a.previousPosition.lerp(a.position,o,a.interpolatedPosition),a.previousQuaternion.slerp(a.quaternion,o,a.interpolatedQuaternion),a.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=Oi,n=Vi,i=this.bodies.length,o=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,d=this.profile,p=A.DYNAMIC;let h=-1/0;const f=this.constraints,u=ki;a.length();const v=a.x,m=a.y,w=a.z;let y=0;for(l&&(h=K.now()),y=0;y!==i;y++){const E=o[y];if(E.type===p){const T=E.force,M=E.mass;T.x+=M*v,T.y+=M*m,T.z+=M*w}}for(let E=0,T=this.subsystems.length;E!==T;E++)this.subsystems[E].update();l&&(h=K.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),l&&(d.broadphase=K.now()-h);let g=f.length;for(y=0;y!==g;y++){const E=f[y];if(!E.collideConnected)for(let T=s.length-1;T>=0;T-=1)(E.bodyA===s[T]&&E.bodyB===n[T]||E.bodyB===s[T]&&E.bodyA===n[T])&&(s.splice(T,1),n.splice(T,1))}this.collisionMatrixTick(),l&&(h=K.now());const x=Li,C=e.length;for(y=0;y!==C;y++)x.push(e[y]);e.length=0;const S=this.frictionEquations.length;for(y=0;y!==S;y++)u.push(this.frictionEquations[y]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,x,this.frictionEquations,u),l&&(d.narrowphase=K.now()-h),l&&(h=K.now()),y=0;y<this.frictionEquations.length;y++)r.addEquation(this.frictionEquations[y]);const P=e.length;for(let E=0;E!==P;E++){const T=e[E],M=T.bi,z=T.bj,Y=T.si,L=T.sj;let V;if(M.material&&z.material?V=this.getContactMaterial(M.material,z.material)||this.defaultContactMaterial:V=this.defaultContactMaterial,V.friction,M.material&&z.material&&(M.material.friction>=0&&z.material.friction>=0&&M.material.friction*z.material.friction,M.material.restitution>=0&&z.material.restitution>=0&&(T.restitution=M.material.restitution*z.material.restitution)),r.addEquation(T),M.allowSleep&&M.type===A.DYNAMIC&&M.sleepState===A.SLEEPING&&z.sleepState===A.AWAKE&&z.type!==A.STATIC){const st=z.velocity.lengthSquared()+z.angularVelocity.lengthSquared(),Q=z.sleepSpeedLimit**2;st>=Q*2&&(M.wakeUpAfterNarrowphase=!0)}if(z.allowSleep&&z.type===A.DYNAMIC&&z.sleepState===A.SLEEPING&&M.sleepState===A.AWAKE&&M.type!==A.STATIC){const st=M.velocity.lengthSquared()+M.angularVelocity.lengthSquared(),Q=M.sleepSpeedLimit**2;st>=Q*2&&(z.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(M,z,!0),this.collisionMatrixPrevious.get(M,z)||(Ot.body=z,Ot.contact=T,M.dispatchEvent(Ot),Ot.body=M,z.dispatchEvent(Ot)),this.bodyOverlapKeeper.set(M.id,z.id),this.shapeOverlapKeeper.set(Y.id,L.id)}for(this.emitContactEvents(),l&&(d.makeContactConstraints=K.now()-h,h=K.now()),y=0;y!==i;y++){const E=o[y];E.wakeUpAfterNarrowphase&&(E.wakeUp(),E.wakeUpAfterNarrowphase=!1)}for(g=f.length,y=0;y!==g;y++){const E=f[y];E.update();for(let T=0,M=E.equations.length;T!==M;T++){const z=E.equations[T];r.addEquation(z)}}r.solve(t,this),l&&(d.solve=K.now()-h),r.removeAllEquations();const R=Math.pow;for(y=0;y!==i;y++){const E=o[y];if(E.type&p){const T=R(1-E.linearDamping,t),M=E.velocity;M.scale(T,M);const z=E.angularVelocity;if(z){const Y=R(1-E.angularDamping,t);z.scale(Y,z)}}}this.dispatchEvent(_i),l&&(h=K.now());const I=this.stepnumber%(this.quatNormalizeSkip+1)===0,q=this.quatNormalizeFast;for(y=0;y!==i;y++)o[y].integrate(t,I,q);this.clearForces(),this.broadphase.dirty=!0,l&&(d.integrate=K.now()-h),this.stepnumber+=1,this.dispatchEvent(qi);let O=!0;if(this.allowSleep)for(O=!1,y=0;y!==i;y++){const E=o[y];E.sleepTick(this.time),E.sleepState!==A.SLEEPING&&(O=!0)}this.hasActiveBodies=O}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(ft,yt),t){for(let i=0,o=ft.length;i<o;i+=2)Vt.bodyA=this.getBodyById(ft[i]),Vt.bodyB=this.getBodyById(ft[i+1]),this.dispatchEvent(Vt);Vt.bodyA=Vt.bodyB=null}if(e){for(let i=0,o=yt.length;i<o;i+=2)Wt.bodyA=this.getBodyById(yt[i]),Wt.bodyB=this.getBodyById(yt[i+1]),this.dispatchEvent(Wt);Wt.bodyA=Wt.bodyB=null}ft.length=yt.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(ft,yt),s){for(let i=0,o=ft.length;i<o;i+=2){const r=this.getShapeById(ft[i]),a=this.getShapeById(ft[i+1]);mt.shapeA=r,mt.shapeB=a,r&&(mt.bodyA=r.body),a&&(mt.bodyB=a.body),this.dispatchEvent(mt)}mt.bodyA=mt.bodyB=mt.shapeA=mt.shapeB=null}if(n){for(let i=0,o=yt.length;i<o;i+=2){const r=this.getShapeById(yt[i]),a=this.getShapeById(yt[i+1]);vt.shapeA=r,vt.shapeB=a,r&&(vt.bodyA=r.body),a&&(vt.bodyB=a.body),this.dispatchEvent(vt)}vt.bodyA=vt.bodyB=vt.shapeA=vt.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new nt;const ue=new X,K=globalThis.performance||{};if(!K.now){let b=Date.now();K.timing&&K.timing.navigationStart&&(b=K.timing.navigationStart),K.now=()=>Date.now()-b}new c;const qi={type:"postStep"},_i={type:"preStep"},Ot={type:A.COLLIDE_EVENT_NAME,body:null,contact:null},Li=[],ki=[],Oi=[],Vi=[],ft=[],yt=[],Vt={type:"beginContact",bodyA:null,bodyB:null},Wt={type:"endContact",bodyA:null,bodyB:null},mt={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},vt={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};let j,wt;const dt={COILER:1,ROPE:2,ROPE_SEGMENT:4,ANCHOR:8};let Wi=0,ji=0,Di=0;const pe=1/60,ns=8,is=60,Jt=56,os=.012,fe=.15,ye=.006;let N=[],$,et,J,k,ut,pt;const St=13;let jt=0,me=1,bt=0,ct=!1,Qt=400,Dt=0,gt=new Set,It=0,Z=null,H="100-10";const Gi={"100-10":Math.PI/18.9,"100-99":Math.PI/15.498,"100-200":Math.PI/10.505},rs=40,te=.04;let Hi=!0,cs=new Map,Nt=0,it=0,ve=new Map,Yi=[],we=[],ge=200,xe=5e4;const be=.9,$i=.05,as=60;let Mt=0,At=!1;const ls=5,hs=10;let ds=0,Ee=!0,ee=!0;function Ui(){j=new Bi({gravity:new c(0,-9.81,0)}),wt=new kt("defaultMaterial"),j.defaultContactMaterial=new Lt(wt,wt,{friction:.8,restitution:.01,contactEquationStiffness:5e5,contactEquationRelaxation:5,frictionEquationStiffness:5e5*1.5,frictionEquationRelaxation:5}),j.defaultMaterial=wt,$=new A({mass:0}),$.position.set(.57,.225+.2,.025),$.type=G.KINEMATIC,j.addBody($),et=new A({mass:0}),et.position.set(-.6,.27,-.058),et.type=G.STATIC,j.addBody(et),J=new A({mass:0}),J.position.set(0,.3,.03),J.type=G.STATIC,j.addBody(J),gt=new Set}function Ce(){if(!k||!$)return;const b=Z==null?void 0:Z[H];if(!b)return;const t=b.radius;$.position.x=k.position.x,$.position.y=k.position.y+t+$i,$.position.z=k.position.z,console.log(`Positioned end anchor at top of coiler: (${$.position.x.toFixed(3)}, ${$.position.y.toFixed(3)}, ${$.position.z.toFixed(3)})`)}function Xi(){ze(),Ce();for(let s=0;s<Jt;s++){const n=new he(os/2);let i,o,r;if(s<=St){const l=s/St;i=et.position.x+l*(J.position.x-et.position.x),o=et.position.y+l*(J.position.y-et.position.y),r=et.position.z+l*(J.position.z-et.position.z),o+=Math.sin(l*Math.PI)*.05}else{const l=(s-St)/(Jt-St-1);i=J.position.x+l*($.position.x-J.position.x);const d=Math.sin(l*Math.PI)*.15;o=J.position.y+l*($.position.y-J.position.y)+d,r=J.position.z+l*($.position.z-J.position.z)}const a=new A({mass:fe,shape:n,position:new c(i,o,r),material:wt,collisionFilterGroup:dt.ROPE|dt.ROPE_SEGMENT,collisionFilterMask:dt.COILER|dt.ROPE_SEGMENT});a.type=G.DYNAMIC,a.angularDamping=.99,a.linearDamping=.99,j.addBody(a),N.push(a)}for(let s=0;s<Jt-1;s++){const n=new Ct(N[s],N[s+1],ye*be,xe);n.collideConnected=!1,n.maxForce=ge,j.addConstraint(n)}const b=new Ct(J,N[St],0);j.addConstraint(b);const t=new Ct(et,N[0],0);j.addConstraint(t);const e=new Ct($,N[Jt-1],0);j.addConstraint(e)}function Ki(){for(let b=0;b<N.length;b++){const t=N[b];if(!t||t.type===G.STATIC)continue;const e=t.velocity.length();e>ls&&t.velocity.scale(ls/e);const s=t.angularVelocity.length();s>hs&&t.angularVelocity.scale(hs/s)}}function ze(b=!1){var t;try{ct=!1,It=0,Nt=0,it=0,ve?ve.clear():ve=new Map,cs.clear();for(let e=((t=j==null?void 0:j.constraints)==null?void 0:t.length)-1;e>=0;e--)j.constraints[e]instanceof Ct&&j.removeConstraint(j.constraints[e]);for(let e=0;e<N.length;e++)j.removeBody(N[e]);N.length=0,jt=0,me=1,bt=0,Wi=0,ji=0,b&&(Di=0,Dt=0),Yi=[],gt.clear(),we=[],Gt()}catch(e){console.error("Error in resetRope:",e)}}function Zi(b,t,e,s,n){const i=pe,o=ns;Nt+=i,It++;let r=s;At&&(Mt--,Mt<=0?(At=!1,console.log("Delay complete - starting coiler rotation")):r=0);const a=r*i;it===void 0&&(it=0),it+=a;for(let d=0;d<o;d++)j.step(i/o),Ki();Ji(r),Qi(),us(a);const l=Gi[H]||Math.PI/12;return Math.abs(it-Dt)>=l&&ps(Z,H,e,it)&&(Dt=it,console.log(`Added segment for ${H} at angle: ${it.toFixed(3)} radians (${(it*180/Math.PI).toFixed(1)}°), increment: ${l.toFixed(4)}`)),{positions:Rt(),segmentCount:N.length,staticCount:gt.size,simulationTime:Nt,rotationAngle:it,delayActive:At,delayRemaining:Mt}}function Gt(b=as){Mt=b,At=!0,console.log(`Setting startup delay: ${b} frames`)}function Ji(b){if(!k||ct)return;const t=Z==null?void 0:Z[H];if(!t)return;const e=t.radius,s=k.position,n=Math.sign(b);for(let i=0;i<N.length;i++){const o=N[i];if(!o||o.type===G.STATIC)continue;const r=s.x-o.position.x,a=s.y-o.position.y,l=Math.sqrt(r*r+a*a),d=e*4;if(l>d)continue;const p=r/l,h=a/l,f=-h,u=p,v=e+.01,m=l-v,w=Math.min(1,Math.max(0,1-Math.abs(m)/d)),g=m*20*w;o.applyForce(new c(p*g,h*g,0),new c(0,0,0));const x=Math.abs(b)*10*w;o.applyForce(new c(f*x*n,u*x*n,0),new c(0,0,0)),Math.abs(m)<.1&&(o.velocity.scale(.75),o.angularVelocity.scale(.75))}}function Qi(){if(!k||ct)return;if(It<is){It%10===0&&console.log(`Waiting ${is-It} more frames before allowing static conversion`),to();return}const b=Z==null?void 0:Z[H];if(!b)return;const t=b.radius,e=k.position;It%60===0&&console.log(`Current static segments: ${gt.size}/${N.length}`);for(let s=0;s<N.length;s++){const n=N[s];if(!n||n.type===G.STATIC||s===0||s===St)continue;const i=n.position.x-e.x,o=n.position.y-e.y,r=Math.sqrt(i*i+o*o),a=Math.abs(r-t);if(a<te){we[s]||(we[s]={pos:{x:n.position.x,y:n.position.y,z:n.position.z}},console.log(`Segment ${s} near coiler, dist: ${a.toFixed(4)}`));const l=i/r,d=o/r,h=r-t;let f=2;a>te*.5&&(f=4);const u=h*rs*f*.8;n.applyForce(new c(l*u,d*u,0),new c(0,0,0)),n.velocity.scale(.7),n.angularVelocity.scale(.7),a<te*.25&&eo(s)}}}function to(){if(!k)return;const b=Z==null?void 0:Z[H];if(!b)return;const t=b.radius,e=k.position;for(let s=0;s<N.length;s++){const n=N[s];if(!n||n.type===G.STATIC||s===0||s===St)continue;const i=n.position.x-e.x,o=n.position.y-e.y,r=Math.sqrt(i*i+o*o);if(Math.abs(r-t)<te*1.5){const l=i/r,d=o/r,f=(r-t)*rs*.7;n.applyForce(new c(l*f,d*f,0),new c(0,0,0)),n.velocity.scale(.85),n.angularVelocity.scale(.85)}}}function eo(b){const t=N[b];if(!t||t.type===G.STATIC)return!1;try{const e=t.position.x-k.position.x,s=t.position.y-k.position.y,n=Math.atan2(s,e),i=Z==null?void 0:Z[H],o=(i==null?void 0:i.radius)||.18;return t.position.x=k.position.x+o*Math.cos(n),t.position.y=k.position.y+o*Math.sin(n),t.type=G.STATIC,t.mass=0,t.updateMassProperties(),t.velocity.set(0,0,0),t.angularVelocity.set(0,0,0),t.force.set(0,0,0),t.torque.set(0,0,0),t.userData={coilerAttachment:{angle:n,radius:o,z:t.position.z-k.position.z}},gt.add(b),Hi&&console.log(`Segment ${b} static at (${t.position.x.toFixed(3)}, ${t.position.y.toFixed(3)}), exactly on coiler surface`),!0}catch(e){return console.error(`Error making segment ${b} static:`,e),!1}}function us(b){var e;if(!k||b===0)return;const t=b*.95;for(let s=0;s<N.length;s++){const n=N[s];if(!n||n.type!==G.STATIC||!((e=n.userData)!=null&&e.coilerAttachment))continue;const i=n.userData.coilerAttachment;i.angle+=t,n.position.x=k.position.x+i.radius*Math.cos(i.angle),n.position.y=k.position.y+i.radius*Math.sin(i.angle),n.position.z=k.position.z+i.z}}function ps(b,t,e,s){const n=e||(t==="100-200"?300:400);if(N.length>=n||N.length<22)return!1;try{const i=N[20],o=N[21];if(!i||!o)return!1;const r=new A({mass:fe,shape:new he(os/2),position:new c(i.position.x,i.position.y,i.position.z),material:wt,collisionFilterGroup:dt.ROPE|dt.ROPE_SEGMENT,collisionFilterMask:dt.COILER|dt.ROPE_SEGMENT});r.type=G.DYNAMIC;const a=jt;if(cs.set(r.id,a),r.userData={creationAngle:s,creationTime:Nt||0,creationIndex:a},jt++,k){const f=k.position.x-i.position.x,u=k.position.y-i.position.y,m=Math.sqrt(f*f+u*u)>.5?1.2:.8;r.velocity.set(f*m,u*m,0)}r.linearDamping=.95,r.angularDamping=.95,j.addBody(r),j.constraints.forEach(f=>{(f.bodyA===i&&f.bodyB===o||f.bodyA===o&&f.bodyB===i)&&j.removeConstraint(f)}),jt%30===0&&(me*=-1),bt||(bt=0);const l=b[t];if(l){const f=(l.sideOffset1-l.sideOffset2)*.8,u=Math.sin(s*.5)*.3;bt+=me*(f/50)*.9,bt+=u*.01;const v=f*.45;bt=Math.max(Math.min(bt,v),-v),r.position.z+=bt*.3}const d=N.slice(21);N.length=21,N.push(r),N.push(...d);const p=new Ct(i,r,ye*be,xe),h=new Ct(r,N[22],ye*be,xe);return p.collideConnected=!1,h.collideConnected=!1,p.maxForce=ge,h.maxForce=ge,j.addConstraint(p),j.addConstraint(h),console.log(`Created segment with index ${jt}`),!0}catch(i){return console.error("Error adding segment:",i),!1}}function fs(){ct=!0,console.log("Finalizing rope - making ALL segments static");for(let b=0;b<N.length;b++){const t=N[b];if(t){if(t.type=G.STATIC,t.mass=0,t.updateMassProperties(),t.velocity.set(0,0,0),t.angularVelocity.set(0,0,0),t.force.set(0,0,0),t.torque.set(0,0,0),k){const e=t.position.x-k.position.x,s=t.position.y-k.position.y,n=Math.sqrt(e*e+s*s);if(n<k.shapes[0].radius*2){const i=Math.atan2(s,e);t.userData={coilerAttachment:{angle:i,radius:n,z:t.position.z-k.position.z}}}}gt.add(b)}}$&&($.type=G.STATIC,$.updateMassProperties()),et&&(et.type=G.STATIC,et.updateMassProperties()),J&&(J.type=G.STATIC,J.updateMassProperties()),console.log(`Finalized rope with ${gt.size} static segments out of ${N.length} total`)}function so(b,t,e){if(!$)return;$.position.set(b,t,e),$.velocity.set(0,0,0),$.angularVelocity.set(0,0,0);const s=Math.min(10,N.length);for(let n=N.length-s;n<N.length;n++)N[n]&&(N[n].velocity.scale(.9),N[n].angularVelocity.scale(.9))}function no(b){k&&(k.angularVelocity.set(0,0,b),ut&&ut.angularVelocity.set(0,0,b),pt&&pt.angularVelocity.set(0,0,b))}function io(b,t){const e=t&&H!==t;Z=b,H=t||H,e&&(it=0,Dt=0,console.log(`Coiler type changed to ${H}, reset angle tracking`),Gt());const s=b[H];if(!s)return console.error("Invalid coiler type:",H),null;const n=s.radius,i=s.height;k&&j.removeBody(k),k=new A({mass:0,type:G.KINEMATIC,material:wt,collisionFilterGroup:dt.COILER,collisionFilterMask:dt.ROPE});const o=new Ze(n,n,i,16);k.addShape(o,new c(0,0,0),new U().setFromAxisAngle(new c(1,0,0),Math.PI/2));const r=n*.03,a=6;for(let l=0;l<32;l++){const d=l/32*Math.PI*2*a,p=l/32*i-i/2,h=n*.97*Math.cos(d),f=n*.97*Math.sin(d),u=new he(r);k.addShape(u,new c(h,f,p))}return k.position.set(.57,.225,s.zOffset),j.addBody(k),Ce(),k}function oo(b,t){ut&&(j.removeBody(ut),ut=null),pt&&(j.removeBody(pt),pt=null);const e=b[H];if(!e)return null;const s=e.radius,n=e.height,i=H==="100-10"?2:H==="100-99"?2.1:2.2,o=new Ze(s*i,s*i,n/10,16);return ut=new A({mass:0,type:G.KINEMATIC,shape:o,material:wt}),ut.position.set(.57,.225,e.sideOffset1),ut.quaternion.setFromEuler(Math.PI/2,0,0),j.addBody(ut),pt=new A({mass:0,type:G.KINEMATIC,shape:o,material:wt}),pt.position.set(.57,.225,e.sideOffset2),pt.quaternion.setFromEuler(Math.PI/2,0,0),j.addBody(pt),{side1:ut,side2:pt}}function Rt(){return N.map(b=>!b||!b.position?null:{x:b.position.x,y:b.position.y,z:b.position.z}).filter(b=>b!==null)}self.onmessage=function(b){try{const{type:t,data:e}=b.data;switch(t){case"init":Ui(),Ee=!0,ee=!0,ct=!1,Gt(),self.postMessage({type:"initialized",delayActive:At,delayRemaining:Mt}),setTimeout(()=>{Ee=!1,console.log("Worker initialization complete - rope is ready for normal operation")},500);break;case"resetRope":Nt=0,it=0,Dt=0,ct=!1,ee=!0,ze(e==null?void 0:e.resetAngle),self.postMessage({type:"ropeReset"});break;case"createCoiler":Z=e.coilerConfig;const s=H!==e.activeCoilerType;H=e.activeCoilerType,Qt=H==="100-200"?300:400,s&&(console.log(`Coiler type changed from ${H} to ${e.activeCoilerType}, resetting rope`),ze(!0),ct=!1),io(e.coilerConfig,e.activeCoilerType),oo(e.coilerConfig,e.activeCoilerType),Ce(),self.postMessage({type:"coilerCreated",coilerType:H,maxSegments:Qt});break;case"createRope":Xi(),ct=!1,Gt();for(let r=0;r<N.length;r++)N[r]&&(N[r].type=G.DYNAMIC,N[r].mass===0&&(N[r].mass=fe,N[r].updateMassProperties()));gt.clear();const n=Rt();console.log("Rope created with "+N.length+" dynamic segments"),self.postMessage({type:"ropeCreated",positions:n,delayActive:At,delayRemaining:Mt}),ee=!1;break;case"step":if(!Ee&&!ee&&e.rotationSpeed===0&&ds!==0&&!ct&&(console.log("Detected coiler stopped rotating - immediately finalizing rope"),fs(),self.postMessage({type:"ropeFinalized",positions:Rt()})),ds=e.rotationSpeed,ct){e.rotationSpeed!==0&&us(e.rotationSpeed*pe),self.postMessage({type:"stepped",positions:Rt(),count:N.length,staticCount:gt.size,simulationTime:Nt,delayActive:!1,ropeFinalized:!0});break}const i=Zi(pe,ns,Qt,e.rotationSpeed,e.rotationAngle);self.postMessage({type:"stepped",positions:i.positions,count:i.segmentCount,staticCount:i.staticCount,simulationTime:i.simulationTime,rotationAngle:i.rotationAngle,delayActive:i.delayActive,delayRemaining:i.delayRemaining,ropeFinalized:ct});break;case"updateAnchor":so(e.x,e.y,e.z);break;case"setRotation":no(e.rotationSpeed);break;case"finalizeRope":fs(),self.postMessage({type:"ropeFinalized",positions:Rt()});break;case"setDelay":Gt(e.frames||as),self.postMessage({type:"delaySet",delayActive:At,delayRemaining:Mt});break;case"addSegment":ps(e.coilerConfig||Z,e.activeCoilerType||H,e.maxSegments||Qt,e.rotationAngle||it)&&self.postMessage({type:"segmentAdded",positions:Rt(),count:N.length});break;default:console.warn(`Unknown message type: ${t}`);break}}catch(t){console.error("Worker error:",t),self.postMessage({type:"error",error:t.toString()})}}})();
