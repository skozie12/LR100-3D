(function(){"use strict";class ot{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new c);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new c);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new ot);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],a=s[2],l=s[3],d=s[4],p=s[5],h=s[6],f=s[7],u=s[8],m=n[0],v=n[1],w=n[2],y=n[3],x=n[4],g=n[5],E=n[6],M=n[7],I=n[8];return i[0]=o*m+r*y+a*E,i[1]=o*v+r*x+a*M,i[2]=o*w+r*g+a*I,i[3]=l*m+d*y+p*E,i[4]=l*v+d*x+p*M,i[5]=l*w+d*g+p*I,i[6]=h*m+f*y+u*E,i[7]=h*v+f*x+u*M,i[8]=h*w+f*g+u*I,e}scale(t,e){e===void 0&&(e=new ot);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new c);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let a=3;const l=a;let d;const p=4;let h;do{if(o=l-a,i[o+n*o]===0){for(r=o+1;r<l;r++)if(i[o+n*r]!==0){d=p;do h=p-d,i[h+n*o]+=i[h+n*r];while(--d);break}}if(i[o+n*o]!==0)for(r=o+1;r<l;r++){const f=i[o+n*r]/i[o+n*o];d=p;do h=p-d,i[h+n*r]=h<=o?0:i[h+n*r]-i[h+n*o]*f;while(--d)}}while(--a);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new ot);const e=3,s=6,n=ss;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const a=r;let l;const d=s;let p;do{if(i=a-r,n[i+s*i]===0){for(o=i+1;o<a;o++)if(n[i+s*o]!==0){l=d;do p=d-l,n[p+s*i]+=n[p+s*o];while(--l);break}}if(n[i+s*i]!==0)for(o=i+1;o<a;o++){const h=n[i+s*o]/n[i+s*i];l=d;do p=d-l,n[p+s*o]=p<=i?0:n[p+s*o]-n[p+s*i]*h;while(--l)}}while(--r);i=2;do{o=i-1;do{const h=n[i+s*o]/n[i+s*i];l=s;do p=s-l,n[p+s*o]=n[p+s*o]-n[p+s*i]*h;while(--l)}while(o--)}while(--i);i=2;do{const h=1/n[i+s*i];l=s;do p=s-l,n[p+s*i]=n[p+s*i]*h;while(--l)}while(i--);i=2;do{o=2;do{if(p=n[e+o+s*i],isNaN(p)||p===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,p)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,a=n+n,l=e*o,d=e*r,p=e*a,h=s*r,f=s*a,u=n*a,m=i*o,v=i*r,w=i*a,y=this.elements;return y[3*0+0]=1-(h+u),y[3*0+1]=d-w,y[3*0+2]=p+v,y[3*1+0]=d+w,y[3*1+1]=1-(l+u),y[3*1+2]=f-m,y[3*2+0]=p-v,y[3*2+1]=f+m,y[3*2+2]=1-(l+h),this}transpose(t){t===void 0&&(t=new ot);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const ss=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class c{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new c);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,a=this.z;return e.x=r*i-a*n,e.y=a*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new c(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new c(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new ot([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new c);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new c);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new c),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new c),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new c),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=ns,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=is;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(xe),xe.almostEquals(t,e)}clone(){return new c(this.x,this.y,this.z)}}c.ZERO=new c(0,0,0),c.UNIT_X=new c(1,0,0),c.UNIT_Y=new c(0,1,0),c.UNIT_Z=new c(0,0,1);const ns=new c,is=new c,xe=new c;class nt{constructor(t){t===void 0&&(t={}),this.lowerBound=new c,this.upperBound=new c,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let a=1;a<t.length;a++){let l=t[a];r&&(r.vmult(l,ge),l=ge),l.x>o.x&&(o.x=l.x),l.x<i.x&&(i.x=l.x),l.y>o.y&&(o.y=l.y),l.y<i.y&&(i.y=l.y),l.z>o.z&&(o.z=l.z),l.z<i.z&&(i.z=l.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new nt().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,a=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,a){const l=this.lowerBound,d=this.upperBound;t.copy(l),e.set(d.x,l.y,l.z),s.set(d.x,d.y,l.z),n.set(l.x,d.y,d.z),i.set(d.x,l.y,d.z),o.set(l.x,d.y,l.z),r.set(l.x,l.y,d.z),a.copy(d)}toLocalFrame(t,e){const s=be,n=s[0],i=s[1],o=s[2],r=s[3],a=s[4],l=s[5],d=s[6],p=s[7];this.getCorners(n,i,o,r,a,l,d,p);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=be,n=s[0],i=s[1],o=s[2],r=s[3],a=s[4],l=s[5],d=s[6],p=s[7];this.getCorners(n,i,o,r,a,l,d,p);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,a=(this.upperBound.x-s.x)*n,l=(this.lowerBound.y-s.y)*i,d=(this.upperBound.y-s.y)*i,p=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,a),Math.min(l,d)),Math.min(p,h)),u=Math.min(Math.min(Math.max(r,a),Math.max(l,d)),Math.max(p,h));return!(u<0||f>u)}}const ge=new c,be=[new c,new c,new c,new c,new c,new c,new c,new c];class Ee{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class Ce{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class Y{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new c),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=os,n=rs;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new Y);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,a=t.y,l=t.z,d=t.w;return e.x=s*d+o*r+n*l-i*a,e.y=n*d+o*a+i*r-s*l,e.z=i*d+o*l+s*a-n*r,e.w=o*d-s*r-n*a-i*l,e}inverse(t){t===void 0&&(t=new Y);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new Y),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new c);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,a=this.z,l=this.w,d=l*s+r*i-a*n,p=l*n+a*s-o*i,h=l*i+o*n-r*s,f=-o*s-r*n-a*i;return e.x=d*l+f*-o+p*-a-h*-r,e.y=p*l+f*-r+h*-o-d*-a,e.z=h*l+f*-a+d*-r-p*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,a=this.z,l=this.w;switch(e){case"YZX":const d=o*r+a*l;if(d>.499&&(s=2*Math.atan2(o,l),n=Math.PI/2,i=0),d<-.499&&(s=-2*Math.atan2(o,l),n=-Math.PI/2,i=0),s===void 0){const p=o*o,h=r*r,f=a*a;s=Math.atan2(2*r*l-2*o*a,1-2*h-2*f),n=Math.asin(2*d),i=Math.atan2(2*o*l-2*r*a,1-2*p-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),a=Math.sin(t/2),l=Math.sin(e/2),d=Math.sin(s/2);return n==="XYZ"?(this.x=a*o*r+i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r-a*l*d):n==="YXZ"?(this.x=a*o*r+i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r+a*l*d):n==="ZXY"?(this.x=a*o*r-i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r-a*l*d):n==="ZYX"?(this.x=a*o*r-i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r+a*l*d):n==="YZX"?(this.x=a*o*r+i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r-a*l*d):n==="XZY"&&(this.x=a*o*r-i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r+a*l*d),this}clone(){return new Y(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new Y);const n=this.x,i=this.y,o=this.z,r=this.w;let a=t.x,l=t.y,d=t.z,p=t.w,h,f,u,m,v;return f=n*a+i*l+o*d+r*p,f<0&&(f=-f,a=-a,l=-l,d=-d,p=-p),1-f>1e-6?(h=Math.acos(f),u=Math.sin(h),m=Math.sin((1-e)*h)/u,v=Math.sin(e*h)/u):(m=1-e,v=e),s.x=m*n+v*a,s.y=m*i+v*l,s.z=m*o+v*d,s.w=m*r+v*p,s}integrate(t,e,s,n){n===void 0&&(n=new Y);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,a=this.x,l=this.y,d=this.z,p=this.w,h=e*.5;return n.x+=h*(i*p+o*d-r*l),n.y+=h*(o*p+r*a-i*d),n.z+=h*(r*p+i*l-o*a),n.w+=h*(-i*a-o*l-r*d),n}}const os=new c,rs=new c,cs={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class P{constructor(t){t===void 0&&(t={}),this.id=P.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}P.idCounter=0,P.types=cs;class W{constructor(t){t===void 0&&(t={}),this.position=new c,this.quaternion=new Y,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return W.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return W.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new c),s.vsub(t,n),e.conjugate(ze),ze.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new c),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new c),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new c),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const ze=new Y;class zt extends P{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:P.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new c;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let a=0;a!==r;a++){const l=(a+1)%r;e[o[a]].vsub(e[o[l]],n),n.normalize();let d=!1;for(let p=0;p!==s.length;p++)if(s[p].almostEquals(n)||s[p].almostEquals(n)){d=!0;break}d||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new c;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];zt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new c,o=new c;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,a,l){const d=new c;let p=-1,h=-Number.MAX_VALUE;for(let u=0;u<s.faces.length;u++){d.copy(s.faceNormals[u]),i.vmult(d,d);const m=d.dot(o);m>h&&(h=m,p=u)}const f=[];for(let u=0;u<s.faces[p].length;u++){const m=s.vertices[s.faces[p][u]],v=new c;v.copy(m),i.vmult(v,v),n.vadd(v,v),f.push(v)}p>=0&&this.clipFaceAgainstHull(o,t,e,f,r,a,l)}findSeparatingAxis(t,e,s,n,i,o,r,a){const l=new c,d=new c,p=new c,h=new c,f=new c,u=new c;let m=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let w=0;w!==v.uniqueAxes.length;w++){s.vmult(v.uniqueAxes[w],l);const y=v.testSepAxis(l,t,e,s,n,i);if(y===!1)return!1;y<m&&(m=y,o.copy(l))}else{const w=r?r.length:v.faces.length;for(let y=0;y<w;y++){const x=r?r[y]:y;l.copy(v.faceNormals[x]),s.vmult(l,l);const g=v.testSepAxis(l,t,e,s,n,i);if(g===!1)return!1;g<m&&(m=g,o.copy(l))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],d);const y=v.testSepAxis(d,t,e,s,n,i);if(y===!1)return!1;y<m&&(m=y,o.copy(d))}else{const w=a?a.length:t.faces.length;for(let y=0;y<w;y++){const x=a?a[y]:y;d.copy(t.faceNormals[x]),i.vmult(d,d);const g=v.testSepAxis(d,t,e,s,n,i);if(g===!1)return!1;g<m&&(m=g,o.copy(d))}}for(let w=0;w!==v.uniqueEdges.length;w++){s.vmult(v.uniqueEdges[w],h);for(let y=0;y!==t.uniqueEdges.length;y++)if(i.vmult(t.uniqueEdges[y],f),h.cross(f,u),!u.almostZero()){u.normalize();const x=v.testSepAxis(u,t,e,s,n,i);if(x===!1)return!1;x<m&&(m=x,o.copy(u))}}return n.vsub(e,p),p.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;zt.project(r,t,s,n,Zt),zt.project(e,t,i,o,Jt);const a=Zt[0],l=Zt[1],d=Jt[0],p=Jt[1];if(a<p||d<l)return!1;const h=a-p,f=d-l;return h<f?h:f}calculateLocalInertia(t,e){const s=new c,n=new c;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const a=new c,l=new c,d=new c,p=new c,h=new c,f=new c,u=new c,m=new c,v=this,w=[],y=n,x=w;let g=-1,E=Number.MAX_VALUE;for(let N=0;N<v.faces.length;N++){a.copy(v.faceNormals[N]),s.vmult(a,a);const R=a.dot(t);R<E&&(E=R,g=N)}if(g<0)return;const M=v.faces[g];M.connectedFaces=[];for(let N=0;N<v.faces.length;N++)for(let R=0;R<v.faces[N].length;R++)M.indexOf(v.faces[N][R])!==-1&&N!==g&&M.connectedFaces.indexOf(N)===-1&&M.connectedFaces.push(N);const I=M.length;for(let N=0;N<I;N++){const R=v.vertices[M[N]],k=v.vertices[M[(N+1)%I]];R.vsub(k,l),d.copy(l),s.vmult(d,d),e.vadd(d,d),p.copy(this.faceNormals[g]),s.vmult(p,p),e.vadd(p,p),d.cross(p,h),h.negate(h),f.copy(R),s.vmult(f,f),e.vadd(f,f);const b=M.connectedFaces[N];u.copy(this.faceNormals[b]);const T=this.getPlaneConstantOfFace(b);m.copy(u),s.vmult(m,m);const S=T-m.dot(e);for(this.clipFaceAgainstPlane(y,x,m,S);y.length;)y.shift();for(;x.length;)y.push(x.shift())}u.copy(this.faceNormals[g]);const F=this.getPlaneConstantOfFace(g);m.copy(u),s.vmult(m,m);const q=F-m.dot(e);for(let N=0;N<y.length;N++){let R=m.dot(y[N])+q;if(R<=i&&(console.log(`clamped: depth=${R} to minDist=${i}`),R=i),R<=o){const k=y[N];if(R<=1e-6){const b={point:k,normal:m,depth:R};r.push(b)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let a=t[t.length-1],l=t[0];i=s.dot(a)+n;for(let d=0;d<r;d++){if(l=t[d],o=s.dot(l)+n,i<0)if(o<0){const p=new c;p.copy(l),e.push(p)}else{const p=new c;a.lerp(l,i/(i-o),p),e.push(p)}else if(o<0){const p=new c;a.lerp(l,i/(i-o),p),e.push(p),e.push(l)}a=l,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new c);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new c);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,a,l,d,p,h=new c;for(let f=0;f<i.length;f++){h.copy(i[f]),e.vmult(h,h),t.vadd(h,h);const u=h;(o===void 0||u.x<o)&&(o=u.x),(l===void 0||u.x>l)&&(l=u.x),(r===void 0||u.y<r)&&(r=u.y),(d===void 0||u.y>d)&&(d=u.y),(a===void 0||u.z<a)&&(a=u.z),(p===void 0||u.z>p)&&(p=u.z)}s.set(o,r,a),n.set(l,d,p)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new c);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=new c;this.getAveragePointLocal(i);for(let o=0;o<this.faces.length;o++){let r=n[o];const a=e[s[o][0]],l=new c;t.vsub(a,l);const d=r.dot(l),p=new c;i.vsub(a,p);const h=r.dot(p);if(d<0&&h>0||d>0&&h<0)return!1}return-1}static project(t,e,s,n,i){const o=t.vertices.length,r=as;let a=0,l=0;const d=ls,p=t.vertices;d.setZero(),W.vectorToLocalFrame(s,n,e,r),W.pointToLocalFrame(s,n,d,d);const h=d.dot(r);l=a=p[0].dot(r);for(let f=1;f<o;f++){const u=p[f].dot(r);u>a&&(a=u),u<l&&(l=u)}if(l-=h,a-=h,l>a){const f=l;l=a,a=f}i[0]=a,i[1]=l}}const Zt=[],Jt=[];new c;const as=new c,ls=new c;class Qt extends P{constructor(t){super({type:P.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=c,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],a=new zt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new c),Qt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)wt.set(i[o][0],i[o][1],i[o][2]),e.vmult(wt,wt),t.vadd(wt,wt),s(wt.x,wt.y,wt.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;ct[0].set(i.x,i.y,i.z),ct[1].set(-i.x,i.y,i.z),ct[2].set(-i.x,-i.y,i.z),ct[3].set(-i.x,-i.y,-i.z),ct[4].set(i.x,-i.y,-i.z),ct[5].set(i.x,i.y,-i.z),ct[6].set(-i.x,i.y,-i.z),ct[7].set(i.x,-i.y,i.z);const o=ct[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const a=ct[r];e.vmult(a,a),t.vadd(a,a);const l=a.x,d=a.y,p=a.z;l>n.x&&(n.x=l),d>n.y&&(n.y=d),p>n.z&&(n.z=p),l<s.x&&(s.x=l),d<s.y&&(s.y=d),p<s.z&&(s.z=p)}}}const wt=new c,ct=[new c,new c,new c,new c,new c,new c,new c,new c],$={DYNAMIC:1,STATIC:2,KINEMATIC:4},te={AWAKE:0,SLEEPY:1,SLEEPING:2};class A extends Ce{constructor(t){t===void 0&&(t={}),super(),this.id=A.idCounter++,this.index=-1,this.world=null,this.vlambda=new c,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new c,this.previousPosition=new c,this.interpolatedPosition=new c,this.initPosition=new c,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new c,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new c,this.force=new c;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?A.STATIC:A.DYNAMIC,typeof t.type==typeof A.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=A.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new c,this.quaternion=new Y,this.initQuaternion=new Y,this.previousQuaternion=new Y,this.interpolatedQuaternion=new Y,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new c,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new c,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new c,this.invInertia=new c,this.invInertiaWorld=new ot,this.invMassSolve=0,this.invInertiaSolve=new c,this.invInertiaWorldSolve=new ot,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new c(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new c(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new nt,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new c,this.isTrigger=!!t.isTrigger,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=A.AWAKE,this.wakeUpAfterNarrowphase=!1,t===A.SLEEPING&&this.dispatchEvent(A.wakeupEvent)}sleep(){this.sleepState=A.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===A.AWAKE&&s<n?(this.sleepState=A.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(A.sleepyEvent)):e===A.SLEEPY&&s>n?this.wakeUp():e===A.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(A.sleepEvent))}}updateSolveMassProperties(){this.sleepState===A.SLEEPING||this.type===A.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new c),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new c),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new c,i=new Y;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),a=o.boundingSphereRadius;r+a>n&&(n=r+a)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=hs,o=ds,r=this.quaternion,a=this.aabb,l=us;for(let d=0;d!==n;d++){const p=t[d];r.vmult(e[d],i),i.vadd(this.position,i),r.mult(s[d],o),p.calculateWorldAABB(i,o,l.lowerBound,l.upperBound),d===0?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=ps,n=fs;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new c),this.type!==A.DYNAMIC)return;this.sleepState===A.SLEEPING&&this.wakeUp();const s=ys;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new c),this.type!==A.DYNAMIC)return;const s=ms,n=vs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===A.DYNAMIC&&(this.sleepState===A.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new c),this.type!==A.DYNAMIC)return;this.sleepState===A.SLEEPING&&this.wakeUp();const s=e,n=ws;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=xs;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new c),this.type!==A.DYNAMIC)return;const s=gs,n=bs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=Es;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Qt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new c;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===A.DYNAMIC||this.type===A.KINEMATIC)||this.sleepState===A.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,a=this.torque,l=this.quaternion,d=this.invMass,p=this.invInertiaWorld,h=this.linearFactor,f=d*t;n.x+=r.x*f*h.x,n.y+=r.y*f*h.y,n.z+=r.z*f*h.z;const u=p.elements,m=this.angularFactor,v=a.x*m.x,w=a.y*m.y,y=a.z*m.z;i.x+=t*(u[0]*v+u[1]*w+u[2]*y),i.y+=t*(u[3]*v+u[4]*w+u[5]*y),i.z+=t*(u[6]*v+u[7]*w+u[8]*y),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}A.idCounter=0,A.COLLIDE_EVENT_NAME="collide",A.DYNAMIC=$.DYNAMIC,A.STATIC=$.STATIC,A.KINEMATIC=$.KINEMATIC,A.AWAKE=te.AWAKE,A.SLEEPY=te.SLEEPY,A.SLEEPING=te.SLEEPING,A.wakeupEvent={type:"wakeup"},A.sleepyEvent={type:"sleepy"},A.sleepEvent={type:"sleep"};const hs=new c,ds=new Y,us=new nt,ps=new ot,fs=new ot;new ot;const ys=new c,ms=new c,vs=new c,ws=new c,xs=new c,gs=new c,bs=new c,Es=new c;class Cs{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!((t.collisionFilterGroup&e.collisionFilterMask)===0||(e.collisionFilterGroup&t.collisionFilterMask)===0||((t.type&A.STATIC)!==0||t.sleepState===A.SLEEPING)&&((e.type&A.STATIC)!==0||e.sleepState===A.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=zs;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=Ms,n=Ss,i=As,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const a=n[r].id,l=i[r].id,d=a<l?`${a},${l}`:`${l},${a}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const a=s.keys.pop(),l=s[a];t.push(n[l]),e.push(i[l]),delete s[a]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new c;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const zs=new c;new c,new Y,new c;const Ms={keys:[]},Ss=[],As=[];new c,new c,new c;class Ts extends Cs{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let a=0;a!==i;a++)for(let l=0;l!==a;l++)o=n[a],r=n[l],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class Vt{constructor(){this.rayFromWorld=new c,this.rayToWorld=new c,this.hitNormalWorld=new c,this.hitPointWorld=new c,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let Me,Se,Ae,Te,Pe,Ie,Ne;const ee={CLOSEST:1,ANY:2,ALL:4};Me=P.types.SPHERE,Se=P.types.PLANE,Ae=P.types.BOX,Te=P.types.CYLINDER,Pe=P.types.CONVEXPOLYHEDRON,Ie=P.types.HEIGHTFIELD,Ne=P.types.TRIMESH;class U{get[Me](){return this._intersectSphere}get[Se](){return this._intersectPlane}get[Ae](){return this._intersectBox}get[Te](){return this._intersectConvex}get[Pe](){return this._intersectConvex}get[Ie](){return this._intersectHeightfield}get[Ne](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new c),e===void 0&&(e=new c),this.from=t.clone(),this.to=e.clone(),this.direction=new c,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=U.ANY,this.result=new Vt,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||U.ANY,this.result=e.result||new Vt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Fe),se.length=0,t.broadphase.aabbQuery(t,Fe,se),this.intersectBodies(se),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||(this.collisionFilterGroup&t.collisionFilterMask)===0||(t.collisionFilterGroup&this.collisionFilterMask)===0)return;const n=Ps,i=Is;for(let o=0,r=t.shapes.length;o<r;o++){const a=t.shapes[o];if(!(s&&!a.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(a,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(Gs(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,a=this.direction,l=new c(0,0,1);e.vmult(l,l);const d=new c;o.vsub(s,d);const p=d.dot(l);r.vsub(s,d);const h=d.dot(l);if(p*h>0||o.distanceTo(r)<p)return;const f=l.dot(a);if(Math.abs(f)<this.precision)return;const u=new c,m=new c,v=new c;o.vsub(s,u);const w=-l.dot(u)/f;a.scale(w,m),o.vadd(m,v),this.reportIntersection(l,v,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=Ns;o.from.copy(this.from),o.to.copy(this.to),W.pointToLocalFrame(s,e,o.from,o.from),W.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=Fs;let a,l,d,p;a=l=0,d=p=t.data.length-1;const h=new nt;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),a=Math.max(a,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),p=Math.min(p,r[1]+1);for(let f=a;f<d;f++)for(let u=l;u<p;u++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,u,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,u,!1),W.pointToWorldFrame(s,e,t.pillarOffset,Wt),this._intersectConvex(t.pillarConvex,e,Wt,n,i,Be),this.result.shouldStop)return;t.getConvexTrianglePillar(f,u,!0),W.pointToWorldFrame(s,e,t.pillarOffset,Wt),this._intersectConvex(t.pillarConvex,e,Wt,n,i,Be)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,a=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),p=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-a**2,h=d**2-4*l*p,f=Bs,u=Rs;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,u),u.normalize(),this.reportIntersection(u,f,i,n,-1);else{const m=(-d-Math.sqrt(h))/(2*l),v=(-d+Math.sqrt(h))/(2*l);if(m>=0&&m<=1&&(o.lerp(r,m,f),f.vsub(s,u),u.normalize(),this.reportIntersection(u,f,i,n,-1)),this.result.shouldStop)return;v>=0&&v<=1&&(o.lerp(r,v,f),f.vsub(s,u),u.normalize(),this.reportIntersection(u,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=qs,a=Re,l=o&&o.faceList||null,d=t.faces,p=t.vertices,h=t.faceNormals,f=this.direction,u=this.from,m=this.to,v=u.distanceTo(m),w=l?l.length:d.length,y=this.result;for(let x=0;!y.shouldStop&&x<w;x++){const g=l?l[x]:x,E=d[g],M=h[g],I=e,F=s;a.copy(p[E[0]]),I.vmult(a,a),a.vadd(F,a),a.vsub(u,a),I.vmult(M,r);const q=f.dot(r);if(Math.abs(q)<this.precision)continue;const N=r.dot(a)/q;if(!(N<0)){f.scale(N,tt),tt.vadd(u,tt),rt.copy(p[E[0]]),I.vmult(rt,rt),F.vadd(rt,rt);for(let R=1;!y.shouldStop&&R<E.length-1;R++){at.copy(p[E[R]]),lt.copy(p[E[R+1]]),I.vmult(at,at),I.vmult(lt,lt),F.vadd(at,at),F.vadd(lt,lt);const k=tt.distanceTo(u);!(U.pointInTriangle(tt,rt,at,lt)||U.pointInTriangle(tt,at,rt,lt))||k>v||this.reportIntersection(r,tt,i,n,g)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=_s,a=js,l=Ds,d=Re,p=Ls,h=Os,f=ks,u=Ws,m=Vs,v=t.indices;t.vertices;const w=this.from,y=this.to,x=this.direction;l.position.copy(s),l.quaternion.copy(e),W.vectorToLocalFrame(s,e,x,p),W.pointToLocalFrame(s,e,w,h),W.pointToLocalFrame(s,e,y,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,p),p.normalize();const g=h.distanceSquared(f);t.tree.rayQuery(this,l,a);for(let E=0,M=a.length;!this.result.shouldStop&&E!==M;E++){const I=a[E];t.getNormal(I,r),t.getVertex(v[I*3],rt),rt.vsub(h,d);const F=p.dot(r),q=r.dot(d)/F;if(q<0)continue;p.scale(q,tt),tt.vadd(h,tt),t.getVertex(v[I*3+1],at),t.getVertex(v[I*3+2],lt);const N=tt.distanceSquared(h);!(U.pointInTriangle(tt,at,rt,lt)||U.pointInTriangle(tt,rt,at,lt))||N>g||(W.vectorToWorldFrame(e,r,m),W.pointToWorldFrame(s,e,tt,u),this.reportIntersection(m,u,i,n,I))}a.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,a=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case U.ALL:this.hasHit=!0,l.set(o,r,t,e,s,n,a),l.hasHit=!0,this.callback(l);break;case U.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,a));break;case U.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,a),l.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,bt),s.vsub(e,Nt),t.vsub(e,ne);const i=bt.dot(bt),o=bt.dot(Nt),r=bt.dot(ne),a=Nt.dot(Nt),l=Nt.dot(ne);let d,p;return(d=a*r-o*l)>=0&&(p=i*l-o*r)>=0&&d+p<i*a-o*o}}U.CLOSEST=ee.CLOSEST,U.ANY=ee.ANY,U.ALL=ee.ALL;const Fe=new nt,se=[],Nt=new c,ne=new c,Ps=new c,Is=new Y,tt=new c,rt=new c,at=new c,lt=new c;new c,new Vt;const Be={faceList:[0]},Wt=new c,Ns=new U,Fs=[],Bs=new c,Rs=new c,qs=new c;new c,new c;const Re=new c,_s=new c,Ls=new c,Os=new c,ks=new c,Vs=new c,Ws=new c;new nt;const js=[],Ds=new W,bt=new c,jt=new c;function Gs(z,t,e){e.vsub(z,bt);const s=bt.dot(t);return t.scale(s,jt),jt.vadd(z,jt),e.distanceTo(jt)}class qe{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Dt{constructor(t,e,s){s===void 0&&(s={}),s=qe.defaults(s,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=Dt.idCounter++,this.collideConnected=s.collideConnected,s.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}Dt.idCounter=0;class _e{constructor(){this.spatial=new c,this.rotational=new c}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Ft{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=Ft.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new _e,this.jacobianElementB=new _e,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,a=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,a=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,a=n.torque,l=s.invMassSolve,d=n.invMassSolve;return i.scale(l,Le),r.scale(d,Oe),s.invInertiaWorldSolve.vmult(o,ke),n.invInertiaWorldSolve.vmult(a,Ve),t.multiplyVectors(Le,ke)+e.multiplyVectors(Oe,Ve)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,a=n.invInertiaWorldSolve;let l=i+o;return r.vmult(t.rotational,Gt),l+=Gt.dot(t.rotational),a.vmult(e.rotational,Gt),l+=Gt.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=Hs;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Ft.idCounter=0;const Le=new c,Oe=new c,ke=new c,Ve=new c,Gt=new c,Hs=new c;class We extends Ft{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new c,this.rj=new c,this.ni=new c}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,a=Ys,l=$s,d=n.velocity,p=n.angularVelocity;n.force,n.torque;const h=i.velocity,f=i.angularVelocity;i.force,i.torque;const u=Us,m=this.jacobianElementA,v=this.jacobianElementB,w=this.ni;o.cross(w,a),r.cross(w,l),w.negate(m.spatial),a.negate(m.rotational),v.spatial.copy(w),v.rotational.copy(l),u.copy(i.position),u.vadd(r,u),u.vsub(n.position,u),u.vsub(o,u);const y=w.dot(u),x=this.restitution+1,g=x*h.dot(w)-x*d.dot(w)+f.dot(l)-p.dot(a),E=this.computeGiMf();return-y*e-g*s-t*E}getImpactVelocityAlongNormal(){const t=Xs,e=Ks,s=Zs,n=Js,i=Qs;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const Ys=new c,$s=new c,Us=new c,Xs=new c,Ks=new c,Zs=new c,Js=new c,Qs=new c;new c,new c,new c,new c,new c,new c;class Et extends Dt{constructor(t,e,s,n){n===void 0&&(n=1e6),super(t,e),typeof s>"u"&&(s=t.position.distanceTo(e.position)),this.distance=s;const i=this.distanceEquation=new We(t,e);this.equations.push(i),i.minForce=-n,i.maxForce=n}update(){const t=this.bodyA,e=this.bodyB,s=this.distanceEquation,n=this.distance*.5,i=s.ni;e.position.vsub(t.position,i),i.normalize(),i.scale(n,s.ri),i.scale(-n,s.rj)}}new c,new c,new c,new c;class je extends Ft{constructor(t,e,s){super(t,e,-s,s),this.ri=new c,this.rj=new c,this.t=new c}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=tn,o=en,r=this.t;s.cross(r,i),n.cross(r,o);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),i.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(o);const d=this.computeGW(),p=this.computeGiMf();return-d*e-t*p}}const tn=new c,en=new c;class Bt{constructor(t,e,s){s=qe.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Bt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}Bt.idCounter=0;class Rt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=Rt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}Rt.idCounter=0,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new U,new c,new c,new c,new c(1,0,0),new c(0,1,0),new c(0,0,1),new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c;class ie extends P{constructor(t){if(super({type:P.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new c);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const a=o[r];s[a]=t[a]-i,n[a]=t[a]+i}}}new c,new c,new c,new c,new c,new c,new c,new c,new c;class De extends zt{constructor(t,e,s,n){if(t===void 0&&(t=1),e===void 0&&(e=1),s===void 0&&(s=1),n===void 0&&(n=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const i=n,o=[],r=[],a=[],l=[],d=[],p=Math.cos,h=Math.sin;o.push(new c(-e*h(0),-s*.5,e*p(0))),l.push(0),o.push(new c(-t*h(0),s*.5,t*p(0))),d.push(1);for(let u=0;u<i;u++){const m=2*Math.PI/i*(u+1),v=2*Math.PI/i*(u+.5);u<i-1?(o.push(new c(-e*h(m),-s*.5,e*p(m))),l.push(2*u+2),o.push(new c(-t*h(m),s*.5,t*p(m))),d.push(2*u+3),a.push([2*u,2*u+1,2*u+3,2*u+2])):a.push([2*u,2*u+1,1,0]),(i%2===1||u<i/2)&&r.push(new c(-h(v),0,p(v)))}a.push(l),r.push(new c(0,1,0));const f=[];for(let u=0;u<d.length;u++)f.push(d[d.length-u-1]);a.push(f),super({vertices:o,faces:a,axes:r}),this.type=P.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=n}}new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new c,new nt,new c,new nt,new c,new c,new c,new c,new c,new c,new c,new nt,new c,new W,new nt;class sn{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class nn extends sn{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,a=e.bodies,l=a.length,d=t;let p,h,f,u,m,v;if(r!==0)for(let g=0;g!==l;g++)a[g].updateSolveMassProperties();const w=rn,y=cn,x=on;w.length=r,y.length=r,x.length=r;for(let g=0;g!==r;g++){const E=o[g];x[g]=0,y[g]=E.computeB(d),w[g]=1/E.computeC()}if(r!==0){for(let M=0;M!==l;M++){const I=a[M],F=I.vlambda,q=I.wlambda;F.set(0,0,0),q.set(0,0,0)}for(s=0;s!==n;s++){u=0;for(let M=0;M!==r;M++){const I=o[M];p=y[M],h=w[M],v=x[M],m=I.computeGWlambda(),f=h*(p-m-I.eps*v),v+f<I.minForce?f=I.minForce-v:v+f>I.maxForce&&(f=I.maxForce-v),x[M]+=f,u+=f>0?f:-f,I.addToWlambda(f)}if(u*u<i)break}for(let M=0;M!==l;M++){const I=a[M],F=I.velocity,q=I.angularVelocity;I.vlambda.vmul(I.linearFactor,I.vlambda),F.vadd(I.vlambda,F),I.wlambda.vmul(I.angularFactor,I.wlambda),q.vadd(I.wlambda,q)}let g=o.length;const E=1/d;for(;g--;)o[g].multiplier=x[g]*E}return s}}const on=[],rn=[],cn=[];class an{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class ln extends an{constructor(){super(...arguments),this.type=c}constructObject(){return new c}}const D={sphereSphere:P.types.SPHERE,spherePlane:P.types.SPHERE|P.types.PLANE,boxBox:P.types.BOX|P.types.BOX,sphereBox:P.types.SPHERE|P.types.BOX,planeBox:P.types.PLANE|P.types.BOX,convexConvex:P.types.CONVEXPOLYHEDRON,sphereConvex:P.types.SPHERE|P.types.CONVEXPOLYHEDRON,planeConvex:P.types.PLANE|P.types.CONVEXPOLYHEDRON,boxConvex:P.types.BOX|P.types.CONVEXPOLYHEDRON,sphereHeightfield:P.types.SPHERE|P.types.HEIGHTFIELD,boxHeightfield:P.types.BOX|P.types.HEIGHTFIELD,convexHeightfield:P.types.CONVEXPOLYHEDRON|P.types.HEIGHTFIELD,sphereParticle:P.types.PARTICLE|P.types.SPHERE,planeParticle:P.types.PLANE|P.types.PARTICLE,boxParticle:P.types.BOX|P.types.PARTICLE,convexParticle:P.types.PARTICLE|P.types.CONVEXPOLYHEDRON,cylinderCylinder:P.types.CYLINDER,sphereCylinder:P.types.SPHERE|P.types.CYLINDER,planeCylinder:P.types.PLANE|P.types.CYLINDER,boxCylinder:P.types.BOX|P.types.CYLINDER,convexCylinder:P.types.CONVEXPOLYHEDRON|P.types.CYLINDER,heightfieldCylinder:P.types.HEIGHTFIELD|P.types.CYLINDER,particleCylinder:P.types.PARTICLE|P.types.CYLINDER,sphereTrimesh:P.types.SPHERE|P.types.TRIMESH,planeTrimesh:P.types.PLANE|P.types.TRIMESH};class hn{get[D.sphereSphere](){return this.sphereSphere}get[D.spherePlane](){return this.spherePlane}get[D.boxBox](){return this.boxBox}get[D.sphereBox](){return this.sphereBox}get[D.planeBox](){return this.planeBox}get[D.convexConvex](){return this.convexConvex}get[D.sphereConvex](){return this.sphereConvex}get[D.planeConvex](){return this.planeConvex}get[D.boxConvex](){return this.boxConvex}get[D.sphereHeightfield](){return this.sphereHeightfield}get[D.boxHeightfield](){return this.boxHeightfield}get[D.convexHeightfield](){return this.convexHeightfield}get[D.sphereParticle](){return this.sphereParticle}get[D.planeParticle](){return this.planeParticle}get[D.boxParticle](){return this.boxParticle}get[D.convexParticle](){return this.convexParticle}get[D.cylinderCylinder](){return this.convexConvex}get[D.sphereCylinder](){return this.sphereConvex}get[D.planeCylinder](){return this.planeConvex}get[D.boxCylinder](){return this.boxConvex}get[D.convexCylinder](){return this.convexConvex}get[D.heightfieldCylinder](){return this.heightfieldCylinder}get[D.particleCylinder](){return this.particleCylinder}get[D.sphereTrimesh](){return this.sphereTrimesh}get[D.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new ln,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new We(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,d=n.material||e.material;return l&&d&&l.restitution>=0&&d.restitution>=0&&(r.restitution=l.restitution*d.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const d=i.material||s.material,p=o.material||n.material;if(d&&p&&d.friction>=0&&p.friction>=0&&(l=d.friction*p.friction),l>0){const h=l*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const u=this.frictionEquationPool,m=u.length?u.pop():new je(s,n,h*f),v=u.length?u.pop():new je(s,n,h*f);return m.bi=v.bi=s,m.bj=v.bj=n,m.minForce=v.minForce=-h*f,m.maxForce=v.maxForce=h*f,m.ri.copy(t.ri),m.rj.copy(t.rj),v.ri.copy(t.ri),v.rj.copy(t.rj),t.ni.tangents(m.t,v.t),m.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),v.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),m.enabled=v.enabled=t.enabled,e.push(m,v),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];Ct.setZero(),Mt.setZero(),St.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(Ct.vadd(e.ni,Ct),Mt.vadd(e.ri,Mt),St.vadd(e.rj,St)):(Ct.vsub(e.ni,Ct),Mt.vadd(e.rj,Mt),St.vadd(e.ri,St));const o=1/t;Mt.scale(o,s.ri),St.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),Ct.normalize(),Ct.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const a=pn,l=fn,d=dn,p=un;for(let h=0,f=t.length;h!==f;h++){const u=t[h],m=e[h];let v=null;u.material&&m.material&&(v=s.getContactMaterial(u.material,m.material)||null);const w=u.type&A.KINEMATIC&&m.type&A.STATIC||u.type&A.STATIC&&m.type&A.KINEMATIC||u.type&A.KINEMATIC&&m.type&A.KINEMATIC;for(let y=0;y<u.shapes.length;y++){u.quaternion.mult(u.shapeOrientations[y],a),u.quaternion.vmult(u.shapeOffsets[y],d),d.vadd(u.position,d);const x=u.shapes[y];for(let g=0;g<m.shapes.length;g++){m.quaternion.mult(m.shapeOrientations[g],l),m.quaternion.vmult(m.shapeOffsets[g],p),p.vadd(m.position,p);const E=m.shapes[g];if(!(x.collisionFilterMask&E.collisionFilterGroup&&E.collisionFilterMask&x.collisionFilterGroup)||d.distanceTo(p)>x.boundingSphereRadius+E.boundingSphereRadius)continue;let M=null;x.material&&E.material&&(M=s.getContactMaterial(x.material,E.material)||null),this.currentContactMaterial=M||v||s.defaultContactMaterial;const I=x.type|E.type,F=this[I];if(F){let q=!1;x.type<E.type?q=F.call(this,x,E,d,p,a,l,u,m,x,E,w):q=F.call(this,E,x,p,d,l,a,m,u,x,E,w),q&&w&&(s.shapeOverlapKeeper.set(x.id,E.id),s.bodyOverlapKeeper.set(u.id,m.id))}}}}}sphereSphere(t,e,s,n,i,o,r,a,l,d,p){if(p)return s.distanceSquared(n)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,a,t,e,l,d);n.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(n,h.rj),h.rj.vsub(a.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,a,l,d,p){const h=this.createContactEquation(r,a,t,e,l,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(n,Ht),h.ni.scale(h.ni.dot(Ht),Ge),Ht.vsub(Ge,h.rj),-Ht.dot(h.ni)<=t.radius){if(p)return!0;const f=h.ri,u=h.rj;f.vadd(s,f),f.vsub(r.position,f),u.vadd(n,u),u.vsub(a.position,u),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,a,l,d,p){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,a,t,e,p)}sphereBox(t,e,s,n,i,o,r,a,l,d,p){const h=this.v3pool,f=Vn;s.vsub(n,Yt),e.getSideNormals(f,o);const u=t.radius;let m=!1;const v=jn,w=Dn,y=Gn;let x=null,g=0,E=0,M=0,I=null;for(let C=0,G=f.length;C!==G&&m===!1;C++){const _=Ln;_.copy(f[C]);const V=_.length();_.normalize();const st=Yt.dot(_);if(st<V+u&&st>0){const J=On,B=kn;J.copy(f[(C+1)%3]),B.copy(f[(C+2)%3]);const It=J.length(),Kt=B.length();J.normalize(),B.normalize();const ve=Yt.dot(J),we=Yt.dot(B);if(ve<It&&ve>-It&&we<Kt&&we>-Kt){const es=Math.abs(st-V-u);if((I===null||es<I)&&(I=es,E=ve,M=we,x=V,v.copy(_),w.copy(J),y.copy(B),g++,p))return!0}}}if(g){m=!0;const C=this.createContactEquation(r,a,t,e,l,d);v.scale(-u,C.ri),C.ni.copy(v),C.ni.negate(C.ni),v.scale(x,v),w.scale(E,w),v.vadd(w,v),y.scale(M,y),v.vadd(y,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(n,C.rj),C.rj.vsub(a.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult)}let F=h.get();const q=Wn;for(let C=0;C!==2&&!m;C++)for(let G=0;G!==2&&!m;G++)for(let _=0;_!==2&&!m;_++)if(F.set(0,0,0),C?F.vadd(f[0],F):F.vsub(f[0],F),G?F.vadd(f[1],F):F.vsub(f[1],F),_?F.vadd(f[2],F):F.vsub(f[2],F),n.vadd(F,q),q.vsub(s,q),q.lengthSquared()<u*u){if(p)return!0;m=!0;const V=this.createContactEquation(r,a,t,e,l,d);V.ri.copy(q),V.ri.normalize(),V.ni.copy(V.ri),V.ri.scale(u,V.ri),V.rj.copy(F),V.ri.vadd(s,V.ri),V.ri.vsub(r.position,V.ri),V.rj.vadd(n,V.rj),V.rj.vsub(a.position,V.rj),this.result.push(V),this.createFrictionEquationsFromContact(V,this.frictionResult)}h.release(F),F=null;const N=h.get(),R=h.get(),k=h.get(),b=h.get(),T=h.get(),S=f.length;for(let C=0;C!==S&&!m;C++)for(let G=0;G!==S&&!m;G++)if(C%3!==G%3){f[G].cross(f[C],N),N.normalize(),f[C].vadd(f[G],R),k.copy(s),k.vsub(R,k),k.vsub(n,k);const _=k.dot(N);N.scale(_,b);let V=0;for(;V===C%3||V===G%3;)V++;T.copy(s),T.vsub(b,T),T.vsub(R,T),T.vsub(n,T);const st=Math.abs(_),J=T.length();if(st<f[V].length()&&J<u){if(p)return!0;m=!0;const B=this.createContactEquation(r,a,t,e,l,d);R.vadd(b,B.rj),B.rj.copy(B.rj),T.negate(B.ni),B.ni.normalize(),B.ri.copy(B.rj),B.ri.vadd(n,B.ri),B.ri.vsub(s,B.ri),B.ri.normalize(),B.ri.scale(u,B.ri),B.ri.vadd(s,B.ri),B.ri.vsub(r.position,B.ri),B.rj.vadd(n,B.rj),B.rj.vsub(a.position,B.rj),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult)}}h.release(N,R,k,b,T)}planeBox(t,e,s,n,i,o,r,a,l,d,p){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,a,t,e,p)}convexConvex(t,e,s,n,i,o,r,a,l,d,p,h,f){const u=oi;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,u,h,f)){const m=[],v=ri;t.clipAgainstHull(s,i,e,n,o,u,-100,100,m);let w=0;for(let y=0;y!==m.length;y++){if(p)return!0;const x=this.createContactEquation(r,a,t,e,l,d),g=x.ri,E=x.rj;u.negate(x.ni),m[y].normal.negate(v),v.scale(m[y].depth,v),m[y].point.vadd(v,g),E.copy(m[y].point),g.vsub(s,g),E.vsub(n,E),g.vadd(s,g),g.vsub(r.position,g),E.vadd(n,E),E.vsub(a.position,E),this.result.push(x),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(x,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,a,l,d,p){const h=this.v3pool;s.vsub(n,Hn);const f=e.faceNormals,u=e.faces,m=e.vertices,v=t.radius;let w=!1;for(let y=0;y!==m.length;y++){const x=m[y],g=Xn;o.vmult(x,g),n.vadd(g,g);const E=Un;if(g.vsub(s,E),E.lengthSquared()<v*v){if(p)return!0;w=!0;const M=this.createContactEquation(r,a,t,e,l,d);M.ri.copy(E),M.ri.normalize(),M.ni.copy(M.ri),M.ri.scale(v,M.ri),g.vsub(n,M.rj),M.ri.vadd(s,M.ri),M.ri.vsub(r.position,M.ri),M.rj.vadd(n,M.rj),M.rj.vsub(a.position,M.rj),this.result.push(M),this.createFrictionEquationsFromContact(M,this.frictionResult);return}}for(let y=0,x=u.length;y!==x&&w===!1;y++){const g=f[y],E=u[y],M=Kn;o.vmult(g,M);const I=Zn;o.vmult(m[E[0]],I),I.vadd(n,I);const F=Jn;M.scale(-v,F),s.vadd(F,F);const q=Qn;F.vsub(I,q);const N=q.dot(M),R=ti;if(s.vsub(I,R),N<0&&R.dot(M)>0){const k=[];for(let b=0,T=E.length;b!==T;b++){const S=h.get();o.vmult(m[E[b]],S),n.vadd(S,S),k.push(S)}if(_n(k,M,s)){if(p)return!0;w=!0;const b=this.createContactEquation(r,a,t,e,l,d);M.scale(-v,b.ri),M.negate(b.ni);const T=h.get();M.scale(-N,T);const S=h.get();M.scale(-v,S),s.vsub(n,b.rj),b.rj.vadd(S,b.rj),b.rj.vadd(T,b.rj),b.rj.vadd(n,b.rj),b.rj.vsub(a.position,b.rj),b.ri.vadd(s,b.ri),b.ri.vsub(r.position,b.ri),h.release(T),h.release(S),this.result.push(b),this.createFrictionEquationsFromContact(b,this.frictionResult);for(let C=0,G=k.length;C!==G;C++)h.release(k[C]);return}else for(let b=0;b!==E.length;b++){const T=h.get(),S=h.get();o.vmult(m[E[(b+1)%E.length]],T),o.vmult(m[E[(b+2)%E.length]],S),n.vadd(T,T),n.vadd(S,S);const C=Yn;S.vsub(T,C);const G=$n;C.unit(G);const _=h.get(),V=h.get();s.vsub(T,V);const st=V.dot(G);G.scale(st,_),_.vadd(T,_);const J=h.get();if(_.vsub(s,J),st>0&&st*st<C.lengthSquared()&&J.lengthSquared()<v*v){if(p)return!0;const B=this.createContactEquation(r,a,t,e,l,d);_.vsub(n,B.rj),_.vsub(s,B.ni),B.ni.normalize(),B.ni.scale(v,B.ri),B.rj.vadd(n,B.rj),B.rj.vsub(a.position,B.rj),B.ri.vadd(s,B.ri),B.ri.vsub(r.position,B.ri),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult);for(let It=0,Kt=k.length;It!==Kt;It++)h.release(k[It]);h.release(T),h.release(S),h.release(_),h.release(J),h.release(V);return}h.release(T),h.release(S),h.release(_),h.release(J),h.release(V)}for(let b=0,T=k.length;b!==T;b++)h.release(k[b])}}}planeConvex(t,e,s,n,i,o,r,a,l,d,p){const h=ei,f=si;f.set(0,0,1),i.vmult(f,f);let u=0;const m=ni;for(let v=0;v!==e.vertices.length;v++)if(h.copy(e.vertices[v]),o.vmult(h,h),n.vadd(h,h),h.vsub(s,m),f.dot(m)<=0){if(p)return!0;const y=this.createContactEquation(r,a,t,e,l,d),x=ii;f.scale(f.dot(m),x),h.vsub(x,x),x.vsub(s,y.ri),y.ni.copy(f),h.vsub(n,y.rj),y.ri.vadd(s,y.ri),y.ri.vsub(r.position,y.ri),y.rj.vadd(n,y.rj),y.rj.vsub(a.position,y.rj),this.result.push(y),u++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(y,this.frictionResult)}this.enableFrictionReduction&&u&&this.createFrictionFromAverage(u)}boxConvex(t,e,s,n,i,o,r,a,l,d,p){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,p)}sphereHeightfield(t,e,s,n,i,o,r,a,l,d,p){const h=e.data,f=t.radius,u=e.elementSize,m=wi,v=vi;W.pointToLocalFrame(n,o,s,v);let w=Math.floor((v.x-f)/u)-1,y=Math.ceil((v.x+f)/u)+1,x=Math.floor((v.y-f)/u)-1,g=Math.ceil((v.y+f)/u)+1;if(y<0||g<0||w>h.length||x>h[0].length)return;w<0&&(w=0),y<0&&(y=0),x<0&&(x=0),g<0&&(g=0),w>=h.length&&(w=h.length-1),y>=h.length&&(y=h.length-1),g>=h[0].length&&(g=h[0].length-1),x>=h[0].length&&(x=h[0].length-1);const E=[];e.getRectMinMax(w,x,y,g,E);const M=E[0],I=E[1];if(v.z-f>I||v.z+f<M)return;const F=this.result;for(let q=w;q<y;q++)for(let N=x;N<g;N++){const R=F.length;let k=!1;if(e.getConvexTrianglePillar(q,N,!1),W.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(k=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,a,t,e,p)),p&&k||(e.getConvexTrianglePillar(q,N,!0),W.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(k=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,a,t,e,p)),p&&k))return!0;if(F.length-R>2)return}}boxHeightfield(t,e,s,n,i,o,r,a,l,d,p){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,p)}convexHeightfield(t,e,s,n,i,o,r,a,l,d,p){const h=e.data,f=e.elementSize,u=t.boundingSphereRadius,m=yi,v=mi,w=fi;W.pointToLocalFrame(n,o,s,w);let y=Math.floor((w.x-u)/f)-1,x=Math.ceil((w.x+u)/f)+1,g=Math.floor((w.y-u)/f)-1,E=Math.ceil((w.y+u)/f)+1;if(x<0||E<0||y>h.length||g>h[0].length)return;y<0&&(y=0),x<0&&(x=0),g<0&&(g=0),E<0&&(E=0),y>=h.length&&(y=h.length-1),x>=h.length&&(x=h.length-1),E>=h[0].length&&(E=h[0].length-1),g>=h[0].length&&(g=h[0].length-1);const M=[];e.getRectMinMax(y,g,x,E,M);const I=M[0],F=M[1];if(!(w.z-u>F||w.z+u<I))for(let q=y;q<x;q++)for(let N=g;N<E;N++){let R=!1;if(e.getConvexTrianglePillar(q,N,!1),W.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(R=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,a,null,null,p,v,null)),p&&R||(e.getConvexTrianglePillar(q,N,!0),W.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(R=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,a,null,null,p,v,null)),p&&R))return!0}}sphereParticle(t,e,s,n,i,o,r,a,l,d,p){const h=hi;if(h.set(0,0,1),n.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(p)return!0;const u=this.createContactEquation(a,r,e,t,l,d);h.normalize(),u.rj.copy(h),u.rj.scale(t.radius,u.rj),u.ni.copy(h),u.ni.negate(u.ni),u.ri.set(0,0,0),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,a,l,d,p){const h=ci;h.set(0,0,1),r.quaternion.vmult(h,h);const f=ai;if(n.vsub(r.position,f),h.dot(f)<=0){if(p)return!0;const m=this.createContactEquation(a,r,e,t,l,d);m.ni.copy(h),m.ni.negate(m.ni),m.ri.set(0,0,0);const v=li;h.scale(h.dot(n),v),n.vsub(v,v),m.rj.copy(v),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,a,l,d,p){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,p)}convexParticle(t,e,s,n,i,o,r,a,l,d,p){let h=-1;const f=ui,u=pi;let m=null;const v=di;if(v.copy(n),v.vsub(s,v),i.conjugate(He),He.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,y=t.faces.length;w!==y;w++){const x=[t.worldVertices[t.faces[w][0]]],g=t.worldFaceNormals[w];n.vsub(x[0],Ye);const E=-g.dot(Ye);if(m===null||Math.abs(E)<Math.abs(m)){if(p)return!0;m=E,h=w,f.copy(g)}}if(h!==-1){const w=this.createContactEquation(a,r,e,t,l,d);f.scale(m,u),u.vadd(n,u),u.vsub(s,u),w.rj.copy(u),f.negate(w.ni),w.ri.set(0,0,0);const y=w.ri,x=w.rj;y.vadd(n,y),y.vsub(a.position,y),x.vadd(s,x),x.vsub(r.position,x),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,a,l,d,p){return this.convexHeightfield(e,t,n,s,o,i,a,r,l,d,p)}particleCylinder(t,e,s,n,i,o,r,a,l,d,p){return this.convexParticle(e,t,n,s,o,i,a,r,l,d,p)}sphereTrimesh(t,e,s,n,i,o,r,a,l,d,p){const h=En,f=Cn,u=zn,m=Mn,v=Sn,w=An,y=Nn,x=bn,g=xn,E=Fn;W.pointToLocalFrame(n,o,s,v);const M=t.radius;y.lowerBound.set(v.x-M,v.y-M,v.z-M),y.upperBound.set(v.x+M,v.y+M,v.z+M),e.getTrianglesInAABB(y,E);const I=gn,F=t.radius*t.radius;for(let b=0;b<E.length;b++)for(let T=0;T<3;T++)if(e.getVertex(e.indices[E[b]*3+T],I),I.vsub(v,g),g.lengthSquared()<=F){if(x.copy(I),W.pointToWorldFrame(n,o,x,I),I.vsub(s,g),p)return!0;let S=this.createContactEquation(r,a,t,e,l,d);S.ni.copy(g),S.ni.normalize(),S.ri.copy(S.ni),S.ri.scale(t.radius,S.ri),S.ri.vadd(s,S.ri),S.ri.vsub(r.position,S.ri),S.rj.copy(I),S.rj.vsub(a.position,S.rj),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult)}for(let b=0;b<E.length;b++)for(let T=0;T<3;T++){e.getVertex(e.indices[E[b]*3+T],h),e.getVertex(e.indices[E[b]*3+(T+1)%3],f),f.vsub(h,u),v.vsub(f,w);const S=w.dot(u);v.vsub(h,w);let C=w.dot(u);if(C>0&&S<0&&(v.vsub(h,w),m.copy(u),m.normalize(),C=w.dot(m),m.scale(C,w),w.vadd(h,w),w.distanceTo(v)<t.radius)){if(p)return!0;const _=this.createContactEquation(r,a,t,e,l,d);w.vsub(v,_.ni),_.ni.normalize(),_.ni.scale(t.radius,_.ri),_.ri.vadd(s,_.ri),_.ri.vsub(r.position,_.ri),W.pointToWorldFrame(n,o,w,w),w.vsub(a.position,_.rj),W.vectorToWorldFrame(o,_.ni,_.ni),W.vectorToWorldFrame(o,_.ri,_.ri),this.result.push(_),this.createFrictionEquationsFromContact(_,this.frictionResult)}}const q=Tn,N=Pn,R=In,k=wn;for(let b=0,T=E.length;b!==T;b++){e.getTriangleVertices(E[b],q,N,R),e.getNormal(E[b],k),v.vsub(q,w);let S=w.dot(k);if(k.scale(S,w),v.vsub(w,w),S=w.distanceTo(v),U.pointInTriangle(w,q,N,R)&&S<t.radius){if(p)return!0;let C=this.createContactEquation(r,a,t,e,l,d);w.vsub(v,C.ni),C.ni.normalize(),C.ni.scale(t.radius,C.ri),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),W.pointToWorldFrame(n,o,w,w),w.vsub(a.position,C.rj),W.vectorToWorldFrame(o,C.ni,C.ni),W.vectorToWorldFrame(o,C.ri,C.ri),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult)}}E.length=0}planeTrimesh(t,e,s,n,i,o,r,a,l,d,p){const h=new c,f=yn;f.set(0,0,1),i.vmult(f,f);for(let u=0;u<e.vertices.length/3;u++){e.getVertex(u,h);const m=new c;m.copy(h),W.pointToWorldFrame(n,o,m,h);const v=mn;if(h.vsub(s,v),f.dot(v)<=0){if(p)return!0;const y=this.createContactEquation(r,a,t,e,l,d);y.ni.copy(f);const x=vn;f.scale(v.dot(f),x),h.vsub(x,x),y.ri.copy(x),y.ri.vsub(r.position,y.ri),y.rj.copy(h),y.rj.vsub(a.position,y.rj),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}}}}const Ct=new c,Mt=new c,St=new c,dn=new c,un=new c,pn=new Y,fn=new Y,yn=new c,mn=new c,vn=new c,wn=new c,xn=new c;new c;const gn=new c,bn=new c,En=new c,Cn=new c,zn=new c,Mn=new c,Sn=new c,An=new c,Tn=new c,Pn=new c,In=new c,Nn=new nt,Fn=[],Ht=new c,Ge=new c,Bn=new c,Rn=new c,qn=new c;function _n(z,t,e){let s=null;const n=z.length;for(let i=0;i!==n;i++){const o=z[i],r=Bn;z[(i+1)%n].vsub(o,r);const a=Rn;r.cross(t,a);const l=qn;e.vsub(o,l);const d=a.dot(l);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const Yt=new c,Ln=new c,On=new c,kn=new c,Vn=[new c,new c,new c,new c,new c,new c],Wn=new c,jn=new c,Dn=new c,Gn=new c,Hn=new c,Yn=new c,$n=new c,Un=new c,Xn=new c,Kn=new c,Zn=new c,Jn=new c,Qn=new c,ti=new c;new c,new c;const ei=new c,si=new c,ni=new c,ii=new c,oi=new c,ri=new c,ci=new c,ai=new c,li=new c,hi=new c,He=new Y,di=new c;new c;const ui=new c,Ye=new c,pi=new c,fi=new c,yi=new c,mi=[0],vi=new c,wi=new c;class $e{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let a=0;a<i;a++){let l=!1;const d=s[a];for(;d>n[r];)r++;l=d===n[r],l||Ue(t,d)}r=0;for(let a=0;a<o;a++){let l=!1;const d=n[a];for(;d>s[r];)r++;l=s[r]===d,l||Ue(e,d)}}}function Ue(z,t){z.push((t&4294901760)>>16,t&65535)}const oe=(z,t)=>z<t?`${z}-${t}`:`${t}-${z}`;class xi{constructor(){this.data={keys:[]}}get(t,e){const s=oe(t,e);return this.data[s]}set(t,e,s){const n=oe(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=oe(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class gi extends Ce{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new c,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new c,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new Ts,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new nn,this.constraints=[],this.narrowphase=new hn(this),this.collisionMatrix=new Ee,this.collisionMatrixPrevious=new Ee,this.bodyOverlapKeeper=new $e,this.shapeOverlapKeeper=new $e,this.contactmaterials=[],this.contactMaterialTable=new xi,this.defaultMaterial=new Rt("default"),this.defaultContactMaterial=new Bt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Vt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=U.ALL,s.from=t,s.to=e,s.callback=n,re.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=U.ANY,s.from=t,s.to=e,s.result=n,re.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=U.CLOSEST,s.from=t,s.to=e,s.result=n,re.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof A&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=X.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=X.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(X.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const a=this.bodies[r];a.previousPosition.lerp(a.position,o,a.interpolatedPosition),a.previousQuaternion.slerp(a.quaternion,o,a.interpolatedQuaternion),a.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=Mi,n=Si,i=this.bodies.length,o=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,d=this.profile,p=A.DYNAMIC;let h=-1/0;const f=this.constraints,u=zi;a.length();const m=a.x,v=a.y,w=a.z;let y=0;for(l&&(h=X.now()),y=0;y!==i;y++){const b=o[y];if(b.type===p){const T=b.force,S=b.mass;T.x+=S*m,T.y+=S*v,T.z+=S*w}}for(let b=0,T=this.subsystems.length;b!==T;b++)this.subsystems[b].update();l&&(h=X.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),l&&(d.broadphase=X.now()-h);let x=f.length;for(y=0;y!==x;y++){const b=f[y];if(!b.collideConnected)for(let T=s.length-1;T>=0;T-=1)(b.bodyA===s[T]&&b.bodyB===n[T]||b.bodyB===s[T]&&b.bodyA===n[T])&&(s.splice(T,1),n.splice(T,1))}this.collisionMatrixTick(),l&&(h=X.now());const g=Ci,E=e.length;for(y=0;y!==E;y++)g.push(e[y]);e.length=0;const M=this.frictionEquations.length;for(y=0;y!==M;y++)u.push(this.frictionEquations[y]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,g,this.frictionEquations,u),l&&(d.narrowphase=X.now()-h),l&&(h=X.now()),y=0;y<this.frictionEquations.length;y++)r.addEquation(this.frictionEquations[y]);const I=e.length;for(let b=0;b!==I;b++){const T=e[b],S=T.bi,C=T.bj,G=T.si,_=T.sj;let V;if(S.material&&C.material?V=this.getContactMaterial(S.material,C.material)||this.defaultContactMaterial:V=this.defaultContactMaterial,V.friction,S.material&&C.material&&(S.material.friction>=0&&C.material.friction>=0&&S.material.friction*C.material.friction,S.material.restitution>=0&&C.material.restitution>=0&&(T.restitution=S.material.restitution*C.material.restitution)),r.addEquation(T),S.allowSleep&&S.type===A.DYNAMIC&&S.sleepState===A.SLEEPING&&C.sleepState===A.AWAKE&&C.type!==A.STATIC){const st=C.velocity.lengthSquared()+C.angularVelocity.lengthSquared(),J=C.sleepSpeedLimit**2;st>=J*2&&(S.wakeUpAfterNarrowphase=!0)}if(C.allowSleep&&C.type===A.DYNAMIC&&C.sleepState===A.SLEEPING&&S.sleepState===A.AWAKE&&S.type!==A.STATIC){const st=S.velocity.lengthSquared()+S.angularVelocity.lengthSquared(),J=S.sleepSpeedLimit**2;st>=J*2&&(C.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(S,C,!0),this.collisionMatrixPrevious.get(S,C)||(qt.body=C,qt.contact=T,S.dispatchEvent(qt),qt.body=S,C.dispatchEvent(qt)),this.bodyOverlapKeeper.set(S.id,C.id),this.shapeOverlapKeeper.set(G.id,_.id)}for(this.emitContactEvents(),l&&(d.makeContactConstraints=X.now()-h,h=X.now()),y=0;y!==i;y++){const b=o[y];b.wakeUpAfterNarrowphase&&(b.wakeUp(),b.wakeUpAfterNarrowphase=!1)}for(x=f.length,y=0;y!==x;y++){const b=f[y];b.update();for(let T=0,S=b.equations.length;T!==S;T++){const C=b.equations[T];r.addEquation(C)}}r.solve(t,this),l&&(d.solve=X.now()-h),r.removeAllEquations();const F=Math.pow;for(y=0;y!==i;y++){const b=o[y];if(b.type&p){const T=F(1-b.linearDamping,t),S=b.velocity;S.scale(T,S);const C=b.angularVelocity;if(C){const G=F(1-b.angularDamping,t);C.scale(G,C)}}}this.dispatchEvent(Ei),l&&(h=X.now());const N=this.stepnumber%(this.quatNormalizeSkip+1)===0,R=this.quatNormalizeFast;for(y=0;y!==i;y++)o[y].integrate(t,N,R);this.clearForces(),this.broadphase.dirty=!0,l&&(d.integrate=X.now()-h),this.stepnumber+=1,this.dispatchEvent(bi);let k=!0;if(this.allowSleep)for(k=!1,y=0;y!==i;y++){const b=o[y];b.sleepTick(this.time),b.sleepState!==A.SLEEPING&&(k=!0)}this.hasActiveBodies=k}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(pt,ft),t){for(let i=0,o=pt.length;i<o;i+=2)_t.bodyA=this.getBodyById(pt[i]),_t.bodyB=this.getBodyById(pt[i+1]),this.dispatchEvent(_t);_t.bodyA=_t.bodyB=null}if(e){for(let i=0,o=ft.length;i<o;i+=2)Lt.bodyA=this.getBodyById(ft[i]),Lt.bodyB=this.getBodyById(ft[i+1]),this.dispatchEvent(Lt);Lt.bodyA=Lt.bodyB=null}pt.length=ft.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(pt,ft),s){for(let i=0,o=pt.length;i<o;i+=2){const r=this.getShapeById(pt[i]),a=this.getShapeById(pt[i+1]);yt.shapeA=r,yt.shapeB=a,r&&(yt.bodyA=r.body),a&&(yt.bodyB=a.body),this.dispatchEvent(yt)}yt.bodyA=yt.bodyB=yt.shapeA=yt.shapeB=null}if(n){for(let i=0,o=ft.length;i<o;i+=2){const r=this.getShapeById(ft[i]),a=this.getShapeById(ft[i+1]);mt.shapeA=r,mt.shapeB=a,r&&(mt.bodyA=r.body),a&&(mt.bodyB=a.body),this.dispatchEvent(mt)}mt.bodyA=mt.bodyB=mt.shapeA=mt.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new nt;const re=new U,X=globalThis.performance||{};if(!X.now){let z=Date.now();X.timing&&X.timing.navigationStart&&(z=X.timing.navigationStart),X.now=()=>Date.now()-z}new c;const bi={type:"postStep"},Ei={type:"preStep"},qt={type:A.COLLIDE_EVENT_NAME,body:null,contact:null},Ci=[],zi=[],Mi=[],Si=[],pt=[],ft=[],_t={type:"beginContact",bodyA:null,bodyB:null},Lt={type:"endContact",bodyA:null,bodyB:null},yt={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},mt={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};let j,vt;const ht={COILER:1,ROPE:2,ROPE_SEGMENT:4,ANCHOR:8};let $t=35,Xe=.012,Ai=.25,ce=.012,L=[],H,et,Z,O,dt,ut,At=8,Ot=0,ae=1,xt=0,Tt=!1,Ke=400,kt=0,gt=new Set,Ut=0,Q=null,K="100-10";const le=1/60,Ze=4,Ti={"100-10":Math.PI/18.9,"100-99":Math.PI/15.498,"100-200":Math.PI/10.505},Pi=40,he=.04;let Ii=!0,Je=new Map,Pt=0,it=0,de=new Map,Ni=[],ue=[],pe=500,fe=3e4;const ye=.85,Fi=.05;function Bi(){j=new gi({gravity:new c(0,-9.81,0)}),vt=new Rt("defaultMaterial"),j.defaultContactMaterial=new Bt(vt,vt,{friction:.8,restitution:.01,contactEquationStiffness:5e5,contactEquationRelaxation:5,frictionEquationStiffness:5e5*1.5,frictionEquationRelaxation:5}),j.defaultMaterial=vt,H=new A({mass:0}),H.position.set(.57,.225+.2,.025),H.type=$.KINEMATIC,j.addBody(H),et=new A({mass:0}),et.position.set(-.6,.27,-.058),et.type=$.STATIC,j.addBody(et),Z=new A({mass:0}),Z.position.set(0,.3,.03),Z.type=$.STATIC,j.addBody(Z),gt=new Set}function me(){if(!O||!H)return;const z=Q==null?void 0:Q[K];if(!z)return;const t=z.radius;H.position.x=O.position.x,H.position.y=O.position.y+t+Fi,H.position.z=O.position.z,console.log(`Positioned end anchor at top of coiler: (${H.position.x.toFixed(3)}, ${H.position.y.toFixed(3)}, ${H.position.z.toFixed(3)})`)}function Ri(){Qe(),me();for(let s=0;s<$t;s++){const n=new ie(Xe/2);let i,o,r;if(s<=At){const l=s/At;i=et.position.x+l*(Z.position.x-et.position.x),o=et.position.y+l*(Z.position.y-et.position.y),r=et.position.z+l*(Z.position.z-et.position.z),o+=Math.sin(l*Math.PI)*.05}else{const l=(s-At)/($t-At-1);i=Z.position.x+l*(H.position.x-Z.position.x);const d=Math.sin(l*Math.PI)*.15;o=Z.position.y+l*(H.position.y-Z.position.y)+d,r=Z.position.z+l*(H.position.z-Z.position.z)}const a=new A({mass:Ai,shape:n,position:new c(i,o,r),material:vt,collisionFilterGroup:ht.ROPE|ht.ROPE_SEGMENT,collisionFilterMask:ht.COILER|ht.ROPE_SEGMENT});a.type=$.DYNAMIC,a.angularDamping=.97,a.linearDamping=.97,j.addBody(a),L.push(a)}for(let s=0;s<$t-1;s++){const n=new Et(L[s],L[s+1],ce*ye,fe);n.collideConnected=!1,n.maxForce=pe,j.addConstraint(n)}const z=new Et(Z,L[At],0);j.addConstraint(z);const t=new Et(et,L[0],0);j.addConstraint(t);const e=new Et(H,L[$t-1],0);j.addConstraint(e)}function Qe(z=!1){var t;try{Tt=!1,Ut=0,Pt=0,it=0,de?de.clear():de=new Map,Je.clear();for(let e=((t=j==null?void 0:j.constraints)==null?void 0:t.length)-1;e>=0;e--)j.constraints[e]instanceof Et&&j.removeConstraint(j.constraints[e]);for(let e=0;e<L.length;e++)j.removeBody(L[e]);L.length=0,Ot=0,ae=1,xt=0,accumulator=0,physicsTime=0,z&&(coilerAngle=0,kt=0),Ni=[],gt.clear(),ue=[]}catch(e){console.error("Error in resetRope:",e)}}function qi(z,t,e,s,n){const i=le,o=Ze;Pt+=i,Ut++;const r=s*i;it===void 0&&(it=0),it+=r;for(let l=0;l<o;l++)j.step(i/o);_i(s),Li(),ts(r);const a=Ti[K]||Math.PI/12;return Math.abs(it-kt)>=a&&ki(Q,K,e,it)&&(kt=it,console.log(`Added segment for ${K} at angle: ${it.toFixed(3)} radians (${(it*180/Math.PI).toFixed(1)}°), increment: ${a.toFixed(4)}`)),{positions:Xt(),segmentCount:L.length,staticCount:gt.size,simulationTime:Pt,rotationAngle:it}}function _i(z){if(!O||Tt)return;const t=Q==null?void 0:Q[K];if(!t)return;const e=t.radius,s=O.position,n=Math.sign(z);for(let i=0;i<L.length;i++){const o=L[i];if(!o||o.type===$.STATIC)continue;const r=s.x-o.position.x,a=s.y-o.position.y,l=Math.sqrt(r*r+a*a),d=e*4;if(l>d)continue;const p=r/l,h=a/l,f=-h,u=p,m=e+.01,v=l-m,y=v*25;o.applyForce(new c(p*y,h*y,0),new c(0,0,0));const x=Math.abs(z)*11.4;o.applyForce(new c(f*x*n,u*x*n,0),new c(0,0,0)),Math.abs(v)<.1&&(o.velocity.scale(.8),o.angularVelocity.scale(.8))}}function Li(){if(!O||Tt||Ut<5)return;const z=Q==null?void 0:Q[K];if(!z)return;const t=z.radius,e=O.position;Ut%60===0&&console.log(`Current static segments: ${gt.size}/${L.length}`);for(let s=0;s<L.length;s++){const n=L[s];if(!n||n.type===$.STATIC||s===0||s===At)continue;const i=n.position.x-e.x,o=n.position.y-e.y,r=Math.sqrt(i*i+o*o),a=Math.abs(r-t);if(a<he){ue[s]||(ue[s]={pos:{x:n.position.x,y:n.position.y,z:n.position.z}},console.log(`Segment ${s} near coiler, dist: ${a.toFixed(4)}`));const l=i/r,d=o/r,h=r-t;let f=2;a>he*.5&&(f=4);const u=h*Pi*f;n.applyForce(new c(l*u,d*u,0),new c(0,0,0));const m=O.angularVelocity.z,v=-d,w=l,y=Math.abs(m)*14.25,x=Math.sign(m);n.applyForce(new c(v*y*x,w*y*x,0),new c(0,0,0)),n.velocity.scale(.8),n.angularVelocity.scale(.8),a<he*.25&&Oi(s)}}}function Oi(z){const t=L[z];if(!t||t.type===$.STATIC)return!1;try{const e=t.position.x-O.position.x,s=t.position.y-O.position.y,n=Math.atan2(s,e),i=Q==null?void 0:Q[K],o=(i==null?void 0:i.radius)||.18;return t.position.x=O.position.x+o*Math.cos(n),t.position.y=O.position.y+o*Math.sin(n),t.type=$.STATIC,t.mass=0,t.updateMassProperties(),t.velocity.set(0,0,0),t.angularVelocity.set(0,0,0),t.force.set(0,0,0),t.torque.set(0,0,0),t.userData={coilerAttachment:{angle:n,radius:o,z:t.position.z-O.position.z}},gt.add(z),Ii&&console.log(`Segment ${z} static at (${t.position.x.toFixed(3)}, ${t.position.y.toFixed(3)}), exactly on coiler surface`),!0}catch(e){return console.error(`Error making segment ${z} static:`,e),!1}}function ts(z){var e;if(!O||z===0)return;const t=z*.95;for(let s=0;s<L.length;s++){const n=L[s];if(!n||n.type!==$.STATIC||!((e=n.userData)!=null&&e.coilerAttachment))continue;const i=n.userData.coilerAttachment;i.angle+=t,n.position.x=O.position.x+i.radius*Math.cos(i.angle),n.position.y=O.position.y+i.radius*Math.sin(i.angle),n.position.z=O.position.z+i.z}}function ki(z,t,e,s){const n=e||(t==="100-200"?300:400);if(L.length>=n||L.length<11)return!1;try{const i=L[10],o=L[11];if(!i||!o)return!1;const r=new A({mass:.25,shape:new ie(Xe/2),position:new c(i.position.x,i.position.y,i.position.z),material:vt,collisionFilterGroup:ht.ROPE|ht.ROPE_SEGMENT,collisionFilterMask:ht.COILER|ht.ROPE_SEGMENT});r.type=$.DYNAMIC;const a=Ot;if(Je.set(r.id,a),r.userData={creationAngle:s,creationTime:Pt||0,creationIndex:a},Ot++,O){const f=O.position.x-i.position.x,u=O.position.y-i.position.y,v=Math.sqrt(f*f+u*u)>.5?1.2:.8;r.velocity.set(f*v,u*v,0)}r.linearDamping=.8,r.angularDamping=.8,j.addBody(r),j.constraints.forEach(f=>{(f.bodyA===i&&f.bodyB===o||f.bodyA===o&&f.bodyB===i)&&j.removeConstraint(f)}),Ot%30===0&&(ae*=-1),xt||(xt=0);const l=z[t];if(l){const f=(l.sideOffset1-l.sideOffset2)*.8,u=Math.sin(s*.5)*.3;xt+=ae*(f/50)*.9,xt+=u*.01;const m=f*.45;xt=Math.max(Math.min(xt,m),-m),r.position.z+=xt*.3}const d=L.slice(11);L.length=11,L.push(r),L.push(...d);const p=new Et(i,r,ce*ye,fe),h=new Et(r,L[12],ce*ye,fe);return p.collideConnected=!1,h.collideConnected=!1,p.maxForce=pe,h.maxForce=pe,j.addConstraint(p),j.addConstraint(h),console.log(`Created segment with index ${Ot}`),!0}catch(i){return console.error("Error adding segment:",i),!1}}function Vi(){Tt=!0,console.log("Finalizing rope - making ALL segments static");for(let z=0;z<L.length;z++){const t=L[z];if(t){if(t.type=$.STATIC,t.mass=0,t.updateMassProperties(),t.velocity.set(0,0,0),t.angularVelocity.set(0,0,0),t.force.set(0,0,0),t.torque.set(0,0,0),O){const e=t.position.x-O.position.x,s=t.position.y-O.position.y,n=Math.sqrt(e*e+s*s);if(n<O.shapes[0].radius*2){const i=Math.atan2(s,e);t.userData={coilerAttachment:{angle:i,radius:n,z:t.position.z-O.position.z}}}}gt.add(z)}}H&&(H.type=$.STATIC,H.updateMassProperties()),et&&(et.type=$.STATIC,et.updateMassProperties()),Z&&(Z.type=$.STATIC,Z.updateMassProperties()),console.log(`Finalized rope with ${gt.size} static segments out of ${L.length} total`)}function Wi(z,t,e){if(!H)return;H.position.set(z,t,e),H.velocity.set(0,0,0),H.angularVelocity.set(0,0,0);const s=Math.min(10,L.length);for(let n=L.length-s;n<L.length;n++)L[n]&&(L[n].velocity.scale(.9),L[n].angularVelocity.scale(.9))}function ji(z){O&&(O.angularVelocity.set(0,0,z),dt&&dt.angularVelocity.set(0,0,z),ut&&ut.angularVelocity.set(0,0,z))}function Di(z,t){const e=t&&K!==t;Q=z,K=t||K,e&&(it=0,kt=0,console.log(`Coiler type changed to ${K}, reset angle tracking`));const s=z[K];if(!s)return console.error("Invalid coiler type:",K),null;const n=s.radius,i=s.height;O&&j.removeBody(O),O=new A({mass:0,type:$.KINEMATIC,material:vt,collisionFilterGroup:ht.COILER,collisionFilterMask:ht.ROPE});const o=new De(n,n,i,16);O.addShape(o,new c(0,0,0),new Y().setFromAxisAngle(new c(1,0,0),Math.PI/2));const r=n*.03,a=6;for(let l=0;l<32;l++){const d=l/32*Math.PI*2*a,p=l/32*i-i/2,h=n*.97*Math.cos(d),f=n*.97*Math.sin(d),u=new ie(r);O.addShape(u,new c(h,f,p))}return O.position.set(.57,.225,s.zOffset),j.addBody(O),me(),O}function Gi(z,t){dt&&(j.removeBody(dt),dt=null),ut&&(j.removeBody(ut),ut=null);const e=z[K];if(!e)return null;const s=e.radius,n=e.height,i=K==="100-10"?2:K==="100-99"?2.1:2.2,o=new De(s*i,s*i,n/10,16);return dt=new A({mass:0,type:$.KINEMATIC,shape:o,material:vt}),dt.position.set(.57,.225,e.sideOffset1),dt.quaternion.setFromEuler(Math.PI/2,0,0),j.addBody(dt),ut=new A({mass:0,type:$.KINEMATIC,shape:o,material:vt}),ut.position.set(.57,.225,e.sideOffset2),ut.quaternion.setFromEuler(Math.PI/2,0,0),j.addBody(ut),{side1:dt,side2:ut}}function Xt(){return L.map(z=>!z||!z.position?null:{x:z.position.x,y:z.position.y,z:z.position.z}).filter(z=>z!==null)}self.onmessage=function(z){try{const{type:t,data:e}=z.data;switch(t){case"init":Bi(),self.postMessage({type:"initialized"});break;case"resetRope":Pt=0,it=0,kt=0,Qe(e==null?void 0:e.resetAngle),Tt=!1,self.postMessage({type:"ropeReset"});break;case"createCoiler":Q=e.coilerConfig,K=e.activeCoilerType,Ke=K==="100-200"?300:400,Di(e.coilerConfig,e.activeCoilerType),Gi(e.coilerConfig,e.activeCoilerType),me(),self.postMessage({type:"coilerCreated"});break;case"createRope":Ri();const s=Xt();self.postMessage({type:"ropeCreated",positions:s});break;case"step":if(Tt){e.rotationSpeed!==0&&ts(e.rotationSpeed*le),self.postMessage({type:"stepped",positions:Xt(),count:L.length,staticCount:gt.size,simulationTime:Pt});break}const n=qi(le,Ze,Ke,e.rotationSpeed,e.rotationAngle);self.postMessage({type:"stepped",positions:n.positions,count:n.segmentCount,staticCount:n.staticCount,simulationTime:n.simulationTime,rotationAngle:n.rotationAngle});break;case"updateAnchor":Wi(e.x,e.y,e.z);break;case"setRotation":ji(e.rotationSpeed);break;case"finalizeRope":Vi(),self.postMessage({type:"ropeFinalized",positions:Xt()});break;default:break}}catch(t){console.error("Worker error:",t),self.postMessage({type:"error",error:t.toString()})}}})();
