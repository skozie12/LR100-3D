(function(){"use strict";class nt{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new l);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new l);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new nt);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],c=s[2],a=s[3],d=s[4],u=s[5],h=s[6],f=s[7],p=s[8],v=n[0],y=n[1],w=n[2],m=n[3],x=n[4],g=n[5],b=n[6],z=n[7],N=n[8];return i[0]=o*v+r*m+c*b,i[1]=o*y+r*x+c*z,i[2]=o*w+r*g+c*N,i[3]=a*v+d*m+u*b,i[4]=a*y+d*x+u*z,i[5]=a*w+d*g+u*N,i[6]=h*v+f*m+p*b,i[7]=h*y+f*x+p*z,i[8]=h*w+f*g+p*N,e}scale(t,e){e===void 0&&(e=new nt);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new l);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let c=3;const a=c;let d;const u=4;let h;do{if(o=a-c,i[o+n*o]===0){for(r=o+1;r<a;r++)if(i[o+n*r]!==0){d=u;do h=u-d,i[h+n*o]+=i[h+n*r];while(--d);break}}if(i[o+n*o]!==0)for(r=o+1;r<a;r++){const f=i[o+n*r]/i[o+n*o];d=u;do h=u-d,i[h+n*r]=h<=o?0:i[h+n*r]-i[h+n*o]*f;while(--d)}}while(--c);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new nt);const e=3,s=6,n=$e;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const c=r;let a;const d=s;let u;do{if(i=c-r,n[i+s*i]===0){for(o=i+1;o<c;o++)if(n[i+s*o]!==0){a=d;do u=d-a,n[u+s*i]+=n[u+s*o];while(--a);break}}if(n[i+s*i]!==0)for(o=i+1;o<c;o++){const h=n[i+s*o]/n[i+s*i];a=d;do u=d-a,n[u+s*o]=u<=i?0:n[u+s*o]-n[u+s*i]*h;while(--a)}}while(--r);i=2;do{o=i-1;do{const h=n[i+s*o]/n[i+s*i];a=s;do u=s-a,n[u+s*o]=n[u+s*o]-n[u+s*i]*h;while(--a)}while(o--)}while(--i);i=2;do{const h=1/n[i+s*i];a=s;do u=s-a,n[u+s*i]=n[u+s*i]*h;while(--a)}while(i--);i=2;do{o=2;do{if(u=n[e+o+s*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,c=n+n,a=e*o,d=e*r,u=e*c,h=s*r,f=s*c,p=n*c,v=i*o,y=i*r,w=i*c,m=this.elements;return m[3*0+0]=1-(h+p),m[3*0+1]=d-w,m[3*0+2]=u+y,m[3*1+0]=d+w,m[3*1+1]=1-(a+p),m[3*1+2]=f-v,m[3*2+0]=u-y,m[3*2+1]=f+v,m[3*2+2]=1-(a+h),this}transpose(t){t===void 0&&(t=new nt);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const $e=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class l{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new l);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z;return e.x=r*i-c*n,e.y=c*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new l(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new l(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new nt([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new l);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new l);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new l),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new l),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new l),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=Xe,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=Ke;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(de),de.almostEquals(t,e)}clone(){return new l(this.x,this.y,this.z)}}l.ZERO=new l(0,0,0),l.UNIT_X=new l(1,0,0),l.UNIT_Y=new l(0,1,0),l.UNIT_Z=new l(0,0,1);const Xe=new l,Ke=new l,de=new l;class tt{constructor(t){t===void 0&&(t={}),this.lowerBound=new l,this.upperBound=new l,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let c=1;c<t.length;c++){let a=t[c];r&&(r.vmult(a,ue),a=ue),a.x>o.x&&(o.x=a.x),a.x<i.x&&(i.x=a.x),a.y>o.y&&(o.y=a.y),a.y<i.y&&(i.y=a.y),a.z>o.z&&(o.z=a.z),a.z<i.z&&(i.z=a.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new tt().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,c=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&c}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,c){const a=this.lowerBound,d=this.upperBound;t.copy(a),e.set(d.x,a.y,a.z),s.set(d.x,d.y,a.z),n.set(a.x,d.y,d.z),i.set(d.x,a.y,d.z),o.set(a.x,d.y,a.z),r.set(a.x,a.y,d.z),c.copy(d)}toLocalFrame(t,e){const s=pe,n=s[0],i=s[1],o=s[2],r=s[3],c=s[4],a=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,c,a,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=pe,n=s[0],i=s[1],o=s[2],r=s[3],c=s[4],a=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,c,a,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,c=(this.upperBound.x-s.x)*n,a=(this.lowerBound.y-s.y)*i,d=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,c),Math.min(a,d)),Math.min(u,h)),p=Math.min(Math.min(Math.max(r,c),Math.max(a,d)),Math.max(u,h));return!(p<0||f>p)}}const ue=new l,pe=[new l,new l,new l,new l,new l,new l,new l,new l];class fe{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class me{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class H{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new l),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=Ze,n=Je;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new H);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,c=t.y,a=t.z,d=t.w;return e.x=s*d+o*r+n*a-i*c,e.y=n*d+o*c+i*r-s*a,e.z=i*d+o*a+s*c-n*r,e.w=o*d-s*r-n*c-i*a,e}inverse(t){t===void 0&&(t=new H);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new H),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new l);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z,a=this.w,d=a*s+r*i-c*n,u=a*n+c*s-o*i,h=a*i+o*n-r*s,f=-o*s-r*n-c*i;return e.x=d*a+f*-o+u*-c-h*-r,e.y=u*a+f*-r+h*-o-d*-c,e.z=h*a+f*-c+d*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,c=this.z,a=this.w;switch(e){case"YZX":const d=o*r+c*a;if(d>.499&&(s=2*Math.atan2(o,a),n=Math.PI/2,i=0),d<-.499&&(s=-2*Math.atan2(o,a),n=-Math.PI/2,i=0),s===void 0){const u=o*o,h=r*r,f=c*c;s=Math.atan2(2*r*a-2*o*c,1-2*h-2*f),n=Math.asin(2*d),i=Math.atan2(2*o*a-2*r*c,1-2*u-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),c=Math.sin(t/2),a=Math.sin(e/2),d=Math.sin(s/2);return n==="XYZ"?(this.x=c*o*r+i*a*d,this.y=i*a*r-c*o*d,this.z=i*o*d+c*a*r,this.w=i*o*r-c*a*d):n==="YXZ"?(this.x=c*o*r+i*a*d,this.y=i*a*r-c*o*d,this.z=i*o*d-c*a*r,this.w=i*o*r+c*a*d):n==="ZXY"?(this.x=c*o*r-i*a*d,this.y=i*a*r+c*o*d,this.z=i*o*d+c*a*r,this.w=i*o*r-c*a*d):n==="ZYX"?(this.x=c*o*r-i*a*d,this.y=i*a*r+c*o*d,this.z=i*o*d-c*a*r,this.w=i*o*r+c*a*d):n==="YZX"?(this.x=c*o*r+i*a*d,this.y=i*a*r+c*o*d,this.z=i*o*d-c*a*r,this.w=i*o*r-c*a*d):n==="XZY"&&(this.x=c*o*r-i*a*d,this.y=i*a*r-c*o*d,this.z=i*o*d+c*a*r,this.w=i*o*r+c*a*d),this}clone(){return new H(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new H);const n=this.x,i=this.y,o=this.z,r=this.w;let c=t.x,a=t.y,d=t.z,u=t.w,h,f,p,v,y;return f=n*c+i*a+o*d+r*u,f<0&&(f=-f,c=-c,a=-a,d=-d,u=-u),1-f>1e-6?(h=Math.acos(f),p=Math.sin(h),v=Math.sin((1-e)*h)/p,y=Math.sin(e*h)/p):(v=1-e,y=e),s.x=v*n+y*c,s.y=v*i+y*a,s.z=v*o+y*d,s.w=v*r+y*u,s}integrate(t,e,s,n){n===void 0&&(n=new H);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,c=this.x,a=this.y,d=this.z,u=this.w,h=e*.5;return n.x+=h*(i*u+o*d-r*a),n.y+=h*(o*u+r*c-i*d),n.z+=h*(r*u+i*a-o*c),n.w+=h*(-i*c-o*a-r*d),n}}const Ze=new l,Je=new l,Qe={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class I{constructor(t){t===void 0&&(t={}),this.id=I.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}I.idCounter=0,I.types=Qe;class V{constructor(t){t===void 0&&(t={}),this.position=new l,this.quaternion=new H,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return V.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return V.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new l),s.vsub(t,n),e.conjugate(ye),ye.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new l),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new l),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new l),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const ye=new H;class Ct extends I{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:I.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new l;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let c=0;c!==r;c++){const a=(c+1)%r;e[o[c]].vsub(e[o[a]],n),n.normalize();let d=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){d=!0;break}d||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new l;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];Ct.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new l,o=new l;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,c,a){const d=new l;let u=-1,h=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){d.copy(s.faceNormals[p]),i.vmult(d,d);const v=d.dot(o);v>h&&(h=v,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const v=s.vertices[s.faces[u][p]],y=new l;y.copy(v),i.vmult(y,y),n.vadd(y,y),f.push(y)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,c,a)}findSeparatingAxis(t,e,s,n,i,o,r,c){const a=new l,d=new l,u=new l,h=new l,f=new l,p=new l;let v=Number.MAX_VALUE;const y=this;if(y.uniqueAxes)for(let w=0;w!==y.uniqueAxes.length;w++){s.vmult(y.uniqueAxes[w],a);const m=y.testSepAxis(a,t,e,s,n,i);if(m===!1)return!1;m<v&&(v=m,o.copy(a))}else{const w=r?r.length:y.faces.length;for(let m=0;m<w;m++){const x=r?r[m]:m;a.copy(y.faceNormals[x]),s.vmult(a,a);const g=y.testSepAxis(a,t,e,s,n,i);if(g===!1)return!1;g<v&&(v=g,o.copy(a))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],d);const m=y.testSepAxis(d,t,e,s,n,i);if(m===!1)return!1;m<v&&(v=m,o.copy(d))}else{const w=c?c.length:t.faces.length;for(let m=0;m<w;m++){const x=c?c[m]:m;d.copy(t.faceNormals[x]),i.vmult(d,d);const g=y.testSepAxis(d,t,e,s,n,i);if(g===!1)return!1;g<v&&(v=g,o.copy(d))}}for(let w=0;w!==y.uniqueEdges.length;w++){s.vmult(y.uniqueEdges[w],h);for(let m=0;m!==t.uniqueEdges.length;m++)if(i.vmult(t.uniqueEdges[m],f),h.cross(f,p),!p.almostZero()){p.normalize();const x=y.testSepAxis(p,t,e,s,n,i);if(x===!1)return!1;x<v&&(v=x,o.copy(p))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;Ct.project(r,t,s,n,Yt),Ct.project(e,t,i,o,Ut);const c=Yt[0],a=Yt[1],d=Ut[0],u=Ut[1];if(c<u||d<a)return!1;const h=c-u,f=d-a;return h<f?h:f}calculateLocalInertia(t,e){const s=new l,n=new l;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const c=new l,a=new l,d=new l,u=new l,h=new l,f=new l,p=new l,v=new l,y=this,w=[],m=n,x=w;let g=-1,b=Number.MAX_VALUE;for(let B=0;B<y.faces.length;B++){c.copy(y.faceNormals[B]),s.vmult(c,c);const q=c.dot(t);q<b&&(b=q,g=B)}if(g<0)return;const z=y.faces[g];z.connectedFaces=[];for(let B=0;B<y.faces.length;B++)for(let q=0;q<y.faces[B].length;q++)z.indexOf(y.faces[B][q])!==-1&&B!==g&&z.connectedFaces.indexOf(B)===-1&&z.connectedFaces.push(B);const N=z.length;for(let B=0;B<N;B++){const q=y.vertices[z[B]],O=y.vertices[z[(B+1)%N]];q.vsub(O,a),d.copy(a),s.vmult(d,d),e.vadd(d,d),u.copy(this.faceNormals[g]),s.vmult(u,u),e.vadd(u,u),d.cross(u,h),h.negate(h),f.copy(q),s.vmult(f,f),e.vadd(f,f);const E=z.connectedFaces[B];p.copy(this.faceNormals[E]);const T=this.getPlaneConstantOfFace(E);v.copy(p),s.vmult(v,v);const S=T-v.dot(e);for(this.clipFaceAgainstPlane(m,x,v,S);m.length;)m.shift();for(;x.length;)m.push(x.shift())}p.copy(this.faceNormals[g]);const F=this.getPlaneConstantOfFace(g);v.copy(p),s.vmult(v,v);const _=F-v.dot(e);for(let B=0;B<m.length;B++){let q=v.dot(m[B])+_;if(q<=i&&(console.log(`clamped: depth=${q} to minDist=${i}`),q=i),q<=o){const O=m[B];if(q<=1e-6){const E={point:O,normal:v,depth:q};r.push(E)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let c=t[t.length-1],a=t[0];i=s.dot(c)+n;for(let d=0;d<r;d++){if(a=t[d],o=s.dot(a)+n,i<0)if(o<0){const u=new l;u.copy(a),e.push(u)}else{const u=new l;c.lerp(a,i/(i-o),u),e.push(u)}else if(o<0){const u=new l;c.lerp(a,i/(i-o),u),e.push(u),e.push(a)}c=a,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new l);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new l);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,c,a,d,u,h=new l;for(let f=0;f<i.length;f++){h.copy(i[f]),e.vmult(h,h),t.vadd(h,h);const p=h;(o===void 0||p.x<o)&&(o=p.x),(a===void 0||p.x>a)&&(a=p.x),(r===void 0||p.y<r)&&(r=p.y),(d===void 0||p.y>d)&&(d=p.y),(c===void 0||p.z<c)&&(c=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,c),n.set(a,d,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new l);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=new l;this.getAveragePointLocal(i);for(let o=0;o<this.faces.length;o++){let r=n[o];const c=e[s[o][0]],a=new l;t.vsub(c,a);const d=r.dot(a),u=new l;i.vsub(c,u);const h=r.dot(u);if(d<0&&h>0||d>0&&h<0)return!1}return-1}static project(t,e,s,n,i){const o=t.vertices.length,r=ts;let c=0,a=0;const d=es,u=t.vertices;d.setZero(),V.vectorToLocalFrame(s,n,e,r),V.pointToLocalFrame(s,n,d,d);const h=d.dot(r);a=c=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>c&&(c=p),p<a&&(a=p)}if(a-=h,c-=h,a>c){const f=a;a=c,c=f}i[0]=c,i[1]=a}}const Yt=[],Ut=[];new l;const ts=new l,es=new l;class $t extends I{constructor(t){super({type:I.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=l,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],c=new Ct({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=c,c.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new l),$t.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)wt.set(i[o][0],i[o][1],i[o][2]),e.vmult(wt,wt),t.vadd(wt,wt),s(wt.x,wt.y,wt.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;ot[0].set(i.x,i.y,i.z),ot[1].set(-i.x,i.y,i.z),ot[2].set(-i.x,-i.y,i.z),ot[3].set(-i.x,-i.y,-i.z),ot[4].set(i.x,-i.y,-i.z),ot[5].set(i.x,i.y,-i.z),ot[6].set(-i.x,i.y,-i.z),ot[7].set(i.x,-i.y,i.z);const o=ot[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const c=ot[r];e.vmult(c,c),t.vadd(c,c);const a=c.x,d=c.y,u=c.z;a>n.x&&(n.x=a),d>n.y&&(n.y=d),u>n.z&&(n.z=u),a<s.x&&(s.x=a),d<s.y&&(s.y=d),u<s.z&&(s.z=u)}}}const wt=new l,ot=[new l,new l,new l,new l,new l,new l,new l,new l],X={DYNAMIC:1,STATIC:2,KINEMATIC:4},Xt={AWAKE:0,SLEEPY:1,SLEEPING:2};class M extends me{constructor(t){t===void 0&&(t={}),super(),this.id=M.idCounter++,this.index=-1,this.world=null,this.vlambda=new l,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new l,this.previousPosition=new l,this.interpolatedPosition=new l,this.initPosition=new l,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new l,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new l,this.force=new l;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?M.STATIC:M.DYNAMIC,typeof t.type==typeof M.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=M.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new l,this.quaternion=new H,this.initQuaternion=new H,this.previousQuaternion=new H,this.interpolatedQuaternion=new H,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new l,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new l,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new l,this.invInertia=new l,this.invInertiaWorld=new nt,this.invMassSolve=0,this.invInertiaSolve=new l,this.invInertiaWorldSolve=new nt,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new l(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new l(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new tt,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new l,this.isTrigger=!!t.isTrigger,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=M.AWAKE,this.wakeUpAfterNarrowphase=!1,t===M.SLEEPING&&this.dispatchEvent(M.wakeupEvent)}sleep(){this.sleepState=M.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===M.AWAKE&&s<n?(this.sleepState=M.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(M.sleepyEvent)):e===M.SLEEPY&&s>n?this.wakeUp():e===M.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(M.sleepEvent))}}updateSolveMassProperties(){this.sleepState===M.SLEEPING||this.type===M.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new l),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new l),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new l,i=new H;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),c=o.boundingSphereRadius;r+c>n&&(n=r+c)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=ss,o=ns,r=this.quaternion,c=this.aabb,a=is;for(let d=0;d!==n;d++){const u=t[d];r.vmult(e[d],i),i.vadd(this.position,i),r.mult(s[d],o),u.calculateWorldAABB(i,o,a.lowerBound,a.upperBound),d===0?c.copy(a):c.extend(a)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=os,n=rs;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new l),this.type!==M.DYNAMIC)return;this.sleepState===M.SLEEPING&&this.wakeUp();const s=cs;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new l),this.type!==M.DYNAMIC)return;const s=ls,n=as;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===M.DYNAMIC&&(this.sleepState===M.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new l),this.type!==M.DYNAMIC)return;this.sleepState===M.SLEEPING&&this.wakeUp();const s=e,n=hs;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=ds;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new l),this.type!==M.DYNAMIC)return;const s=us,n=ps;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=fs;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),$t.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new l;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===M.DYNAMIC||this.type===M.KINEMATIC)||this.sleepState===M.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,c=this.torque,a=this.quaternion,d=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,f=d*t;n.x+=r.x*f*h.x,n.y+=r.y*f*h.y,n.z+=r.z*f*h.z;const p=u.elements,v=this.angularFactor,y=c.x*v.x,w=c.y*v.y,m=c.z*v.z;i.x+=t*(p[0]*y+p[1]*w+p[2]*m),i.y+=t*(p[3]*y+p[4]*w+p[5]*m),i.z+=t*(p[6]*y+p[7]*w+p[8]*m),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,a.integrate(this.angularVelocity,t,this.angularFactor,a),e&&(s?a.normalizeFast():a.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}M.idCounter=0,M.COLLIDE_EVENT_NAME="collide",M.DYNAMIC=X.DYNAMIC,M.STATIC=X.STATIC,M.KINEMATIC=X.KINEMATIC,M.AWAKE=Xt.AWAKE,M.SLEEPY=Xt.SLEEPY,M.SLEEPING=Xt.SLEEPING,M.wakeupEvent={type:"wakeup"},M.sleepyEvent={type:"sleepy"},M.sleepEvent={type:"sleep"};const ss=new l,ns=new H,is=new tt,os=new nt,rs=new nt;new nt;const cs=new l,ls=new l,as=new l,hs=new l,ds=new l,us=new l,ps=new l,fs=new l;class ms{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!((t.collisionFilterGroup&e.collisionFilterMask)===0||(e.collisionFilterGroup&t.collisionFilterMask)===0||((t.type&M.STATIC)!==0||t.sleepState===M.SLEEPING)&&((e.type&M.STATIC)!==0||e.sleepState===M.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=ys;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=vs,n=ws,i=xs,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const c=n[r].id,a=i[r].id,d=c<a?`${c},${a}`:`${a},${c}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const c=s.keys.pop(),a=s[c];t.push(n[a]),e.push(i[a]),delete s[c]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new l;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const ys=new l;new l,new H,new l;const vs={keys:[]},ws=[],xs=[];new l,new l,new l;class gs extends ms{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let c=0;c!==i;c++)for(let a=0;a!==c;a++)o=n[c],r=n[a],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class _t{constructor(){this.rayFromWorld=new l,this.rayToWorld=new l,this.hitNormalWorld=new l,this.hitPointWorld=new l,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let ve,we,xe,ge,be,Ee,Ce;const Kt={CLOSEST:1,ANY:2,ALL:4};ve=I.types.SPHERE,we=I.types.PLANE,xe=I.types.BOX,ge=I.types.CYLINDER,be=I.types.CONVEXPOLYHEDRON,Ee=I.types.HEIGHTFIELD,Ce=I.types.TRIMESH;class U{get[ve](){return this._intersectSphere}get[we](){return this._intersectPlane}get[xe](){return this._intersectBox}get[ge](){return this._intersectConvex}get[be](){return this._intersectConvex}get[Ee](){return this._intersectHeightfield}get[Ce](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new l),e===void 0&&(e=new l),this.from=t.clone(),this.to=e.clone(),this.direction=new l,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=U.ANY,this.result=new _t,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||U.ANY,this.result=e.result||new _t,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(ze),Zt.length=0,t.broadphase.aabbQuery(t,ze,Zt),this.intersectBodies(Zt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||(this.collisionFilterGroup&t.collisionFilterMask)===0||(t.collisionFilterGroup&this.collisionFilterMask)===0)return;const n=bs,i=Es;for(let o=0,r=t.shapes.length;o<r;o++){const c=t.shapes[o];if(!(s&&!c.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(c,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(_s(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,c=this.direction,a=new l(0,0,1);e.vmult(a,a);const d=new l;o.vsub(s,d);const u=d.dot(a);r.vsub(s,d);const h=d.dot(a);if(u*h>0||o.distanceTo(r)<u)return;const f=a.dot(c);if(Math.abs(f)<this.precision)return;const p=new l,v=new l,y=new l;o.vsub(s,p);const w=-a.dot(p)/f;c.scale(w,v),o.vadd(v,y),this.reportIntersection(a,y,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=Cs;o.from.copy(this.from),o.to.copy(this.to),V.pointToLocalFrame(s,e,o.from,o.from),V.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=zs;let c,a,d,u;c=a=0,d=u=t.data.length-1;const h=new tt;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),c=Math.max(c,r[0]),a=Math.max(a,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),u=Math.min(u,r[1]+1);for(let f=c;f<d;f++)for(let p=a;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),V.pointToWorldFrame(s,e,t.pillarOffset,Lt),this._intersectConvex(t.pillarConvex,e,Lt,n,i,Se),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),V.pointToWorldFrame(s,e,t.pillarOffset,Lt),this._intersectConvex(t.pillarConvex,e,Lt,n,i,Se)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,c=t.radius,a=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-c**2,h=d**2-4*a*u,f=Ss,p=Ms;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const v=(-d-Math.sqrt(h))/(2*a),y=(-d+Math.sqrt(h))/(2*a);if(v>=0&&v<=1&&(o.lerp(r,v,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;y>=0&&y<=1&&(o.lerp(r,y,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=As,c=Me,a=o&&o.faceList||null,d=t.faces,u=t.vertices,h=t.faceNormals,f=this.direction,p=this.from,v=this.to,y=p.distanceTo(v),w=a?a.length:d.length,m=this.result;for(let x=0;!m.shouldStop&&x<w;x++){const g=a?a[x]:x,b=d[g],z=h[g],N=e,F=s;c.copy(u[b[0]]),N.vmult(c,c),c.vadd(F,c),c.vsub(p,c),N.vmult(z,r);const _=f.dot(r);if(Math.abs(_)<this.precision)continue;const B=r.dot(c)/_;if(!(B<0)){f.scale(B,J),J.vadd(p,J),it.copy(u[b[0]]),N.vmult(it,it),F.vadd(it,it);for(let q=1;!m.shouldStop&&q<b.length-1;q++){rt.copy(u[b[q]]),ct.copy(u[b[q+1]]),N.vmult(rt,rt),N.vmult(ct,ct),F.vadd(rt,rt),F.vadd(ct,ct);const O=J.distanceTo(p);!(U.pointInTriangle(J,it,rt,ct)||U.pointInTriangle(J,rt,it,ct))||O>y||this.reportIntersection(r,J,i,n,g)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=Ts,c=Rs,a=qs,d=Me,u=Is,h=Ns,f=Ps,p=Fs,v=Bs,y=t.indices;t.vertices;const w=this.from,m=this.to,x=this.direction;a.position.copy(s),a.quaternion.copy(e),V.vectorToLocalFrame(s,e,x,u),V.pointToLocalFrame(s,e,w,h),V.pointToLocalFrame(s,e,m,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,u),u.normalize();const g=h.distanceSquared(f);t.tree.rayQuery(this,a,c);for(let b=0,z=c.length;!this.result.shouldStop&&b!==z;b++){const N=c[b];t.getNormal(N,r),t.getVertex(y[N*3],it),it.vsub(h,d);const F=u.dot(r),_=r.dot(d)/F;if(_<0)continue;u.scale(_,J),J.vadd(h,J),t.getVertex(y[N*3+1],rt),t.getVertex(y[N*3+2],ct);const B=J.distanceSquared(h);!(U.pointInTriangle(J,rt,it,ct)||U.pointInTriangle(J,it,rt,ct))||B>g||(V.vectorToWorldFrame(e,r,v),V.pointToWorldFrame(s,e,J,p),this.reportIntersection(v,p,i,n,N))}c.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,c=o.distanceTo(e),a=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(a.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case U.ALL:this.hasHit=!0,a.set(o,r,t,e,s,n,c),a.hasHit=!0,this.callback(a);break;case U.CLOSEST:(c<a.distance||!a.hasHit)&&(this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,c));break;case U.ANY:this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,c),a.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,gt),s.vsub(e,At),t.vsub(e,Jt);const i=gt.dot(gt),o=gt.dot(At),r=gt.dot(Jt),c=At.dot(At),a=At.dot(Jt);let d,u;return(d=c*r-o*a)>=0&&(u=i*a-o*r)>=0&&d+u<i*c-o*o}}U.CLOSEST=Kt.CLOSEST,U.ANY=Kt.ANY,U.ALL=Kt.ALL;const ze=new tt,Zt=[],At=new l,Jt=new l,bs=new l,Es=new H,J=new l,it=new l,rt=new l,ct=new l;new l,new _t;const Se={faceList:[0]},Lt=new l,Cs=new U,zs=[],Ss=new l,Ms=new l,As=new l;new l,new l;const Me=new l,Ts=new l,Is=new l,Ns=new l,Ps=new l,Bs=new l,Fs=new l;new tt;const Rs=[],qs=new V,gt=new l,Ot=new l;function _s(A,t,e){e.vsub(A,gt);const s=gt.dot(t);return t.scale(s,Ot),Ot.vadd(A,Ot),e.distanceTo(Ot)}class Ae{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class kt{constructor(t,e,s){s===void 0&&(s={}),s=Ae.defaults(s,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=kt.idCounter++,this.collideConnected=s.collideConnected,s.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}kt.idCounter=0;class Te{constructor(){this.spatial=new l,this.rotational=new l}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Tt{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=Tt.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Te,this.jacobianElementB=new Te,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,c=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,c)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,c=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,c)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,c=n.torque,a=s.invMassSolve,d=n.invMassSolve;return i.scale(a,Ie),r.scale(d,Ne),s.invInertiaWorldSolve.vmult(o,Pe),n.invInertiaWorldSolve.vmult(c,Be),t.multiplyVectors(Ie,Pe)+e.multiplyVectors(Ne,Be)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,c=n.invInertiaWorldSolve;let a=i+o;return r.vmult(t.rotational,Wt),a+=Wt.dot(t.rotational),c.vmult(e.rotational,Wt),a+=Wt.dot(e.rotational),a}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=Ls;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Tt.idCounter=0;const Ie=new l,Ne=new l,Pe=new l,Be=new l,Wt=new l,Ls=new l;class Fe extends Tt{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new l,this.rj=new l,this.ni=new l}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,c=Os,a=ks,d=n.velocity,u=n.angularVelocity;n.force,n.torque;const h=i.velocity,f=i.angularVelocity;i.force,i.torque;const p=Ws,v=this.jacobianElementA,y=this.jacobianElementB,w=this.ni;o.cross(w,c),r.cross(w,a),w.negate(v.spatial),c.negate(v.rotational),y.spatial.copy(w),y.rotational.copy(a),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const m=w.dot(p),x=this.restitution+1,g=x*h.dot(w)-x*d.dot(w)+f.dot(a)-u.dot(c),b=this.computeGiMf();return-m*e-g*s-t*b}getImpactVelocityAlongNormal(){const t=Vs,e=js,s=Gs,n=Ds,i=Hs;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const Os=new l,ks=new l,Ws=new l,Vs=new l,js=new l,Gs=new l,Ds=new l,Hs=new l;new l,new l,new l,new l,new l,new l;class dt extends kt{constructor(t,e,s,n){n===void 0&&(n=1e6),super(t,e),typeof s>"u"&&(s=t.position.distanceTo(e.position)),this.distance=s;const i=this.distanceEquation=new Fe(t,e);this.equations.push(i),i.minForce=-n,i.maxForce=n}update(){const t=this.bodyA,e=this.bodyB,s=this.distanceEquation,n=this.distance*.5,i=s.ni;e.position.vsub(t.position,i),i.normalize(),i.scale(n,s.ri),i.scale(-n,s.rj)}}new l,new l,new l,new l;class Re extends Tt{constructor(t,e,s){super(t,e,-s,s),this.ri=new l,this.rj=new l,this.t=new l}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=Ys,o=Us,r=this.t;s.cross(r,i),n.cross(r,o);const c=this.jacobianElementA,a=this.jacobianElementB;r.negate(c.spatial),i.negate(c.rotational),a.spatial.copy(r),a.rotational.copy(o);const d=this.computeGW(),u=this.computeGiMf();return-d*e-t*u}}const Ys=new l,Us=new l;class It{constructor(t,e,s){s=Ae.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=It.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}It.idCounter=0;class Nt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=Nt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}Nt.idCounter=0,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new U,new l,new l,new l,new l(1,0,0),new l(0,1,0),new l(0,0,1),new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l;class Qt extends I{constructor(t){if(super({type:I.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new l);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const c=o[r];s[c]=t[c]-i,n[c]=t[c]+i}}}new l,new l,new l,new l,new l,new l,new l,new l,new l;class qe extends Ct{constructor(t,e,s,n){if(t===void 0&&(t=1),e===void 0&&(e=1),s===void 0&&(s=1),n===void 0&&(n=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const i=n,o=[],r=[],c=[],a=[],d=[],u=Math.cos,h=Math.sin;o.push(new l(-e*h(0),-s*.5,e*u(0))),a.push(0),o.push(new l(-t*h(0),s*.5,t*u(0))),d.push(1);for(let p=0;p<i;p++){const v=2*Math.PI/i*(p+1),y=2*Math.PI/i*(p+.5);p<i-1?(o.push(new l(-e*h(v),-s*.5,e*u(v))),a.push(2*p+2),o.push(new l(-t*h(v),s*.5,t*u(v))),d.push(2*p+3),c.push([2*p,2*p+1,2*p+3,2*p+2])):c.push([2*p,2*p+1,1,0]),(i%2===1||p<i/2)&&r.push(new l(-h(y),0,u(y)))}c.push(a),r.push(new l(0,1,0));const f=[];for(let p=0;p<d.length;p++)f.push(d[d.length-p-1]);c.push(f),super({vertices:o,faces:c,axes:r}),this.type=I.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=n}}new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new l,new tt,new l,new tt,new l,new l,new l,new l,new l,new l,new l,new tt,new l,new V,new tt;class $s{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class Xs extends $s{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,c=e.bodies,a=c.length,d=t;let u,h,f,p,v,y;if(r!==0)for(let g=0;g!==a;g++)c[g].updateSolveMassProperties();const w=Zs,m=Js,x=Ks;w.length=r,m.length=r,x.length=r;for(let g=0;g!==r;g++){const b=o[g];x[g]=0,m[g]=b.computeB(d),w[g]=1/b.computeC()}if(r!==0){for(let z=0;z!==a;z++){const N=c[z],F=N.vlambda,_=N.wlambda;F.set(0,0,0),_.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let z=0;z!==r;z++){const N=o[z];u=m[z],h=w[z],y=x[z],v=N.computeGWlambda(),f=h*(u-v-N.eps*y),y+f<N.minForce?f=N.minForce-y:y+f>N.maxForce&&(f=N.maxForce-y),x[z]+=f,p+=f>0?f:-f,N.addToWlambda(f)}if(p*p<i)break}for(let z=0;z!==a;z++){const N=c[z],F=N.velocity,_=N.angularVelocity;N.vlambda.vmul(N.linearFactor,N.vlambda),F.vadd(N.vlambda,F),N.wlambda.vmul(N.angularFactor,N.wlambda),_.vadd(N.wlambda,_)}let g=o.length;const b=1/d;for(;g--;)o[g].multiplier=x[g]*b}return s}}const Ks=[],Zs=[],Js=[];class Qs{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class tn extends Qs{constructor(){super(...arguments),this.type=l}constructObject(){return new l}}const G={sphereSphere:I.types.SPHERE,spherePlane:I.types.SPHERE|I.types.PLANE,boxBox:I.types.BOX|I.types.BOX,sphereBox:I.types.SPHERE|I.types.BOX,planeBox:I.types.PLANE|I.types.BOX,convexConvex:I.types.CONVEXPOLYHEDRON,sphereConvex:I.types.SPHERE|I.types.CONVEXPOLYHEDRON,planeConvex:I.types.PLANE|I.types.CONVEXPOLYHEDRON,boxConvex:I.types.BOX|I.types.CONVEXPOLYHEDRON,sphereHeightfield:I.types.SPHERE|I.types.HEIGHTFIELD,boxHeightfield:I.types.BOX|I.types.HEIGHTFIELD,convexHeightfield:I.types.CONVEXPOLYHEDRON|I.types.HEIGHTFIELD,sphereParticle:I.types.PARTICLE|I.types.SPHERE,planeParticle:I.types.PLANE|I.types.PARTICLE,boxParticle:I.types.BOX|I.types.PARTICLE,convexParticle:I.types.PARTICLE|I.types.CONVEXPOLYHEDRON,cylinderCylinder:I.types.CYLINDER,sphereCylinder:I.types.SPHERE|I.types.CYLINDER,planeCylinder:I.types.PLANE|I.types.CYLINDER,boxCylinder:I.types.BOX|I.types.CYLINDER,convexCylinder:I.types.CONVEXPOLYHEDRON|I.types.CYLINDER,heightfieldCylinder:I.types.HEIGHTFIELD|I.types.CYLINDER,particleCylinder:I.types.PARTICLE|I.types.CYLINDER,sphereTrimesh:I.types.SPHERE|I.types.TRIMESH,planeTrimesh:I.types.PLANE|I.types.TRIMESH};class en{get[G.sphereSphere](){return this.sphereSphere}get[G.spherePlane](){return this.spherePlane}get[G.boxBox](){return this.boxBox}get[G.sphereBox](){return this.sphereBox}get[G.planeBox](){return this.planeBox}get[G.convexConvex](){return this.convexConvex}get[G.sphereConvex](){return this.sphereConvex}get[G.planeConvex](){return this.planeConvex}get[G.boxConvex](){return this.boxConvex}get[G.sphereHeightfield](){return this.sphereHeightfield}get[G.boxHeightfield](){return this.boxHeightfield}get[G.convexHeightfield](){return this.convexHeightfield}get[G.sphereParticle](){return this.sphereParticle}get[G.planeParticle](){return this.planeParticle}get[G.boxParticle](){return this.boxParticle}get[G.convexParticle](){return this.convexParticle}get[G.cylinderCylinder](){return this.convexConvex}get[G.sphereCylinder](){return this.sphereConvex}get[G.planeCylinder](){return this.planeConvex}get[G.boxCylinder](){return this.boxConvex}get[G.convexCylinder](){return this.convexConvex}get[G.heightfieldCylinder](){return this.heightfieldCylinder}get[G.particleCylinder](){return this.particleCylinder}get[G.sphereTrimesh](){return this.sphereTrimesh}get[G.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new tn,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Fe(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const c=this.currentContactMaterial;r.restitution=c.restitution,r.setSpookParams(c.contactEquationStiffness,c.contactEquationRelaxation,this.world.dt);const a=s.material||t.material,d=n.material||e.material;return a&&d&&a.restitution>=0&&d.restitution>=0&&(r.restitution=a.restitution*d.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,c=this.currentContactMaterial;let a=c.friction;const d=i.material||s.material,u=o.material||n.material;if(d&&u&&d.friction>=0&&u.friction>=0&&(a=d.friction*u.friction),a>0){const h=a*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,v=p.length?p.pop():new Re(s,n,h*f),y=p.length?p.pop():new Re(s,n,h*f);return v.bi=y.bi=s,v.bj=y.bj=n,v.minForce=y.minForce=-h*f,v.maxForce=y.maxForce=h*f,v.ri.copy(t.ri),v.rj.copy(t.rj),y.ri.copy(t.ri),y.rj.copy(t.rj),t.ni.tangents(v.t,y.t),v.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),y.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),v.enabled=y.enabled=t.enabled,e.push(v,y),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];bt.setZero(),zt.setZero(),St.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(bt.vadd(e.ni,bt),zt.vadd(e.ri,zt),St.vadd(e.rj,St)):(bt.vsub(e.ni,bt),zt.vadd(e.rj,zt),St.vadd(e.ri,St));const o=1/t;zt.scale(o,s.ri),St.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),bt.normalize(),bt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const c=on,a=rn,d=sn,u=nn;for(let h=0,f=t.length;h!==f;h++){const p=t[h],v=e[h];let y=null;p.material&&v.material&&(y=s.getContactMaterial(p.material,v.material)||null);const w=p.type&M.KINEMATIC&&v.type&M.STATIC||p.type&M.STATIC&&v.type&M.KINEMATIC||p.type&M.KINEMATIC&&v.type&M.KINEMATIC;for(let m=0;m<p.shapes.length;m++){p.quaternion.mult(p.shapeOrientations[m],c),p.quaternion.vmult(p.shapeOffsets[m],d),d.vadd(p.position,d);const x=p.shapes[m];for(let g=0;g<v.shapes.length;g++){v.quaternion.mult(v.shapeOrientations[g],a),v.quaternion.vmult(v.shapeOffsets[g],u),u.vadd(v.position,u);const b=v.shapes[g];if(!(x.collisionFilterMask&b.collisionFilterGroup&&b.collisionFilterMask&x.collisionFilterGroup)||d.distanceTo(u)>x.boundingSphereRadius+b.boundingSphereRadius)continue;let z=null;x.material&&b.material&&(z=s.getContactMaterial(x.material,b.material)||null),this.currentContactMaterial=z||y||s.defaultContactMaterial;const N=x.type|b.type,F=this[N];if(F){let _=!1;x.type<b.type?_=F.call(this,x,b,d,u,c,a,p,v,x,b,w):_=F.call(this,b,x,u,d,a,c,v,p,x,b,w),_&&w&&(s.shapeOverlapKeeper.set(x.id,b.id),s.bodyOverlapKeeper.set(p.id,v.id))}}}}}sphereSphere(t,e,s,n,i,o,r,c,a,d,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,c,t,e,a,d);n.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(n,h.rj),h.rj.vsub(c.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,c,a,d,u){const h=this.createContactEquation(r,c,t,e,a,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(n,Vt),h.ni.scale(h.ni.dot(Vt),_e),Vt.vsub(_e,h.rj),-Vt.dot(h.ni)<=t.radius){if(u)return!0;const f=h.ri,p=h.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(c.position,p),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,c,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}sphereBox(t,e,s,n,i,o,r,c,a,d,u){const h=this.v3pool,f=Bn;s.vsub(n,jt),e.getSideNormals(f,o);const p=t.radius;let v=!1;const y=Rn,w=qn,m=_n;let x=null,g=0,b=0,z=0,N=null;for(let C=0,D=f.length;C!==D&&v===!1;C++){const L=In;L.copy(f[C]);const k=L.length();L.normalize();const Q=jt.dot(L);if(Q<k+p&&Q>0){const K=Nn,R=Pn;K.copy(f[(C+1)%3]),R.copy(f[(C+2)%3]);const Mt=K.length(),Ht=R.length();K.normalize(),R.normalize();const ae=jt.dot(K),he=jt.dot(R);if(ae<Mt&&ae>-Mt&&he<Ht&&he>-Ht){const Ue=Math.abs(Q-k-p);if((N===null||Ue<N)&&(N=Ue,b=ae,z=he,x=k,y.copy(L),w.copy(K),m.copy(R),g++,u))return!0}}}if(g){v=!0;const C=this.createContactEquation(r,c,t,e,a,d);y.scale(-p,C.ri),C.ni.copy(y),C.ni.negate(C.ni),y.scale(x,y),w.scale(b,w),y.vadd(w,y),m.scale(z,m),y.vadd(m,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(n,C.rj),C.rj.vsub(c.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult)}let F=h.get();const _=Fn;for(let C=0;C!==2&&!v;C++)for(let D=0;D!==2&&!v;D++)for(let L=0;L!==2&&!v;L++)if(F.set(0,0,0),C?F.vadd(f[0],F):F.vsub(f[0],F),D?F.vadd(f[1],F):F.vsub(f[1],F),L?F.vadd(f[2],F):F.vsub(f[2],F),n.vadd(F,_),_.vsub(s,_),_.lengthSquared()<p*p){if(u)return!0;v=!0;const k=this.createContactEquation(r,c,t,e,a,d);k.ri.copy(_),k.ri.normalize(),k.ni.copy(k.ri),k.ri.scale(p,k.ri),k.rj.copy(F),k.ri.vadd(s,k.ri),k.ri.vsub(r.position,k.ri),k.rj.vadd(n,k.rj),k.rj.vsub(c.position,k.rj),this.result.push(k),this.createFrictionEquationsFromContact(k,this.frictionResult)}h.release(F),F=null;const B=h.get(),q=h.get(),O=h.get(),E=h.get(),T=h.get(),S=f.length;for(let C=0;C!==S&&!v;C++)for(let D=0;D!==S&&!v;D++)if(C%3!==D%3){f[D].cross(f[C],B),B.normalize(),f[C].vadd(f[D],q),O.copy(s),O.vsub(q,O),O.vsub(n,O);const L=O.dot(B);B.scale(L,E);let k=0;for(;k===C%3||k===D%3;)k++;T.copy(s),T.vsub(E,T),T.vsub(q,T),T.vsub(n,T);const Q=Math.abs(L),K=T.length();if(Q<f[k].length()&&K<p){if(u)return!0;v=!0;const R=this.createContactEquation(r,c,t,e,a,d);q.vadd(E,R.rj),R.rj.copy(R.rj),T.negate(R.ni),R.ni.normalize(),R.ri.copy(R.rj),R.ri.vadd(n,R.ri),R.ri.vsub(s,R.ri),R.ri.normalize(),R.ri.scale(p,R.ri),R.ri.vadd(s,R.ri),R.ri.vsub(r.position,R.ri),R.rj.vadd(n,R.rj),R.rj.vsub(c.position,R.rj),this.result.push(R),this.createFrictionEquationsFromContact(R,this.frictionResult)}}h.release(B,q,O,E,T)}planeBox(t,e,s,n,i,o,r,c,a,d,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}convexConvex(t,e,s,n,i,o,r,c,a,d,u,h,f){const p=Zn;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,h,f)){const v=[],y=Jn;t.clipAgainstHull(s,i,e,n,o,p,-100,100,v);let w=0;for(let m=0;m!==v.length;m++){if(u)return!0;const x=this.createContactEquation(r,c,t,e,a,d),g=x.ri,b=x.rj;p.negate(x.ni),v[m].normal.negate(y),y.scale(v[m].depth,y),v[m].point.vadd(y,g),b.copy(v[m].point),g.vsub(s,g),b.vsub(n,b),g.vadd(s,g),g.vsub(r.position,g),b.vadd(n,b),b.vsub(c.position,b),this.result.push(x),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(x,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,c,a,d,u){const h=this.v3pool;s.vsub(n,Ln);const f=e.faceNormals,p=e.faces,v=e.vertices,y=t.radius;let w=!1;for(let m=0;m!==v.length;m++){const x=v[m],g=Vn;o.vmult(x,g),n.vadd(g,g);const b=Wn;if(g.vsub(s,b),b.lengthSquared()<y*y){if(u)return!0;w=!0;const z=this.createContactEquation(r,c,t,e,a,d);z.ri.copy(b),z.ri.normalize(),z.ni.copy(z.ri),z.ri.scale(y,z.ri),g.vsub(n,z.rj),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.vadd(n,z.rj),z.rj.vsub(c.position,z.rj),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult);return}}for(let m=0,x=p.length;m!==x&&w===!1;m++){const g=f[m],b=p[m],z=jn;o.vmult(g,z);const N=Gn;o.vmult(v[b[0]],N),N.vadd(n,N);const F=Dn;z.scale(-y,F),s.vadd(F,F);const _=Hn;F.vsub(N,_);const B=_.dot(z),q=Yn;if(s.vsub(N,q),B<0&&q.dot(z)>0){const O=[];for(let E=0,T=b.length;E!==T;E++){const S=h.get();o.vmult(v[b[E]],S),n.vadd(S,S),O.push(S)}if(Tn(O,z,s)){if(u)return!0;w=!0;const E=this.createContactEquation(r,c,t,e,a,d);z.scale(-y,E.ri),z.negate(E.ni);const T=h.get();z.scale(-B,T);const S=h.get();z.scale(-y,S),s.vsub(n,E.rj),E.rj.vadd(S,E.rj),E.rj.vadd(T,E.rj),E.rj.vadd(n,E.rj),E.rj.vsub(c.position,E.rj),E.ri.vadd(s,E.ri),E.ri.vsub(r.position,E.ri),h.release(T),h.release(S),this.result.push(E),this.createFrictionEquationsFromContact(E,this.frictionResult);for(let C=0,D=O.length;C!==D;C++)h.release(O[C]);return}else for(let E=0;E!==b.length;E++){const T=h.get(),S=h.get();o.vmult(v[b[(E+1)%b.length]],T),o.vmult(v[b[(E+2)%b.length]],S),n.vadd(T,T),n.vadd(S,S);const C=On;S.vsub(T,C);const D=kn;C.unit(D);const L=h.get(),k=h.get();s.vsub(T,k);const Q=k.dot(D);D.scale(Q,L),L.vadd(T,L);const K=h.get();if(L.vsub(s,K),Q>0&&Q*Q<C.lengthSquared()&&K.lengthSquared()<y*y){if(u)return!0;const R=this.createContactEquation(r,c,t,e,a,d);L.vsub(n,R.rj),L.vsub(s,R.ni),R.ni.normalize(),R.ni.scale(y,R.ri),R.rj.vadd(n,R.rj),R.rj.vsub(c.position,R.rj),R.ri.vadd(s,R.ri),R.ri.vsub(r.position,R.ri),this.result.push(R),this.createFrictionEquationsFromContact(R,this.frictionResult);for(let Mt=0,Ht=O.length;Mt!==Ht;Mt++)h.release(O[Mt]);h.release(T),h.release(S),h.release(L),h.release(K),h.release(k);return}h.release(T),h.release(S),h.release(L),h.release(K),h.release(k)}for(let E=0,T=O.length;E!==T;E++)h.release(O[E])}}}planeConvex(t,e,s,n,i,o,r,c,a,d,u){const h=Un,f=$n;f.set(0,0,1),i.vmult(f,f);let p=0;const v=Xn;for(let y=0;y!==e.vertices.length;y++)if(h.copy(e.vertices[y]),o.vmult(h,h),n.vadd(h,h),h.vsub(s,v),f.dot(v)<=0){if(u)return!0;const m=this.createContactEquation(r,c,t,e,a,d),x=Kn;f.scale(f.dot(v),x),h.vsub(x,x),x.vsub(s,m.ri),m.ni.copy(f),h.vsub(n,m.rj),m.ri.vadd(s,m.ri),m.ri.vsub(r.position,m.ri),m.rj.vadd(n,m.rj),m.rj.vsub(c.position,m.rj),this.result.push(m),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(m,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,c,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,c,a,d,u){const h=e.data,f=t.radius,p=e.elementSize,v=hi,y=ai;V.pointToLocalFrame(n,o,s,y);let w=Math.floor((y.x-f)/p)-1,m=Math.ceil((y.x+f)/p)+1,x=Math.floor((y.y-f)/p)-1,g=Math.ceil((y.y+f)/p)+1;if(m<0||g<0||w>h.length||x>h[0].length)return;w<0&&(w=0),m<0&&(m=0),x<0&&(x=0),g<0&&(g=0),w>=h.length&&(w=h.length-1),m>=h.length&&(m=h.length-1),g>=h[0].length&&(g=h[0].length-1),x>=h[0].length&&(x=h[0].length-1);const b=[];e.getRectMinMax(w,x,m,g,b);const z=b[0],N=b[1];if(y.z-f>N||y.z+f<z)return;const F=this.result;for(let _=w;_<m;_++)for(let B=x;B<g;B++){const q=F.length;let O=!1;if(e.getConvexTrianglePillar(_,B,!1),V.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(O=this.sphereConvex(t,e.pillarConvex,s,v,i,o,r,c,t,e,u)),u&&O||(e.getConvexTrianglePillar(_,B,!0),V.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(O=this.sphereConvex(t,e.pillarConvex,s,v,i,o,r,c,t,e,u)),u&&O))return!0;if(F.length-q>2)return}}boxHeightfield(t,e,s,n,i,o,r,c,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,c,a,d,u){const h=e.data,f=e.elementSize,p=t.boundingSphereRadius,v=ci,y=li,w=ri;V.pointToLocalFrame(n,o,s,w);let m=Math.floor((w.x-p)/f)-1,x=Math.ceil((w.x+p)/f)+1,g=Math.floor((w.y-p)/f)-1,b=Math.ceil((w.y+p)/f)+1;if(x<0||b<0||m>h.length||g>h[0].length)return;m<0&&(m=0),x<0&&(x=0),g<0&&(g=0),b<0&&(b=0),m>=h.length&&(m=h.length-1),x>=h.length&&(x=h.length-1),b>=h[0].length&&(b=h[0].length-1),g>=h[0].length&&(g=h[0].length-1);const z=[];e.getRectMinMax(m,g,x,b,z);const N=z[0],F=z[1];if(!(w.z-p>F||w.z+p<N))for(let _=m;_<x;_++)for(let B=g;B<b;B++){let q=!1;if(e.getConvexTrianglePillar(_,B,!1),V.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(q=this.convexConvex(t,e.pillarConvex,s,v,i,o,r,c,null,null,u,y,null)),u&&q||(e.getConvexTrianglePillar(_,B,!0),V.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(q=this.convexConvex(t,e.pillarConvex,s,v,i,o,r,c,null,null,u,y,null)),u&&q))return!0}}sphereParticle(t,e,s,n,i,o,r,c,a,d,u){const h=si;if(h.set(0,0,1),n.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(c,r,e,t,a,d);h.normalize(),p.rj.copy(h),p.rj.scale(t.radius,p.rj),p.ni.copy(h),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,c,a,d,u){const h=Qn;h.set(0,0,1),r.quaternion.vmult(h,h);const f=ti;if(n.vsub(r.position,f),h.dot(f)<=0){if(u)return!0;const v=this.createContactEquation(c,r,e,t,a,d);v.ni.copy(h),v.ni.negate(v.ni),v.ri.set(0,0,0);const y=ei;h.scale(h.dot(n),y),n.vsub(y,y),v.rj.copy(y),this.result.push(v),this.createFrictionEquationsFromContact(v,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,c,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexParticle(t,e,s,n,i,o,r,c,a,d,u){let h=-1;const f=ii,p=oi;let v=null;const y=ni;if(y.copy(n),y.vsub(s,y),i.conjugate(Le),Le.vmult(y,y),t.pointIsInside(y)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,m=t.faces.length;w!==m;w++){const x=[t.worldVertices[t.faces[w][0]]],g=t.worldFaceNormals[w];n.vsub(x[0],Oe);const b=-g.dot(Oe);if(v===null||Math.abs(b)<Math.abs(v)){if(u)return!0;v=b,h=w,f.copy(g)}}if(h!==-1){const w=this.createContactEquation(c,r,e,t,a,d);f.scale(v,p),p.vadd(n,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const m=w.ri,x=w.rj;m.vadd(n,m),m.vsub(c.position,m),x.vadd(s,x),x.vsub(r.position,x),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,c,a,d,u){return this.convexHeightfield(e,t,n,s,o,i,c,r,a,d,u)}particleCylinder(t,e,s,n,i,o,r,c,a,d,u){return this.convexParticle(e,t,n,s,o,i,c,r,a,d,u)}sphereTrimesh(t,e,s,n,i,o,r,c,a,d,u){const h=fn,f=mn,p=yn,v=vn,y=wn,w=xn,m=Cn,x=pn,g=dn,b=zn;V.pointToLocalFrame(n,o,s,y);const z=t.radius;m.lowerBound.set(y.x-z,y.y-z,y.z-z),m.upperBound.set(y.x+z,y.y+z,y.z+z),e.getTrianglesInAABB(m,b);const N=un,F=t.radius*t.radius;for(let E=0;E<b.length;E++)for(let T=0;T<3;T++)if(e.getVertex(e.indices[b[E]*3+T],N),N.vsub(y,g),g.lengthSquared()<=F){if(x.copy(N),V.pointToWorldFrame(n,o,x,N),N.vsub(s,g),u)return!0;let S=this.createContactEquation(r,c,t,e,a,d);S.ni.copy(g),S.ni.normalize(),S.ri.copy(S.ni),S.ri.scale(t.radius,S.ri),S.ri.vadd(s,S.ri),S.ri.vsub(r.position,S.ri),S.rj.copy(N),S.rj.vsub(c.position,S.rj),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult)}for(let E=0;E<b.length;E++)for(let T=0;T<3;T++){e.getVertex(e.indices[b[E]*3+T],h),e.getVertex(e.indices[b[E]*3+(T+1)%3],f),f.vsub(h,p),y.vsub(f,w);const S=w.dot(p);y.vsub(h,w);let C=w.dot(p);if(C>0&&S<0&&(y.vsub(h,w),v.copy(p),v.normalize(),C=w.dot(v),v.scale(C,w),w.vadd(h,w),w.distanceTo(y)<t.radius)){if(u)return!0;const L=this.createContactEquation(r,c,t,e,a,d);w.vsub(y,L.ni),L.ni.normalize(),L.ni.scale(t.radius,L.ri),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),V.pointToWorldFrame(n,o,w,w),w.vsub(c.position,L.rj),V.vectorToWorldFrame(o,L.ni,L.ni),V.vectorToWorldFrame(o,L.ri,L.ri),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}}const _=gn,B=bn,q=En,O=hn;for(let E=0,T=b.length;E!==T;E++){e.getTriangleVertices(b[E],_,B,q),e.getNormal(b[E],O),y.vsub(_,w);let S=w.dot(O);if(O.scale(S,w),y.vsub(w,w),S=w.distanceTo(y),U.pointInTriangle(w,_,B,q)&&S<t.radius){if(u)return!0;let C=this.createContactEquation(r,c,t,e,a,d);w.vsub(y,C.ni),C.ni.normalize(),C.ni.scale(t.radius,C.ri),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),V.pointToWorldFrame(n,o,w,w),w.vsub(c.position,C.rj),V.vectorToWorldFrame(o,C.ni,C.ni),V.vectorToWorldFrame(o,C.ri,C.ri),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult)}}b.length=0}planeTrimesh(t,e,s,n,i,o,r,c,a,d,u){const h=new l,f=cn;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,h);const v=new l;v.copy(h),V.pointToWorldFrame(n,o,v,h);const y=ln;if(h.vsub(s,y),f.dot(y)<=0){if(u)return!0;const m=this.createContactEquation(r,c,t,e,a,d);m.ni.copy(f);const x=an;f.scale(y.dot(f),x),h.vsub(x,x),m.ri.copy(x),m.ri.vsub(r.position,m.ri),m.rj.copy(h),m.rj.vsub(c.position,m.rj),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}}}const bt=new l,zt=new l,St=new l,sn=new l,nn=new l,on=new H,rn=new H,cn=new l,ln=new l,an=new l,hn=new l,dn=new l;new l;const un=new l,pn=new l,fn=new l,mn=new l,yn=new l,vn=new l,wn=new l,xn=new l,gn=new l,bn=new l,En=new l,Cn=new tt,zn=[],Vt=new l,_e=new l,Sn=new l,Mn=new l,An=new l;function Tn(A,t,e){let s=null;const n=A.length;for(let i=0;i!==n;i++){const o=A[i],r=Sn;A[(i+1)%n].vsub(o,r);const c=Mn;r.cross(t,c);const a=An;e.vsub(o,a);const d=c.dot(a);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const jt=new l,In=new l,Nn=new l,Pn=new l,Bn=[new l,new l,new l,new l,new l,new l],Fn=new l,Rn=new l,qn=new l,_n=new l,Ln=new l,On=new l,kn=new l,Wn=new l,Vn=new l,jn=new l,Gn=new l,Dn=new l,Hn=new l,Yn=new l;new l,new l;const Un=new l,$n=new l,Xn=new l,Kn=new l,Zn=new l,Jn=new l,Qn=new l,ti=new l,ei=new l,si=new l,Le=new H,ni=new l;new l;const ii=new l,Oe=new l,oi=new l,ri=new l,ci=new l,li=[0],ai=new l,hi=new l;class ke{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let c=0;c<i;c++){let a=!1;const d=s[c];for(;d>n[r];)r++;a=d===n[r],a||We(t,d)}r=0;for(let c=0;c<o;c++){let a=!1;const d=n[c];for(;d>s[r];)r++;a=s[r]===d,a||We(e,d)}}}function We(A,t){A.push((t&4294901760)>>16,t&65535)}const te=(A,t)=>A<t?`${A}-${t}`:`${t}-${A}`;class di{constructor(){this.data={keys:[]}}get(t,e){const s=te(t,e);return this.data[s]}set(t,e,s){const n=te(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=te(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class ui extends me{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new l,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new l,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new gs,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new Xs,this.constraints=[],this.narrowphase=new en(this),this.collisionMatrix=new fe,this.collisionMatrixPrevious=new fe,this.bodyOverlapKeeper=new ke,this.shapeOverlapKeeper=new ke,this.contactmaterials=[],this.contactMaterialTable=new di,this.defaultMaterial=new Nt("default"),this.defaultContactMaterial=new It(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof _t?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=U.ALL,s.from=t,s.to=e,s.callback=n,ee.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=U.ANY,s.from=t,s.to=e,s.result=n,ee.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=U.CLOSEST,s.from=t,s.to=e,s.result=n,ee.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof M&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=$.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=$.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!($.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const c=this.bodies[r];c.previousPosition.lerp(c.position,o,c.interpolatedPosition),c.previousQuaternion.slerp(c.quaternion,o,c.interpolatedQuaternion),c.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=vi,n=wi,i=this.bodies.length,o=this.bodies,r=this.solver,c=this.gravity,a=this.doProfiling,d=this.profile,u=M.DYNAMIC;let h=-1/0;const f=this.constraints,p=yi;c.length();const v=c.x,y=c.y,w=c.z;let m=0;for(a&&(h=$.now()),m=0;m!==i;m++){const E=o[m];if(E.type===u){const T=E.force,S=E.mass;T.x+=S*v,T.y+=S*y,T.z+=S*w}}for(let E=0,T=this.subsystems.length;E!==T;E++)this.subsystems[E].update();a&&(h=$.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),a&&(d.broadphase=$.now()-h);let x=f.length;for(m=0;m!==x;m++){const E=f[m];if(!E.collideConnected)for(let T=s.length-1;T>=0;T-=1)(E.bodyA===s[T]&&E.bodyB===n[T]||E.bodyB===s[T]&&E.bodyA===n[T])&&(s.splice(T,1),n.splice(T,1))}this.collisionMatrixTick(),a&&(h=$.now());const g=mi,b=e.length;for(m=0;m!==b;m++)g.push(e[m]);e.length=0;const z=this.frictionEquations.length;for(m=0;m!==z;m++)p.push(this.frictionEquations[m]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,g,this.frictionEquations,p),a&&(d.narrowphase=$.now()-h),a&&(h=$.now()),m=0;m<this.frictionEquations.length;m++)r.addEquation(this.frictionEquations[m]);const N=e.length;for(let E=0;E!==N;E++){const T=e[E],S=T.bi,C=T.bj,D=T.si,L=T.sj;let k;if(S.material&&C.material?k=this.getContactMaterial(S.material,C.material)||this.defaultContactMaterial:k=this.defaultContactMaterial,k.friction,S.material&&C.material&&(S.material.friction>=0&&C.material.friction>=0&&S.material.friction*C.material.friction,S.material.restitution>=0&&C.material.restitution>=0&&(T.restitution=S.material.restitution*C.material.restitution)),r.addEquation(T),S.allowSleep&&S.type===M.DYNAMIC&&S.sleepState===M.SLEEPING&&C.sleepState===M.AWAKE&&C.type!==M.STATIC){const Q=C.velocity.lengthSquared()+C.angularVelocity.lengthSquared(),K=C.sleepSpeedLimit**2;Q>=K*2&&(S.wakeUpAfterNarrowphase=!0)}if(C.allowSleep&&C.type===M.DYNAMIC&&C.sleepState===M.SLEEPING&&S.sleepState===M.AWAKE&&S.type!==M.STATIC){const Q=S.velocity.lengthSquared()+S.angularVelocity.lengthSquared(),K=S.sleepSpeedLimit**2;Q>=K*2&&(C.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(S,C,!0),this.collisionMatrixPrevious.get(S,C)||(Pt.body=C,Pt.contact=T,S.dispatchEvent(Pt),Pt.body=S,C.dispatchEvent(Pt)),this.bodyOverlapKeeper.set(S.id,C.id),this.shapeOverlapKeeper.set(D.id,L.id)}for(this.emitContactEvents(),a&&(d.makeContactConstraints=$.now()-h,h=$.now()),m=0;m!==i;m++){const E=o[m];E.wakeUpAfterNarrowphase&&(E.wakeUp(),E.wakeUpAfterNarrowphase=!1)}for(x=f.length,m=0;m!==x;m++){const E=f[m];E.update();for(let T=0,S=E.equations.length;T!==S;T++){const C=E.equations[T];r.addEquation(C)}}r.solve(t,this),a&&(d.solve=$.now()-h),r.removeAllEquations();const F=Math.pow;for(m=0;m!==i;m++){const E=o[m];if(E.type&u){const T=F(1-E.linearDamping,t),S=E.velocity;S.scale(T,S);const C=E.angularVelocity;if(C){const D=F(1-E.angularDamping,t);C.scale(D,C)}}}this.dispatchEvent(fi),a&&(h=$.now());const B=this.stepnumber%(this.quatNormalizeSkip+1)===0,q=this.quatNormalizeFast;for(m=0;m!==i;m++)o[m].integrate(t,B,q);this.clearForces(),this.broadphase.dirty=!0,a&&(d.integrate=$.now()-h),this.stepnumber+=1,this.dispatchEvent(pi);let O=!0;if(this.allowSleep)for(O=!1,m=0;m!==i;m++){const E=o[m];E.sleepTick(this.time),E.sleepState!==M.SLEEPING&&(O=!0)}this.hasActiveBodies=O}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(ut,pt),t){for(let i=0,o=ut.length;i<o;i+=2)Bt.bodyA=this.getBodyById(ut[i]),Bt.bodyB=this.getBodyById(ut[i+1]),this.dispatchEvent(Bt);Bt.bodyA=Bt.bodyB=null}if(e){for(let i=0,o=pt.length;i<o;i+=2)Ft.bodyA=this.getBodyById(pt[i]),Ft.bodyB=this.getBodyById(pt[i+1]),this.dispatchEvent(Ft);Ft.bodyA=Ft.bodyB=null}ut.length=pt.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(ut,pt),s){for(let i=0,o=ut.length;i<o;i+=2){const r=this.getShapeById(ut[i]),c=this.getShapeById(ut[i+1]);ft.shapeA=r,ft.shapeB=c,r&&(ft.bodyA=r.body),c&&(ft.bodyB=c.body),this.dispatchEvent(ft)}ft.bodyA=ft.bodyB=ft.shapeA=ft.shapeB=null}if(n){for(let i=0,o=pt.length;i<o;i+=2){const r=this.getShapeById(pt[i]),c=this.getShapeById(pt[i+1]);mt.shapeA=r,mt.shapeB=c,r&&(mt.bodyA=r.body),c&&(mt.bodyB=c.body),this.dispatchEvent(mt)}mt.bodyA=mt.bodyB=mt.shapeA=mt.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new tt;const ee=new U,$=globalThis.performance||{};if(!$.now){let A=Date.now();$.timing&&$.timing.navigationStart&&(A=$.timing.navigationStart),$.now=()=>Date.now()-A}new l;const pi={type:"postStep"},fi={type:"preStep"},Pt={type:M.COLLIDE_EVENT_NAME,body:null,contact:null},mi=[],yi=[],vi=[],wi=[],ut=[],pt=[],Bt={type:"beginContact",bodyA:null,bodyB:null},Ft={type:"endContact",bodyA:null,bodyB:null},ft={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},mt={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};let W,yt;const lt={COILER:1,ROPE:2,ROPE_SEGMENT:4,ANCHOR:8};let Rt=40,Ve=.012,je=.5,se=.012,P=[],Y,et,Z,j,at,ht,qt=10,ne=0,ie=1,Gt=0,Dt=!1,Ge=!1,vt=400,De=0,oe=0,Et=0,xi=Math.PI*2/8,re=0;const gi=.1,bi=Math.PI;let xt=new Set,st=[],ce=0;function Ei(){W=new ui({gravity:new l(0,-9.81,0)}),yt=new Nt("defaultMaterial"),W.defaultContactMaterial=new It(yt,yt,{friction:.5,restitution:.01,contactEquationStiffness:5e5,contactEquationRelaxation:5,frictionEquationStiffness:5e5,frictionEquationRelaxation:5}),W.defaultMaterial=yt,Y=new M({mass:0}),Y.position.set(.57,.225,.025),Y.type=X.KINEMATIC,W.addBody(Y),et=new M({mass:0}),et.position.set(-.6,.27,-.058),W.addBody(et),Z=new M({mass:0}),Z.position.set(0,.3,.03),W.addBody(Z),st=[],xt=new Set}function Ci(){He();for(let s=0;s<Rt;s++){const n=new Qt(Ve/2);let i,o,r;if(s<=qt){const a=s/qt;i=et.position.x+a*(Z.position.x-et.position.x),o=et.position.y+a*(Z.position.y-et.position.y),r=et.position.z+a*(Z.position.z-et.position.z),o+=Math.sin(a*Math.PI)*.05}else{const a=(s-qt)/(Rt-qt-1);i=Z.position.x+a*(Y.position.x-Z.position.x),o=Z.position.y+a*(Y.position.y-Z.position.y),r=Z.position.z+a*(Y.position.z-Y.position.z),o+=Math.sin(a*Math.PI)*.05}const c=new M({mass:je,shape:n,position:new l(i,o,r),material:yt,collisionFilterGroup:lt.ROPE|lt.ROPE_SEGMENT,collisionFilterMask:lt.COILER|lt.ROPE_SEGMENT});c.angularDamping=.95,c.linearDamping=.95,W.addBody(c),P.push(c)}for(let s=0;s<Rt-1;s++){const n=new dt(P[s],P[s+1],se,1e5);n.collideConnected=!1,n.maxForce=1e3,W.addConstraint(n)}const A=new dt(Z,P[qt],0);W.addConstraint(A);const t=new dt(et,P[0],0);W.addConstraint(t);const e=new dt(Y,P[Rt-1],0);W.addConstraint(e)}function He(A=!1){var t;try{Dt=!1,ce=0;for(let e=((t=W==null?void 0:W.constraints)==null?void 0:t.length)-1;e>=0;e--)W.constraints[e]instanceof dt&&W.removeConstraint(W.constraints[e]);for(let e=0;e<P.length;e++)W.removeBody(P[e]);P.length=0,ne=0,ie=1,Gt=0,De=0,oe=0,A&&(Et=0,re=0),st=[],xt.clear()}catch(e){console.error("Error in resetRope:",e)}}function zi(A,t,e,s,n){try{const i=e||(t==="100-200"?300:400);if(P.length>=i||P.length<11||s!==void 0&&P.length>=Rt&&Math.abs(s-re)<xi)return;s!==void 0&&(re=s);const o=P.length-1,r=P[10],c=new M({mass:je,shape:new Qt(Ve/2),position:new l(r.position.x,r.position.y,r.position.z),material:yt,collisionFilterGroup:lt.ROPE|lt.ROPE_SEGMENT,collisionFilterMask:lt.COILER|lt.ROPE_SEGMENT});if(c.userData={},j){const w=j.position.x-r.position.x,m=j.position.y-r.position.y;if(Math.sqrt(w*w+m*m)>.1&&(c.velocity.set(w*.15,m*.15,0),j.angularVelocity.z!==0)){const b=.1*Math.abs(j.angularVelocity.z);c.velocity.x-=m*b,c.velocity.y+=w*b}}c.angularDamping=.98,c.linearDamping=.98,W.addBody(c);const a=[];W.constraints.forEach(w=>{(w.bodyA===P[10]&&w.bodyB===P[11]||w.bodyA===P[11]&&w.bodyB===P[10])&&(a.push(w),W.removeConstraint(w))});const d=P[11];ne++,ne%30===0&&(ie*=-1);const u=A[t],h=(u.sideOffset1-u.sideOffset2)*.8;Gt+=ie*(h/50)*.9;const f=h*.45;Gt=Math.max(Math.min(Gt,f),-f);const p=P.slice(11);P.length=11,P.push(c),P.push(...p);const v=new dt(P[10],c,se,1e5),y=new dt(c,d,se,1e5);v.collideConnected=!1,y.collideConnected=!1,v.maxForce=1e3,y.maxForce=1e3,W.addConstraint(v),W.addConstraint(y),o===P.length-2&&W.constraints.forEach(w=>{if(w instanceof dt&&(w.bodyA===Y||w.bodyB===Y)){W.removeConstraint(w);const m=new dt(Y,P[P.length-1],0);W.addConstraint(m)}}),st.push({wrapped:!1,wrapAngle:0,initialCoilerAngle:Et})}catch(i){console.error("Error in addRopeSegment:",i)}}function Si(A,t,e,s,n,i){i!==void 0?ce=i:ce++;const o=e||vt;P.length>=o&&P[0].type!==X.STATIC&&le(),n!==void 0&&(Et=n);for(let c=0;c<t;c++)W.step(A/t);return Mi(s),P.map(c=>({x:c.position.x,y:c.position.y,z:c.position.z}))}function Mi(A){if(!j||P.length<=20)return;const t=A!==void 0?A:j.angularVelocity?j.angularVelocity.z:0;for(;st.length<P.length;)st.push({wrapped:!1,wrapAngle:0,initialCoilerAngle:Et});const e=[];for(let n=0;n<P.length;n++){const i=P[n];if(i.type===X.STATIC)continue;const o=j.position.x-i.position.x,r=j.position.y-i.position.y;if(o*o+r*r<gi)if(st[n].wrapped||(st[n].wrapped=!0,st[n].initialCoilerAngle=Et),st[n].wrapAngle=Math.abs(Et-st[n].initialCoilerAngle),st[n].wrapAngle>bi)e.push(n);else{i.velocity.scale(.7),i.angularVelocity.scale(.7);const a=1.5;if(i.applyForce(new l(o*a,r*a,0),new l(0,0,0)),t!==0){const d=1.2*Math.abs(t),u=new l(-r*d,o*d,0);i.applyForce(u,new l(0,0,0))}}else st[n].wrapped=!1}const s=P.length-1;e.includes(s)&&!xt.has(s)&&(Ye(s),xt.add(s));for(let n=s-1;n>=20;n--)e.includes(n)&&xt.has(n+1)&&(xt.has(n)||(Ye(n),xt.add(n)));t!==0&&Ai(t)}function Ye(A){var n,i;const t=P[A];if(t.type===X.STATIC)return;const e={x:t.position.x-j.position.x,y:t.position.y-j.position.y,z:t.position.z-j.position.z,radius:Math.sqrt(Math.pow(t.position.x-j.position.x,2)+Math.pow(t.position.y-j.position.y,2)),angle:Math.atan2(t.position.y-j.position.y,t.position.x-j.position.x)};t.type=X.STATIC,t.mass=0,t.updateMassProperties(),t.velocity.set(0,0,0),t.angularVelocity.set(0,0,0),t.force.set(0,0,0),t.torque.set(0,0,0),t.userData=t.userData||{},t.userData.attachedToCoiler=!0,t.userData.relativeToCoiler=e;const s=P.length-1-A;(s%5===0||A===P.length-1)&&console.log(`Made segment ${A} static (${s} from end) - rotation ${((i=(n=st[A])==null?void 0:n.wrapAngle)==null?void 0:i.toFixed(2))||0} rad`)}function Ai(A){const e=A*.016666666666666666;for(let s=0;s<P.length;s++){const n=P[s];if(n.type===X.STATIC&&n.userData&&n.userData.attachedToCoiler){const i=n.userData.relativeToCoiler;i.angle+=e;const o=j.position.x+i.radius*Math.cos(i.angle),r=j.position.y+i.radius*Math.sin(i.angle);n.position.x=o,n.position.y=r,n.position.z=i.z+j.position.z}}}function Ti(A,t){j&&(W.removeBody(j),j=null);const e=A[t],s=e.radius,n=e.height;j=new M({mass:0,type:X.KINEMATIC,material:yt,collisionFilterGroup:lt.COILER,collisionFilterMask:lt.ROPE});const i=new qe(s,s,n,16);j.addShape(i,new l(0,0,0),new H().setFromAxisAngle(new l(1,0,0),Math.PI/2));const o=s*.03,r=6;for(let c=0;c<32;c++){const a=c/32*Math.PI*2*r,d=c/32*n-n/2,u=s*.97*Math.cos(a),h=s*.97*Math.sin(a),f=new Qt(o);j.addShape(f,new l(u,h,d))}return j.position.set(.57,.225,e.zOffset),W.addBody(j),j}function Ii(A,t){at&&(W.removeBody(at),at=null),ht&&(W.removeBody(ht),ht=null);const e=A[t],s=e.radius,n=e.height,i=t==="100-10"?2:t==="100-99"?2.1:2.2,o=new qe(s*i,s*i,n/10,16);return at=new M({mass:0,type:X.KINEMATIC,shape:o,material:yt}),at.position.set(.57,.225,e.sideOffset1),at.quaternion.setFromEuler(Math.PI/2,0,0),W.addBody(at),ht=new M({mass:0,type:X.KINEMATIC,shape:o,material:yt}),ht.position.set(.57,.225,e.sideOffset2),ht.quaternion.setFromEuler(Math.PI/2,0,0),W.addBody(ht),{side1:at,side2:ht}}function Ni(A,t,e){if(Y){Y.position.x=A,Y.position.y=t,Y.position.z=e,Y.velocity.set(0,0,0),Y.angularVelocity.set(0,0,0);const s=10;for(let n=Math.max(0,P.length-s);n<P.length;n++)P[n]&&(P[n].velocity.scale(.9),P[n].angularVelocity.scale(.9))}}function Pi(A,t){t!==void 0&&(Et=t),j&&j.angularVelocity.set(0,0,A),at&&at.angularVelocity.set(0,0,A),ht&&ht.angularVelocity.set(0,0,A)}function le(){console.log("Converting rope bodies to static"),Dt=!0;for(let A=0;A<P.length;A++){const t=P[A];t.type=X.STATIC,t.mass=0,t.updateMassProperties(),t.velocity.set(0,0,0),t.angularVelocity.set(0,0,0),t.force.set(0,0,0),t.torque.set(0,0,0)}Y&&(Y.type=X.STATIC,Y.updateMassProperties()),et&&(et.type=X.STATIC,et.updateMassProperties()),Z&&(Z.type=X.STATIC,Z.updateMassProperties())}self.onmessage=function(A){try{const{type:t,data:e,forceReset:s}=A.data,n=["resetRope","init","finalizeRope"];if(t==="createRope"?Ge=!0:t==="resetRope"&&(Ge=!1),Dt&&!n.includes(t))return;switch(e&&e.maxSegments?vt=e.maxSegments:e&&e.activeCoilerType==="100-200"&&(vt=300),t){case"init":Ei(),self.postMessage({type:"initialized"});break;case"createRope":Ci();const i=P.map(a=>({x:a.position.x,y:a.position.y,z:a.position.z}));self.postMessage({type:"ropeCreated",positions:i});break;case"resetRope":e&&e.resetSegmentTracking&&xt.clear(),He(e&&e.resetAngle),Dt=!1,De=0,oe=0,self.postMessage({type:"ropeReset"});break;case"createCoiler":Ti(e.coilerConfig,e.activeCoilerType),Ii(e.coilerConfig,e.activeCoilerType),self.postMessage({type:"coilerCreated"});break;case"addSegment":console.log(`Segments: ${P.length}/${vt}`),P.length<vt&&zi(e.coilerConfig,e.activeCoilerType,vt,e.rotationAngle,e.frameCreated),P.length>=vt&&P[0].type!==X.STATIC&&le();const o=P.map(a=>({x:a.position.x,y:a.position.y,z:a.position.z}));P.length>=vt?self.postMessage({type:"segmentLimitReached",positions:o}):self.postMessage({type:"segmentAdded",positions:o});break;case"updateAnchor":Ni(e.x,e.y,e.z);break;case"setRotation":Pi(e.rotationSpeed,e.rotationAngle);break;case"step":const r=Si(e.timeStep,e.subSteps,vt,e.rotationSpeed,e.rotationAngle,e.currentFrame);self.postMessage({type:"stepped",positions:r,count:P.length,physicsTime:oe});break;case"finalizeRope":le();const c=P.map(a=>({x:a.position.x,y:a.position.y,z:a.position.z}));self.postMessage({type:"ropeFinalized",positions:c});break}}catch(t){console.error("Worker error:",t),self.postMessage({type:"error",error:t.message})}}})();
